
metaporter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001660  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800171c  0800171c  0001171c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800176c  0800176c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800176c  0800176c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800176c  0800176c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800176c  0800176c  0001176c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001770  08001770  00011770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  08001784  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001784  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a4d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000eb8  00000000  00000000  00022a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d8  00000000  00000000  00023940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000340  00000000  00000000  00023d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a54  00000000  00000000  00024058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004eef  00000000  00000000  0003daac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a234  00000000  00000000  0004299b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcbcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bac  00000000  00000000  000dcc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001704 	.word	0x08001704

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08001704 	.word	0x08001704

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <i2c1_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void i2c1_init()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000220:	4b36      	ldr	r3, [pc, #216]	; (80002fc <i2c1_init+0xe0>)
 8000222:	695a      	ldr	r2, [r3, #20]
 8000224:	4b35      	ldr	r3, [pc, #212]	; (80002fc <i2c1_init+0xe0>)
 8000226:	2180      	movs	r1, #128	; 0x80
 8000228:	02c9      	lsls	r1, r1, #11
 800022a:	430a      	orrs	r2, r1
 800022c:	615a      	str	r2, [r3, #20]
	GPIOB->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 800022e:	4b34      	ldr	r3, [pc, #208]	; (8000300 <i2c1_init+0xe4>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b33      	ldr	r3, [pc, #204]	; (8000300 <i2c1_init+0xe4>)
 8000234:	4933      	ldr	r1, [pc, #204]	; (8000304 <i2c1_init+0xe8>)
 8000236:	400a      	ands	r2, r1
 8000238:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1;
 800023a:	4b31      	ldr	r3, [pc, #196]	; (8000300 <i2c1_init+0xe4>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b30      	ldr	r3, [pc, #192]	; (8000300 <i2c1_init+0xe4>)
 8000240:	21a0      	movs	r1, #160	; 0xa0
 8000242:	0209      	lsls	r1, r1, #8
 8000244:	430a      	orrs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[0] |= (1 << 4*6) | (1 << 4 * 7);
 8000248:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <i2c1_init+0xe4>)
 800024a:	6a1a      	ldr	r2, [r3, #32]
 800024c:	4b2c      	ldr	r3, [pc, #176]	; (8000300 <i2c1_init+0xe4>)
 800024e:	2188      	movs	r1, #136	; 0x88
 8000250:	0549      	lsls	r1, r1, #21
 8000252:	430a      	orrs	r2, r1
 8000254:	621a      	str	r2, [r3, #32]

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000256:	4b29      	ldr	r3, [pc, #164]	; (80002fc <i2c1_init+0xe0>)
 8000258:	69da      	ldr	r2, [r3, #28]
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <i2c1_init+0xe0>)
 800025c:	2180      	movs	r1, #128	; 0x80
 800025e:	0389      	lsls	r1, r1, #14
 8000260:	430a      	orrs	r2, r1
 8000262:	61da      	str	r2, [r3, #28]

    I2C1->CR1 &= ~(I2C_CR1_PE | I2C_CR1_ANFOFF | I2C_CR1_ERRIE | I2C_CR1_NOSTRETCH);
 8000264:	4b28      	ldr	r3, [pc, #160]	; (8000308 <i2c1_init+0xec>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b27      	ldr	r3, [pc, #156]	; (8000308 <i2c1_init+0xec>)
 800026a:	4928      	ldr	r1, [pc, #160]	; (800030c <i2c1_init+0xf0>)
 800026c:	400a      	ands	r2, r1
 800026e:	601a      	str	r2, [r3, #0]

    I2C1->TIMINGR = 0;
 8000270:	4b25      	ldr	r3, [pc, #148]	; (8000308 <i2c1_init+0xec>)
 8000272:	2200      	movs	r2, #0
 8000274:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR &= ~I2C_TIMINGR_PRESC;
 8000276:	4b24      	ldr	r3, [pc, #144]	; (8000308 <i2c1_init+0xec>)
 8000278:	691a      	ldr	r2, [r3, #16]
 800027a:	4b23      	ldr	r3, [pc, #140]	; (8000308 <i2c1_init+0xec>)
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	0912      	lsrs	r2, r2, #4
 8000280:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR |= 3 << 20;
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <i2c1_init+0xec>)
 8000284:	691a      	ldr	r2, [r3, #16]
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <i2c1_init+0xec>)
 8000288:	21c0      	movs	r1, #192	; 0xc0
 800028a:	0389      	lsls	r1, r1, #14
 800028c:	430a      	orrs	r2, r1
 800028e:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR |= 1 << 16;
 8000290:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <i2c1_init+0xec>)
 8000292:	691a      	ldr	r2, [r3, #16]
 8000294:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <i2c1_init+0xec>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	0249      	lsls	r1, r1, #9
 800029a:	430a      	orrs	r2, r1
 800029c:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR |= 3 << 8;
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <i2c1_init+0xec>)
 80002a0:	691a      	ldr	r2, [r3, #16]
 80002a2:	4b19      	ldr	r3, [pc, #100]	; (8000308 <i2c1_init+0xec>)
 80002a4:	21c0      	movs	r1, #192	; 0xc0
 80002a6:	0089      	lsls	r1, r1, #2
 80002a8:	430a      	orrs	r2, r1
 80002aa:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR |= 9 << 0;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <i2c1_init+0xec>)
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	4b15      	ldr	r3, [pc, #84]	; (8000308 <i2c1_init+0xec>)
 80002b2:	2109      	movs	r1, #9
 80002b4:	430a      	orrs	r2, r1
 80002b6:	611a      	str	r2, [r3, #16]

    I2C1->OAR1 &= ~I2C_OAR1_OA1EN;
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <i2c1_init+0xec>)
 80002ba:	689a      	ldr	r2, [r3, #8]
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <i2c1_init+0xec>)
 80002be:	4914      	ldr	r1, [pc, #80]	; (8000310 <i2c1_init+0xf4>)
 80002c0:	400a      	ands	r2, r1
 80002c2:	609a      	str	r2, [r3, #8]
    I2C1->OAR2 &= ~I2C_OAR2_OA2EN;
 80002c4:	4b10      	ldr	r3, [pc, #64]	; (8000308 <i2c1_init+0xec>)
 80002c6:	68da      	ldr	r2, [r3, #12]
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <i2c1_init+0xec>)
 80002ca:	4911      	ldr	r1, [pc, #68]	; (8000310 <i2c1_init+0xf4>)
 80002cc:	400a      	ands	r2, r1
 80002ce:	60da      	str	r2, [r3, #12]

    I2C1->CR2 &= ~I2C_CR2_ADD10;
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <i2c1_init+0xec>)
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <i2c1_init+0xec>)
 80002d6:	490f      	ldr	r1, [pc, #60]	; (8000314 <i2c1_init+0xf8>)
 80002d8:	400a      	ands	r2, r1
 80002da:	605a      	str	r2, [r3, #4]
    I2C1->CR2 |= I2C_CR2_AUTOEND;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <i2c1_init+0xec>)
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <i2c1_init+0xec>)
 80002e2:	2180      	movs	r1, #128	; 0x80
 80002e4:	0489      	lsls	r1, r1, #18
 80002e6:	430a      	orrs	r2, r1
 80002e8:	605a      	str	r2, [r3, #4]

    I2C1->CR1 |= I2C_CR1_PE;
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <i2c1_init+0xec>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <i2c1_init+0xec>)
 80002f0:	2101      	movs	r1, #1
 80002f2:	430a      	orrs	r2, r1
 80002f4:	601a      	str	r2, [r3, #0]
}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000
 8000300:	48000400 	.word	0x48000400
 8000304:	ffff0fff 	.word	0xffff0fff
 8000308:	40005400 	.word	0x40005400
 800030c:	fffdef7e 	.word	0xfffdef7e
 8000310:	ffff7fff 	.word	0xffff7fff
 8000314:	fffff7ff 	.word	0xfffff7ff

08000318 <i2c1_start>:

void i2c1_start(uint32_t devaddr, uint8_t size, uint8_t dir)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	0008      	movs	r0, r1
 8000322:	0011      	movs	r1, r2
 8000324:	1cfb      	adds	r3, r7, #3
 8000326:	1c02      	adds	r2, r0, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	1cbb      	adds	r3, r7, #2
 800032c:	1c0a      	adds	r2, r1, #0
 800032e:	701a      	strb	r2, [r3, #0]
	uint32_t tempreg = I2C1->CR2;
 8000330:	4b17      	ldr	r3, [pc, #92]	; (8000390 <i2c1_start+0x78>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	60fb      	str	r3, [r7, #12]
	tempreg &= ~(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD |
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	4a16      	ldr	r2, [pc, #88]	; (8000394 <i2c1_start+0x7c>)
 800033a:	4013      	ands	r3, r2
 800033c:	60fb      	str	r3, [r7, #12]
	        I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP);
	if (dir == 1)
 800033e:	1cbb      	adds	r3, r7, #2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d105      	bne.n	8000352 <i2c1_start+0x3a>
    {
		tempreg |= I2C_CR2_RD_WRN;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	00d2      	lsls	r2, r2, #3
 800034c:	4313      	orrs	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	e003      	b.n	800035a <i2c1_start+0x42>
	}
    else
    {
        tempreg &= ~I2C_CR2_RD_WRN;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4a10      	ldr	r2, [pc, #64]	; (8000398 <i2c1_start+0x80>)
 8000356:	4013      	ands	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
    }
    tempreg |= ((devaddr << 1) & I2C_CR2_SADD) | ((size << 16) & I2C_CR2_NBYTES);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	059b      	lsls	r3, r3, #22
 8000360:	0d9a      	lsrs	r2, r3, #22
 8000362:	1cfb      	adds	r3, r7, #3
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	041b      	lsls	r3, r3, #16
 8000368:	0019      	movs	r1, r3
 800036a:	23ff      	movs	r3, #255	; 0xff
 800036c:	041b      	lsls	r3, r3, #16
 800036e:	400b      	ands	r3, r1
 8000370:	4313      	orrs	r3, r2
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	4313      	orrs	r3, r2
 8000376:	60fb      	str	r3, [r7, #12]
    tempreg |= I2C_CR2_START;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	2280      	movs	r2, #128	; 0x80
 800037c:	0192      	lsls	r2, r2, #6
 800037e:	4313      	orrs	r3, r2
 8000380:	60fb      	str	r3, [r7, #12]
    I2C1->CR2 = tempreg;
 8000382:	4b03      	ldr	r3, [pc, #12]	; (8000390 <i2c1_start+0x78>)
 8000384:	68fa      	ldr	r2, [r7, #12]
 8000386:	605a      	str	r2, [r3, #4]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b004      	add	sp, #16
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40005400 	.word	0x40005400
 8000394:	fc009800 	.word	0xfc009800
 8000398:	fffffbff 	.word	0xfffffbff

0800039c <i2c1_stop>:

void i2c1_stop(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
    if (I2C1->ISR & I2C_ISR_STOPF)
 80003a0:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <i2c1_stop+0x3c>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	2220      	movs	r2, #32
 80003a6:	4013      	ands	r3, r2
 80003a8:	d113      	bne.n	80003d2 <i2c1_stop+0x36>
    {
        return;
    }
    I2C1->CR2 |= I2C_CR2_STOP; // Send stop bit as master
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <i2c1_stop+0x3c>)
 80003ac:	685a      	ldr	r2, [r3, #4]
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <i2c1_stop+0x3c>)
 80003b0:	2180      	movs	r1, #128	; 0x80
 80003b2:	01c9      	lsls	r1, r1, #7
 80003b4:	430a      	orrs	r2, r1
 80003b6:	605a      	str	r2, [r3, #4]

    while( (I2C1->ISR & I2C_ISR_STOPF) == 0); // Wait while stop flag is not set
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <i2c1_stop+0x3c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	2220      	movs	r2, #32
 80003c0:	4013      	ands	r3, r2
 80003c2:	d0fa      	beq.n	80003ba <i2c1_stop+0x1e>
    I2C1->ICR |= I2C_ICR_STOPCF; // Clear stop flag
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <i2c1_stop+0x3c>)
 80003c6:	69da      	ldr	r2, [r3, #28]
 80003c8:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <i2c1_stop+0x3c>)
 80003ca:	2120      	movs	r1, #32
 80003cc:	430a      	orrs	r2, r1
 80003ce:	61da      	str	r2, [r3, #28]
 80003d0:	e000      	b.n	80003d4 <i2c1_stop+0x38>
        return;
 80003d2:	46c0      	nop			; (mov r8, r8)
}
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40005400 	.word	0x40005400

080003dc <i2c1_wait_idle>:

void i2c1_wait_idle(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
    while ((I2C1->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY); // Wait while busy
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <i2c1_wait_idle+0x20>)
 80003e4:	699a      	ldr	r2, [r3, #24]
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	021b      	lsls	r3, r3, #8
 80003ea:	401a      	ands	r2, r3
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	021b      	lsls	r3, r3, #8
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d0f6      	beq.n	80003e2 <i2c1_wait_idle+0x6>
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40005400 	.word	0x40005400

08000400 <i2c1_send_data>:

int8_t i2c1_send_data(uint8_t devaddr, void *pdata, uint8_t size)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6039      	str	r1, [r7, #0]
 8000408:	0011      	movs	r1, r2
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	1c02      	adds	r2, r0, #0
 800040e:	701a      	strb	r2, [r3, #0]
 8000410:	1dbb      	adds	r3, r7, #6
 8000412:	1c0a      	adds	r2, r1, #0
 8000414:	701a      	strb	r2, [r3, #0]
    int i;
    if (size <= 0 || pdata == 0)
 8000416:	1dbb      	adds	r3, r7, #6
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d002      	beq.n	8000424 <i2c1_send_data+0x24>
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d102      	bne.n	800042a <i2c1_send_data+0x2a>
    {
        return -1;
 8000424:	2301      	movs	r3, #1
 8000426:	425b      	negs	r3, r3
 8000428:	e054      	b.n	80004d4 <i2c1_send_data+0xd4>
    }
    uint8_t *udata = (uint8_t*)pdata;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	60fb      	str	r3, [r7, #12]
    i2c1_wait_idle();
 800042e:	f7ff ffd5 	bl	80003dc <i2c1_wait_idle>

    i2c1_start(devaddr, size, 0);
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	7818      	ldrb	r0, [r3, #0]
 8000436:	1dbb      	adds	r3, r7, #6
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2200      	movs	r2, #0
 800043c:	0019      	movs	r1, r3
 800043e:	f7ff ff6b 	bl	8000318 <i2c1_start>

    for (i = 0; i < size; i++)
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
 8000446:	e02a      	b.n	800049e <i2c1_send_data+0x9e>
    {
        int count = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	613b      	str	r3, [r7, #16]
        while ((I2C1->ISR & I2C_ISR_TXIS) == 0)
 800044c:	e019      	b.n	8000482 <i2c1_send_data+0x82>
        {
            count += 1;
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	3301      	adds	r3, #1
 8000452:	613b      	str	r3, [r7, #16]
            if (count > 1000000)
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	4a21      	ldr	r2, [pc, #132]	; (80004dc <i2c1_send_data+0xdc>)
 8000458:	4293      	cmp	r3, r2
 800045a:	dd02      	ble.n	8000462 <i2c1_send_data+0x62>
            {
                return -1;
 800045c:	2301      	movs	r3, #1
 800045e:	425b      	negs	r3, r3
 8000460:	e038      	b.n	80004d4 <i2c1_send_data+0xd4>
            }

            if ((I2C1->ISR & I2C_ISR_NACKF))
 8000462:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <i2c1_send_data+0xe0>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	2210      	movs	r2, #16
 8000468:	4013      	ands	r3, r2
 800046a:	d00a      	beq.n	8000482 <i2c1_send_data+0x82>
            {
                I2C1->ICR |= I2C_ICR_NACKCF;
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <i2c1_send_data+0xe0>)
 800046e:	69da      	ldr	r2, [r3, #28]
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <i2c1_send_data+0xe0>)
 8000472:	2110      	movs	r1, #16
 8000474:	430a      	orrs	r2, r1
 8000476:	61da      	str	r2, [r3, #28]
                i2c1_stop();
 8000478:	f7ff ff90 	bl	800039c <i2c1_stop>
                return -1;
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	e028      	b.n	80004d4 <i2c1_send_data+0xd4>
        while ((I2C1->ISR & I2C_ISR_TXIS) == 0)
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <i2c1_send_data+0xe0>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	2202      	movs	r2, #2
 8000488:	4013      	ands	r3, r2
 800048a:	d0e0      	beq.n	800044e <i2c1_send_data+0x4e>
            }
        }

        I2C1->TXDR = udata[i] & I2C_TXDR_TXDATA;
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	18d3      	adds	r3, r2, r3
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <i2c1_send_data+0xe0>)
 8000496:	629a      	str	r2, [r3, #40]	; 0x28
    for (i = 0; i < size; i++)
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	3301      	adds	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	1dbb      	adds	r3, r7, #6
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	697a      	ldr	r2, [r7, #20]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbcf      	blt.n	8000448 <i2c1_send_data+0x48>
        //nano_wait(1000000);
    }

    while ((I2C1->ISR & I2C_ISR_TC) == 0 && (I2C1->ISR & I2C_ISR_NACKF) == 0);
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <i2c1_send_data+0xe0>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	2240      	movs	r2, #64	; 0x40
 80004b0:	4013      	ands	r3, r2
 80004b2:	d104      	bne.n	80004be <i2c1_send_data+0xbe>
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <i2c1_send_data+0xe0>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	2210      	movs	r2, #16
 80004ba:	4013      	ands	r3, r2
 80004bc:	d0f5      	beq.n	80004aa <i2c1_send_data+0xaa>

    if ((I2C1->ISR & I2C_ISR_NACKF) != 0)
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <i2c1_send_data+0xe0>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	2210      	movs	r2, #16
 80004c4:	4013      	ands	r3, r2
 80004c6:	d002      	beq.n	80004ce <i2c1_send_data+0xce>
    {
        return -1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	425b      	negs	r3, r3
 80004cc:	e002      	b.n	80004d4 <i2c1_send_data+0xd4>
    }

    i2c1_stop();
 80004ce:	f7ff ff65 	bl	800039c <i2c1_stop>
    return 0;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b006      	add	sp, #24
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	000f4240 	.word	0x000f4240
 80004e0:	40005400 	.word	0x40005400

080004e4 <i2c1_recv_data>:

int8_t i2c1_recv_data(uint8_t devaddr, void *pdata, uint8_t size)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6039      	str	r1, [r7, #0]
 80004ec:	0011      	movs	r1, r2
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	1c02      	adds	r2, r0, #0
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	1dbb      	adds	r3, r7, #6
 80004f6:	1c0a      	adds	r2, r1, #0
 80004f8:	701a      	strb	r2, [r3, #0]
    int i;
    if (size <= 0 || pdata == 0)
 80004fa:	1dbb      	adds	r3, r7, #6
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <i2c1_recv_data+0x24>
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <i2c1_recv_data+0x2a>
    {
        return -1;
 8000508:	2301      	movs	r3, #1
 800050a:	425b      	negs	r3, r3
 800050c:	e02c      	b.n	8000568 <i2c1_recv_data+0x84>
    }
    uint8_t *udata = (uint8_t*) pdata;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	60bb      	str	r3, [r7, #8]
    i2c1_wait_idle();
 8000512:	f7ff ff63 	bl	80003dc <i2c1_wait_idle>

    i2c1_start(devaddr, size, 1);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	7818      	ldrb	r0, [r3, #0]
 800051a:	1dbb      	adds	r3, r7, #6
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2201      	movs	r2, #1
 8000520:	0019      	movs	r1, r3
 8000522:	f7ff fef9 	bl	8000318 <i2c1_start>

    for (i = 0; i < size; i++)
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e00f      	b.n	800054c <i2c1_recv_data+0x68>
    {
        while ((I2C1->ISR & I2C_ISR_RXNE) == 0);
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <i2c1_recv_data+0x8c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	2204      	movs	r2, #4
 8000534:	4013      	ands	r3, r2
 8000536:	d0fa      	beq.n	800052e <i2c1_recv_data+0x4a>
        udata[i] = I2C1->RXDR & I2C_RXDR_RXDATA;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <i2c1_recv_data+0x8c>)
 800053a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	18d3      	adds	r3, r2, r3
 8000542:	b2ca      	uxtb	r2, r1
 8000544:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	1dbb      	adds	r3, r7, #6
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	429a      	cmp	r2, r3
 8000554:	dbea      	blt.n	800052c <i2c1_recv_data+0x48>
        //nano_wait(1000000);
    }

    while ((I2C1->ISR & I2C_ISR_TC) == 0);
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <i2c1_recv_data+0x8c>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	2240      	movs	r2, #64	; 0x40
 800055e:	4013      	ands	r3, r2
 8000560:	d0fa      	beq.n	8000558 <i2c1_recv_data+0x74>
    i2c1_stop();
 8000562:	f7ff ff1b 	bl	800039c <i2c1_stop>
    return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	0018      	movs	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	b004      	add	sp, #16
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40005400 	.word	0x40005400

08000574 <lidar_init>:

void lidar_init()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	i2c1_init();
 8000578:	f7ff fe50 	bl	800021c <i2c1_init>
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <lidar_init_dist_measure>:

void lidar_init_dist_measure()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t init_data[] = {LIDAR_ACQ_COMMAND_REG, LIDAR_ACQ_COMMAND_VAL};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	00d2      	lsls	r2, r2, #3
 8000590:	801a      	strh	r2, [r3, #0]
	i2c1_send_data(lidar_addr, init_data, sizeof(init_data));
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <lidar_init_dist_measure+0x24>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	1d39      	adds	r1, r7, #4
 8000598:	2202      	movs	r2, #2
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff ff30 	bl	8000400 <i2c1_send_data>
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000000 	.word	0x20000000

080005ac <lidar_wait_for_data>:

void lidar_wait_for_data()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

	uint8_t reg_addr[] = {LIDAR_STATUS_REG};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <lidar_wait_for_data+0x78>)
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	701a      	strb	r2, [r3, #0]
	i2c1_send_data(lidar_addr, reg_addr, sizeof(reg_addr));
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <lidar_wait_for_data+0x7c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	1d39      	adds	r1, r7, #4
 80005c0:	2201      	movs	r2, #1
 80005c2:	0018      	movs	r0, r3
 80005c4:	f7ff ff1c 	bl	8000400 <i2c1_send_data>

	uint16_t counter = 0;
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	2200      	movs	r2, #0
 80005cc:	801a      	strh	r2, [r3, #0]
	uint8_t busy[] = {1};
 80005ce:	003b      	movs	r3, r7
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <lidar_wait_for_data+0x78>)
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	701a      	strb	r2, [r3, #0]
	while (busy[0])
 80005d6:	e01b      	b.n	8000610 <lidar_wait_for_data+0x64>
	{
		if (counter > LIDAR_TIMEOUT_VAL)
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <lidar_wait_for_data+0x80>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d81b      	bhi.n	800061a <lidar_wait_for_data+0x6e>
		{
			break;
		}

		i2c1_recv_data(lidar_addr, busy, sizeof(busy));
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <lidar_wait_for_data+0x7c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	0039      	movs	r1, r7
 80005e8:	2201      	movs	r2, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ff7a 	bl	80004e4 <i2c1_recv_data>
		busy[0] &= 0x01;
 80005f0:	003b      	movs	r3, r7
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4013      	ands	r3, r2
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	701a      	strb	r2, [r3, #0]
		counter++;
 80005fe:	1dbb      	adds	r3, r7, #6
 8000600:	881a      	ldrh	r2, [r3, #0]
 8000602:	1dbb      	adds	r3, r7, #6
 8000604:	3201      	adds	r2, #1
 8000606:	801a      	strh	r2, [r3, #0]
		nano_wait(10000);
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <lidar_wait_for_data+0x84>)
 800060a:	0018      	movs	r0, r3
 800060c:	f000 f854 	bl	80006b8 <nano_wait>
	while (busy[0])
 8000610:	003b      	movs	r3, r7
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1df      	bne.n	80005d8 <lidar_wait_for_data+0x2c>
	}
}
 8000618:	e000      	b.n	800061c <lidar_wait_for_data+0x70>
			break;
 800061a:	46c0      	nop			; (mov r8, r8)
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b002      	add	sp, #8
 8000622:	bd80      	pop	{r7, pc}
 8000624:	0800171c 	.word	0x0800171c
 8000628:	20000000 	.word	0x20000000
 800062c:	0000270f 	.word	0x0000270f
 8000630:	00002710 	.word	0x00002710

08000634 <lidar_read_dist_reg>:

void lidar_read_dist_reg(uint16_t* pdist)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	uint8_t reg_addr[] = {LIDAR_DIST_ADDR};
 800063c:	210c      	movs	r1, #12
 800063e:	187b      	adds	r3, r7, r1
 8000640:	4a13      	ldr	r2, [pc, #76]	; (8000690 <lidar_read_dist_reg+0x5c>)
 8000642:	7812      	ldrb	r2, [r2, #0]
 8000644:	701a      	strb	r2, [r3, #0]
	i2c1_send_data(lidar_addr, reg_addr, sizeof(reg_addr));
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <lidar_read_dist_reg+0x60>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	1879      	adds	r1, r7, r1
 800064c:	2201      	movs	r2, #1
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff fed6 	bl	8000400 <i2c1_send_data>

	uint8_t temp[2] = {0};
 8000654:	2108      	movs	r1, #8
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
	i2c1_recv_data(lidar_addr, temp, sizeof(temp));
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <lidar_read_dist_reg+0x60>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	000c      	movs	r4, r1
 8000662:	1879      	adds	r1, r7, r1
 8000664:	2202      	movs	r2, #2
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff ff3c 	bl	80004e4 <i2c1_recv_data>

	*pdist = ((temp[0] << 8) | temp[1]);
 800066c:	0021      	movs	r1, r4
 800066e:	187b      	adds	r3, r7, r1
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	b21a      	sxth	r2, r3
 8000676:	187b      	adds	r3, r7, r1
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	b21b      	sxth	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b21b      	sxth	r3, r3
 8000680:	b29a      	uxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	801a      	strh	r2, [r3, #0]
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b005      	add	sp, #20
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	08001720 	.word	0x08001720
 8000694:	20000000 	.word	0x20000000

08000698 <lidar_get_distance>:

void lidar_get_distance(uint16_t* pdist)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

	// step 1: initiate the transaction and set the register from which we want to read
	lidar_init_dist_measure();
 80006a0:	f7ff ff70 	bl	8000584 <lidar_init_dist_measure>

	// step 2: wait till status reg lsb goes low
	lidar_wait_for_data();
 80006a4:	f7ff ff82 	bl	80005ac <lidar_wait_for_data>

	// step 3: read data register
	lidar_read_dist_reg(pdist);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff ffc2 	bl	8000634 <lidar_read_dist_reg>
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b002      	add	sp, #8
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <nano_wait>:
	uint16_t dist;
	lidar_get_distance(&dist);
}


void nano_wait(unsigned int n) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	1c18      	adds	r0, r3, #0

080006c4 <repeat>:
 80006c4:	3853      	subs	r0, #83	; 0x53
 80006c6:	dcfd      	bgt.n	80006c4 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b002      	add	sp, #8
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 f9f1 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f820 	bl	800071e <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  uart3_init();
 80006de:	f000 f8e9 	bl	80008b4 <uart3_init>
  lidar_init();
 80006e2:	f7ff ff47 	bl	8000574 <lidar_init>
  //lidar_wait_for_data(); // passes. scope verified
  // lidar_test_get_one_distance(); // passes. scope verified. Reading takes a long time to be ready

  // read lidar data into buffer
  uint16_t dist[2];
  for (int i = 0; i < 2; i++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e00a      	b.n	8000702 <main+0x32>
	  lidar_get_distance(&dist[i]);
 80006ec:	2308      	movs	r3, #8
 80006ee:	18fa      	adds	r2, r7, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ffce 	bl	8000698 <lidar_get_distance>
  for (int i = 0; i < 2; i++) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b01      	cmp	r3, #1
 8000706:	ddf1      	ble.n	80006ec <main+0x1c>
  }


  uint8_t header[2];
  uart3_create_header(header, UART_COM_NONE, UART_DATA_SOURCE_LIDAR, UART_UINT16_T, 20);
 8000708:	1d38      	adds	r0, r7, #4
 800070a:	2314      	movs	r3, #20
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2320      	movs	r3, #32
 8000710:	2204      	movs	r2, #4
 8000712:	2100      	movs	r1, #0
 8000714:	f000 f930 	bl	8000978 <uart3_create_header>
  uart3_test();
 8000718:	f000 f99a 	bl	8000a50 <uart3_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071c:	e7fe      	b.n	800071c <main+0x4c>

0800071e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071e:	b590      	push	{r4, r7, lr}
 8000720:	b093      	sub	sp, #76	; 0x4c
 8000722:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000724:	2414      	movs	r4, #20
 8000726:	193b      	adds	r3, r7, r4
 8000728:	0018      	movs	r0, r3
 800072a:	2334      	movs	r3, #52	; 0x34
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f000 ffe0 	bl	80016f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	0018      	movs	r0, r3
 8000738:	2310      	movs	r3, #16
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f000 ffd9 	bl	80016f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2220      	movs	r2, #32
 8000746:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2201      	movs	r2, #1
 800074c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	193b      	adds	r3, r7, r4
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fac8 	bl	8000cec <HAL_RCC_OscConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000760:	f000 f819 	bl	8000796 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2207      	movs	r2, #7
 8000768:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2203      	movs	r2, #3
 800076e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2101      	movs	r1, #1
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fe39 	bl	80013f8 <HAL_RCC_ClockConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x70>
  {
    Error_Handler();
 800078a:	f000 f804 	bl	8000796 <Error_Handler>
  }
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b013      	add	sp, #76	; 0x4c
 8000794:	bd90      	pop	{r4, r7, pc}

08000796 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079a:	b672      	cpsid	i
}
 800079c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079e:	e7fe      	b.n	800079e <Error_Handler+0x8>

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x44>)
 80007a8:	699a      	ldr	r2, [r3, #24]
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <HAL_MspInit+0x44>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	430a      	orrs	r2, r1
 80007b0:	619a      	str	r2, [r3, #24]
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_MspInit+0x44>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	2201      	movs	r2, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x44>)
 80007c0:	69da      	ldr	r2, [r3, #28]
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_MspInit+0x44>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	0549      	lsls	r1, r1, #21
 80007c8:	430a      	orrs	r2, r1
 80007ca:	61da      	str	r2, [r3, #28]
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_MspInit+0x44>)
 80007ce:	69da      	ldr	r2, [r3, #28]
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	055b      	lsls	r3, r3, #21
 80007d4:	4013      	ands	r3, r2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f99e 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <uart3_gpio_init>:



/* USER CODE BEGIN 4 */

void uart3_gpio_init(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;			// Enable GPIOC
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <uart3_gpio_init+0x84>)
 8000826:	695a      	ldr	r2, [r3, #20]
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <uart3_gpio_init+0x84>)
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	0309      	lsls	r1, r1, #12
 800082e:	430a      	orrs	r2, r1
 8000830:	615a      	str	r2, [r3, #20]
	GPIOC->MODER &= ~GPIO_MODER_MODER10;		// Clear GPIOC MODER10 bits
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <uart3_gpio_init+0x88>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <uart3_gpio_init+0x88>)
 8000838:	491c      	ldr	r1, [pc, #112]	; (80008ac <uart3_gpio_init+0x8c>)
 800083a:	400a      	ands	r2, r1
 800083c:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= GPIO_MODER_MODER10_1;		// Set alternate function bits
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <uart3_gpio_init+0x88>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <uart3_gpio_init+0x88>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0389      	lsls	r1, r1, #14
 8000848:	430a      	orrs	r2, r1
 800084a:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER11;		// Clear GPIOC MODER11 bits
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <uart3_gpio_init+0x88>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <uart3_gpio_init+0x88>)
 8000852:	4917      	ldr	r1, [pc, #92]	; (80008b0 <uart3_gpio_init+0x90>)
 8000854:	400a      	ands	r2, r1
 8000856:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= GPIO_MODER_MODER11_1;		// Set alternate function bits
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <uart3_gpio_init+0x88>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <uart3_gpio_init+0x88>)
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	0409      	lsls	r1, r1, #16
 8000862:	430a      	orrs	r2, r1
 8000864:	601a      	str	r2, [r3, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR10;	// Set high speed output for GPIOC pin 10
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <uart3_gpio_init+0x88>)
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <uart3_gpio_init+0x88>)
 800086c:	21c0      	movs	r1, #192	; 0xc0
 800086e:	0389      	lsls	r1, r1, #14
 8000870:	430a      	orrs	r2, r1
 8000872:	609a      	str	r2, [r3, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR11;	// Set high speed output for GPIOC pin 11
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <uart3_gpio_init+0x88>)
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <uart3_gpio_init+0x88>)
 800087a:	21c0      	movs	r1, #192	; 0xc0
 800087c:	0409      	lsls	r1, r1, #16
 800087e:	430a      	orrs	r2, r1
 8000880:	609a      	str	r2, [r3, #8]
	GPIOC->AFR[1]  |= (1<<8);					// Set AF1 for GPIOC pin 10
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <uart3_gpio_init+0x88>)
 8000884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <uart3_gpio_init+0x88>)
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	0049      	lsls	r1, r1, #1
 800088c:	430a      	orrs	r2, r1
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1]  |= (1<<12);					// Set AF1 for GPIOC pin 11
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <uart3_gpio_init+0x88>)
 8000892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <uart3_gpio_init+0x88>)
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	0149      	lsls	r1, r1, #5
 800089a:	430a      	orrs	r2, r1
 800089c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800
 80008ac:	ffcfffff 	.word	0xffcfffff
 80008b0:	ff3fffff 	.word	0xff3fffff

080008b4 <uart3_init>:

void uart3_init(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	uart3_gpio_init();
 80008b8:	f7ff ffb2 	bl	8000820 <uart3_gpio_init>
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;	// Enable USART3
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <uart3_init+0xac>)
 80008be:	69da      	ldr	r2, [r3, #28]
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <uart3_init+0xac>)
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	02c9      	lsls	r1, r1, #11
 80008c6:	430a      	orrs	r2, r1
 80008c8:	61da      	str	r2, [r3, #28]
	USART3->CR1 &= ~USART_CR1_UE;			// Disable UE (USART3)
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <uart3_init+0xb0>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <uart3_init+0xb0>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	438a      	bics	r2, r1
 80008d4:	601a      	str	r2, [r3, #0]
	USART3->CR1 &= ~(0x3<<28);				// Set word length (M0) to 1 Start bit, 8 data bits, n stop bits
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <uart3_init+0xb0>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <uart3_init+0xb0>)
 80008dc:	4922      	ldr	r1, [pc, #136]	; (8000968 <uart3_init+0xb4>)
 80008de:	400a      	ands	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]
	USART3->CR2 &= ~(0x3<<12);				// Set stop bit to 1
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <uart3_init+0xb0>)
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <uart3_init+0xb0>)
 80008e8:	4920      	ldr	r1, [pc, #128]	; (800096c <uart3_init+0xb8>)
 80008ea:	400a      	ands	r2, r1
 80008ec:	605a      	str	r2, [r3, #4]
	USART3->CR1 &= ~USART_CR1_PCE;			// Disable parity control
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <uart3_init+0xb0>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <uart3_init+0xb0>)
 80008f4:	491e      	ldr	r1, [pc, #120]	; (8000970 <uart3_init+0xbc>)
 80008f6:	400a      	ands	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
	USART3->CR1 &= ~USART_CR1_OVER8;		// Set oversampling by 16
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <uart3_init+0xb0>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <uart3_init+0xb0>)
 8000900:	491c      	ldr	r1, [pc, #112]	; (8000974 <uart3_init+0xc0>)
 8000902:	400a      	ands	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
	USART3->BRR = 0x1a1;					// Set baud rate to 115200 bits/s (0x1a1 = 417 = 48000000 / 115200)
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <uart3_init+0xb0>)
 8000908:	22a2      	movs	r2, #162	; 0xa2
 800090a:	32ff      	adds	r2, #255	; 0xff
 800090c:	60da      	str	r2, [r3, #12]
	USART3->CR1 |= 1<<2;					// Receiver is enabled
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <uart3_init+0xb0>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <uart3_init+0xb0>)
 8000914:	2104      	movs	r1, #4
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= 1<<3;					// Transmitter is enabled
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <uart3_init+0xb0>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <uart3_init+0xb0>)
 8000920:	2108      	movs	r1, #8
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= 1;						// Enable UE (USART3)
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <uart3_init+0xb0>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <uart3_init+0xb0>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	601a      	str	r2, [r3, #0]

	while(((USART3->ISR & USART_ISR_REACK) != USART_ISR_REACK) && ((USART3->ISR & USART_ISR_TEACK) != USART_ISR_TEACK));
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <uart3_init+0xb0>)
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	03db      	lsls	r3, r3, #15
 800093c:	401a      	ands	r2, r3
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	03db      	lsls	r3, r3, #15
 8000942:	429a      	cmp	r2, r3
 8000944:	d008      	beq.n	8000958 <uart3_init+0xa4>
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <uart3_init+0xb0>)
 8000948:	69da      	ldr	r2, [r3, #28]
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	039b      	lsls	r3, r3, #14
 800094e:	401a      	ands	r2, r3
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	039b      	lsls	r3, r3, #14
 8000954:	429a      	cmp	r2, r3
 8000956:	d1ed      	bne.n	8000934 <uart3_init+0x80>

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40021000 	.word	0x40021000
 8000964:	40004800 	.word	0x40004800
 8000968:	cfffffff 	.word	0xcfffffff
 800096c:	ffffcfff 	.word	0xffffcfff
 8000970:	fffffbff 	.word	0xfffffbff
 8000974:	ffff7fff 	.word	0xffff7fff

08000978 <uart3_create_header>:

void uart3_create_header(uint8_t* pheader, uint8_t command, uint8_t d_source, uint8_t d_type, uint8_t num_data)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	000c      	movs	r4, r1
 8000982:	0010      	movs	r0, r2
 8000984:	0019      	movs	r1, r3
 8000986:	1cfb      	adds	r3, r7, #3
 8000988:	1c22      	adds	r2, r4, #0
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	1cbb      	adds	r3, r7, #2
 800098e:	1c02      	adds	r2, r0, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	1c7b      	adds	r3, r7, #1
 8000994:	1c0a      	adds	r2, r1, #0
 8000996:	701a      	strb	r2, [r3, #0]
	pheader[0] = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
	pheader[0] |= command;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	1cfb      	adds	r3, r7, #3
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	701a      	strb	r2, [r3, #0]
	pheader[0] |= d_source;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	1cbb      	adds	r3, r7, #2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	701a      	strb	r2, [r3, #0]
	pheader[0] |= d_type;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	1c7b      	adds	r3, r7, #1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	701a      	strb	r2, [r3, #0]
	pheader[1] = num_data;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	2318      	movs	r3, #24
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	7013      	strb	r3, [r2, #0]
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b003      	add	sp, #12
 80009e0:	bd90      	pop	{r4, r7, pc}
	...

080009e4 <uart3_send_byte>:

void uart3_send_byte(uint8_t c) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	0002      	movs	r2, r0
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	701a      	strb	r2, [r3, #0]

	while((USART3->ISR & USART_ISR_TXE) != USART_ISR_TXE);
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <uart3_send_byte+0x3c>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b80      	cmp	r3, #128	; 0x80
 80009fc:	d1f9      	bne.n	80009f2 <uart3_send_byte+0xe>
	USART3->TDR = c;
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <uart3_send_byte+0x3c>)
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	8513      	strh	r3, [r2, #40]	; 0x28
	while((USART3->ISR & USART_ISR_TXE) != USART_ISR_TXE);
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <uart3_send_byte+0x3c>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	4013      	ands	r3, r2
 8000a12:	2b80      	cmp	r3, #128	; 0x80
 8000a14:	d1f9      	bne.n	8000a0a <uart3_send_byte+0x26>

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004800 	.word	0x40004800

08000a24 <uart3_send_string>:

void uart3_send_string(char * str) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

	while(*str) {
 8000a2c:	e006      	b.n	8000a3c <uart3_send_string+0x18>
		uart3_send_byte(*str++);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff ffd4 	bl	80009e4 <uart3_send_byte>
	while(*str) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1f4      	bne.n	8000a2e <uart3_send_string+0xa>
	}

}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <uart3_test>:

void uart3_test(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

	uart3_send_string("This is a UART test\n\r");
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <uart3_test+0x14>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff ffe4 	bl	8000a24 <uart3_send_string>

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	08001724 	.word	0x08001724

08000a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a92:	f7ff fec0 	bl	8000816 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a96:	f000 fe09 	bl	80016ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9a:	f7ff fe19 	bl	80006d0 <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   r0, =_estack
 8000aa0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aac:	08001774 	.word	0x08001774
  ldr r2, =_sbss
 8000ab0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ab4:	20000030 	.word	0x20000030

08000ab8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_COMP_IRQHandler>
	...

08000abc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <HAL_Init+0x24>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_Init+0x24>)
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f809 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad2:	f7ff fe65 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0x5c>)
 8000aee:	681c      	ldr	r4, [r3, #0]
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x60>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	0019      	movs	r1, r3
 8000af6:	23fa      	movs	r3, #250	; 0xfa
 8000af8:	0098      	lsls	r0, r3, #2
 8000afa:	f7ff fb03 	bl	8000104 <__udivsi3>
 8000afe:	0003      	movs	r3, r0
 8000b00:	0019      	movs	r1, r3
 8000b02:	0020      	movs	r0, r4
 8000b04:	f7ff fafe 	bl	8000104 <__udivsi3>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f8e1 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e00f      	b.n	8000b38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d80b      	bhi.n	8000b36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2301      	movs	r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 f8be 	bl	8000ca8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_InitTick+0x64>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b003      	add	sp, #12
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	20000004 	.word	0x20000004
 8000b44:	2000000c 	.word	0x2000000c
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	001a      	movs	r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x20>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	18d2      	adds	r2, r2, r3
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_IncTick+0x20>)
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	2000000c 	.word	0x2000000c
 8000b6c:	2000002c 	.word	0x2000002c

08000b70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	2000002c 	.word	0x2000002c

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b7f      	cmp	r3, #127	; 0x7f
 8000b98:	d828      	bhi.n	8000bec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <__NVIC_SetPriority+0xd4>)
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	33c0      	adds	r3, #192	; 0xc0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	589b      	ldr	r3, [r3, r2]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <__NVIC_SetPriority+0xd4>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	430a      	orrs	r2, r1
 8000be4:	33c0      	adds	r3, #192	; 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bea:	e031      	b.n	8000c50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <__NVIC_SetPriority+0xd8>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	3b08      	subs	r3, #8
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3306      	adds	r3, #6
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <__NVIC_SetPriority+0xd8>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	4023      	ands	r3, r4
 8000c40:	3b08      	subs	r3, #8
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	430a      	orrs	r2, r1
 8000c46:	3306      	adds	r3, #6
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	18c3      	adds	r3, r0, r3
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	045b      	lsls	r3, r3, #17
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d301      	bcc.n	8000c78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c74:	2301      	movs	r3, #1
 8000c76:	e010      	b.n	8000c9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <SysTick_Config+0x44>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
 8000c84:	2103      	movs	r1, #3
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff7c 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x44>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x44>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	1c02      	adds	r2, r0, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ffbf 	bl	8000c60 <SysTick_Config>
 8000ce2:	0003      	movs	r3, r0
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f000 fb76 	bl	80013ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2201      	movs	r2, #1
 8000d06:	4013      	ands	r3, r2
 8000d08:	d100      	bne.n	8000d0c <HAL_RCC_OscConfig+0x20>
 8000d0a:	e08e      	b.n	8000e2a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d0c:	4bc5      	ldr	r3, [pc, #788]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	220c      	movs	r2, #12
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d00e      	beq.n	8000d36 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d18:	4bc2      	ldr	r3, [pc, #776]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	220c      	movs	r2, #12
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d117      	bne.n	8000d54 <HAL_RCC_OscConfig+0x68>
 8000d24:	4bbf      	ldr	r3, [pc, #764]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	23c0      	movs	r3, #192	; 0xc0
 8000d2a:	025b      	lsls	r3, r3, #9
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	025b      	lsls	r3, r3, #9
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d10e      	bne.n	8000d54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d36:	4bbb      	ldr	r3, [pc, #748]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	029b      	lsls	r3, r3, #10
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d100      	bne.n	8000d44 <HAL_RCC_OscConfig+0x58>
 8000d42:	e071      	b.n	8000e28 <HAL_RCC_OscConfig+0x13c>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d000      	beq.n	8000d4e <HAL_RCC_OscConfig+0x62>
 8000d4c:	e06c      	b.n	8000e28 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f000 fb4c 	bl	80013ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d107      	bne.n	8000d6c <HAL_RCC_OscConfig+0x80>
 8000d5c:	4bb1      	ldr	r3, [pc, #708]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4bb0      	ldr	r3, [pc, #704]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	0249      	lsls	r1, r1, #9
 8000d66:	430a      	orrs	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e02f      	b.n	8000dcc <HAL_RCC_OscConfig+0xe0>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10c      	bne.n	8000d8e <HAL_RCC_OscConfig+0xa2>
 8000d74:	4bab      	ldr	r3, [pc, #684]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4baa      	ldr	r3, [pc, #680]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d7a:	49ab      	ldr	r1, [pc, #684]	; (8001028 <HAL_RCC_OscConfig+0x33c>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	4ba8      	ldr	r3, [pc, #672]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4ba7      	ldr	r3, [pc, #668]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d86:	49a9      	ldr	r1, [pc, #676]	; (800102c <HAL_RCC_OscConfig+0x340>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e01e      	b.n	8000dcc <HAL_RCC_OscConfig+0xe0>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d10e      	bne.n	8000db4 <HAL_RCC_OscConfig+0xc8>
 8000d96:	4ba3      	ldr	r3, [pc, #652]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4ba2      	ldr	r3, [pc, #648]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	02c9      	lsls	r1, r1, #11
 8000da0:	430a      	orrs	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	4b9f      	ldr	r3, [pc, #636]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b9e      	ldr	r3, [pc, #632]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	0249      	lsls	r1, r1, #9
 8000dae:	430a      	orrs	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e00b      	b.n	8000dcc <HAL_RCC_OscConfig+0xe0>
 8000db4:	4b9b      	ldr	r3, [pc, #620]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b9a      	ldr	r3, [pc, #616]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000dba:	499b      	ldr	r1, [pc, #620]	; (8001028 <HAL_RCC_OscConfig+0x33c>)
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	4b98      	ldr	r3, [pc, #608]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b97      	ldr	r3, [pc, #604]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000dc6:	4999      	ldr	r1, [pc, #612]	; (800102c <HAL_RCC_OscConfig+0x340>)
 8000dc8:	400a      	ands	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d014      	beq.n	8000dfe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fecc 	bl	8000b70 <HAL_GetTick>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dde:	f7ff fec7 	bl	8000b70 <HAL_GetTick>
 8000de2:	0002      	movs	r2, r0
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b64      	cmp	r3, #100	; 0x64
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e2fd      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df0:	4b8c      	ldr	r3, [pc, #560]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	029b      	lsls	r3, r3, #10
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0xf2>
 8000dfc:	e015      	b.n	8000e2a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfe:	f7ff feb7 	bl	8000b70 <HAL_GetTick>
 8000e02:	0003      	movs	r3, r0
 8000e04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff feb2 	bl	8000b70 <HAL_GetTick>
 8000e0c:	0002      	movs	r2, r0
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e2e8      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	4b82      	ldr	r3, [pc, #520]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	029b      	lsls	r3, r3, #10
 8000e22:	4013      	ands	r3, r2
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x11c>
 8000e26:	e000      	b.n	8000e2a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4013      	ands	r3, r2
 8000e32:	d100      	bne.n	8000e36 <HAL_RCC_OscConfig+0x14a>
 8000e34:	e06c      	b.n	8000f10 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e36:	4b7b      	ldr	r3, [pc, #492]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d00e      	beq.n	8000e5e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e40:	4b78      	ldr	r3, [pc, #480]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	220c      	movs	r2, #12
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d11f      	bne.n	8000e8c <HAL_RCC_OscConfig+0x1a0>
 8000e4c:	4b75      	ldr	r3, [pc, #468]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	23c0      	movs	r3, #192	; 0xc0
 8000e52:	025b      	lsls	r3, r3, #9
 8000e54:	401a      	ands	r2, r3
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d116      	bne.n	8000e8c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	4b71      	ldr	r3, [pc, #452]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2202      	movs	r2, #2
 8000e64:	4013      	ands	r3, r2
 8000e66:	d005      	beq.n	8000e74 <HAL_RCC_OscConfig+0x188>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d001      	beq.n	8000e74 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e2bb      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e74:	4b6b      	ldr	r3, [pc, #428]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	22f8      	movs	r2, #248	; 0xf8
 8000e7a:	4393      	bics	r3, r2
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	00da      	lsls	r2, r3, #3
 8000e84:	4b67      	ldr	r3, [pc, #412]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8a:	e041      	b.n	8000f10 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d024      	beq.n	8000ede <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e94:	4b63      	ldr	r3, [pc, #396]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b62      	ldr	r3, [pc, #392]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fe66 	bl	8000b70 <HAL_GetTick>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fe61 	bl	8000b70 <HAL_GetTick>
 8000eae:	0002      	movs	r2, r0
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e297      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ebc:	4b59      	ldr	r3, [pc, #356]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d0f1      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec6:	4b57      	ldr	r3, [pc, #348]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	22f8      	movs	r2, #248	; 0xf8
 8000ecc:	4393      	bics	r3, r2
 8000ece:	0019      	movs	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	00da      	lsls	r2, r3, #3
 8000ed6:	4b53      	ldr	r3, [pc, #332]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e018      	b.n	8000f10 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ede:	4b51      	ldr	r3, [pc, #324]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b50      	ldr	r3, [pc, #320]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	438a      	bics	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fe41 	bl	8000b70 <HAL_GetTick>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fe3c 	bl	8000b70 <HAL_GetTick>
 8000ef8:	0002      	movs	r2, r0
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e272      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d1f1      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2208      	movs	r2, #8
 8000f16:	4013      	ands	r3, r2
 8000f18:	d036      	beq.n	8000f88 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d019      	beq.n	8000f56 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f22:	4b40      	ldr	r3, [pc, #256]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f26:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fe1f 	bl	8000b70 <HAL_GetTick>
 8000f32:	0003      	movs	r3, r0
 8000f34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fe1a 	bl	8000b70 <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e250      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4a:	4b36      	ldr	r3, [pc, #216]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4013      	ands	r3, r2
 8000f52:	d0f1      	beq.n	8000f38 <HAL_RCC_OscConfig+0x24c>
 8000f54:	e018      	b.n	8000f88 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f56:	4b33      	ldr	r3, [pc, #204]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f5a:	4b32      	ldr	r3, [pc, #200]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	438a      	bics	r2, r1
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fe05 	bl	8000b70 <HAL_GetTick>
 8000f66:	0003      	movs	r3, r0
 8000f68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fe00 	bl	8000b70 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e236      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7e:	4b29      	ldr	r3, [pc, #164]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	2202      	movs	r2, #2
 8000f84:	4013      	ands	r3, r2
 8000f86:	d1f1      	bne.n	8000f6c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d100      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2a8>
 8000f92:	e0b5      	b.n	8001100 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f94:	201f      	movs	r0, #31
 8000f96:	183b      	adds	r3, r7, r0
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000f9e:	69da      	ldr	r2, [r3, #28]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	055b      	lsls	r3, r3, #21
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d110      	bne.n	8000fca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000faa:	69da      	ldr	r2, [r3, #28]
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0549      	lsls	r1, r1, #21
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	61da      	str	r2, [r3, #28]
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8000fb8:	69da      	ldr	r2, [r3, #28]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	055b      	lsls	r3, r3, #21
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fc4:	183b      	adds	r3, r7, r0
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_RCC_OscConfig+0x344>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d11a      	bne.n	800100c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_RCC_OscConfig+0x344>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_RCC_OscConfig+0x344>)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	0049      	lsls	r1, r1, #1
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fdc4 	bl	8000b70 <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fee:	f7ff fdbf 	bl	8000b70 <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e1f5      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_RCC_OscConfig+0x344>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4013      	ands	r3, r2
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10f      	bne.n	8001034 <HAL_RCC_OscConfig+0x348>
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 8001016:	6a1a      	ldr	r2, [r3, #32]
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_RCC_OscConfig+0x338>)
 800101a:	2101      	movs	r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	621a      	str	r2, [r3, #32]
 8001020:	e036      	b.n	8001090 <HAL_RCC_OscConfig+0x3a4>
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40021000 	.word	0x40021000
 8001028:	fffeffff 	.word	0xfffeffff
 800102c:	fffbffff 	.word	0xfffbffff
 8001030:	40007000 	.word	0x40007000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10c      	bne.n	8001056 <HAL_RCC_OscConfig+0x36a>
 800103c:	4bca      	ldr	r3, [pc, #808]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800103e:	6a1a      	ldr	r2, [r3, #32]
 8001040:	4bc9      	ldr	r3, [pc, #804]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001042:	2101      	movs	r1, #1
 8001044:	438a      	bics	r2, r1
 8001046:	621a      	str	r2, [r3, #32]
 8001048:	4bc7      	ldr	r3, [pc, #796]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800104a:	6a1a      	ldr	r2, [r3, #32]
 800104c:	4bc6      	ldr	r3, [pc, #792]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800104e:	2104      	movs	r1, #4
 8001050:	438a      	bics	r2, r1
 8001052:	621a      	str	r2, [r3, #32]
 8001054:	e01c      	b.n	8001090 <HAL_RCC_OscConfig+0x3a4>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x38c>
 800105e:	4bc2      	ldr	r3, [pc, #776]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001060:	6a1a      	ldr	r2, [r3, #32]
 8001062:	4bc1      	ldr	r3, [pc, #772]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001064:	2104      	movs	r1, #4
 8001066:	430a      	orrs	r2, r1
 8001068:	621a      	str	r2, [r3, #32]
 800106a:	4bbf      	ldr	r3, [pc, #764]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800106c:	6a1a      	ldr	r2, [r3, #32]
 800106e:	4bbe      	ldr	r3, [pc, #760]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	621a      	str	r2, [r3, #32]
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0x3a4>
 8001078:	4bbb      	ldr	r3, [pc, #748]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	4bba      	ldr	r3, [pc, #744]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800107e:	2101      	movs	r1, #1
 8001080:	438a      	bics	r2, r1
 8001082:	621a      	str	r2, [r3, #32]
 8001084:	4bb8      	ldr	r3, [pc, #736]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	4bb7      	ldr	r3, [pc, #732]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800108a:	2104      	movs	r1, #4
 800108c:	438a      	bics	r2, r1
 800108e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d014      	beq.n	80010c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001098:	f7ff fd6a 	bl	8000b70 <HAL_GetTick>
 800109c:	0003      	movs	r3, r0
 800109e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a0:	e009      	b.n	80010b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fd65 	bl	8000b70 <HAL_GetTick>
 80010a6:	0002      	movs	r2, r0
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	4aaf      	ldr	r2, [pc, #700]	; (800136c <HAL_RCC_OscConfig+0x680>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e19a      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b6:	4bac      	ldr	r3, [pc, #688]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x3b6>
 80010c0:	e013      	b.n	80010ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c2:	f7ff fd55 	bl	8000b70 <HAL_GetTick>
 80010c6:	0003      	movs	r3, r0
 80010c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ca:	e009      	b.n	80010e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010cc:	f7ff fd50 	bl	8000b70 <HAL_GetTick>
 80010d0:	0002      	movs	r2, r0
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4aa5      	ldr	r2, [pc, #660]	; (800136c <HAL_RCC_OscConfig+0x680>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e185      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e0:	4ba1      	ldr	r3, [pc, #644]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	2202      	movs	r2, #2
 80010e6:	4013      	ands	r3, r2
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010ea:	231f      	movs	r3, #31
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d105      	bne.n	8001100 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f4:	4b9c      	ldr	r3, [pc, #624]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80010f6:	69da      	ldr	r2, [r3, #28]
 80010f8:	4b9b      	ldr	r3, [pc, #620]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80010fa:	499d      	ldr	r1, [pc, #628]	; (8001370 <HAL_RCC_OscConfig+0x684>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2210      	movs	r2, #16
 8001106:	4013      	ands	r3, r2
 8001108:	d063      	beq.n	80011d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d12a      	bne.n	8001168 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001112:	4b95      	ldr	r3, [pc, #596]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001116:	4b94      	ldr	r3, [pc, #592]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001118:	2104      	movs	r1, #4
 800111a:	430a      	orrs	r2, r1
 800111c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800111e:	4b92      	ldr	r3, [pc, #584]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001122:	4b91      	ldr	r3, [pc, #580]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001124:	2101      	movs	r1, #1
 8001126:	430a      	orrs	r2, r1
 8001128:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112a:	f7ff fd21 	bl	8000b70 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001134:	f7ff fd1c 	bl	8000b70 <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e152      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	d0f1      	beq.n	8001134 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001150:	4b85      	ldr	r3, [pc, #532]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	22f8      	movs	r2, #248	; 0xf8
 8001156:	4393      	bics	r3, r2
 8001158:	0019      	movs	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	00da      	lsls	r2, r3, #3
 8001160:	4b81      	ldr	r3, [pc, #516]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001162:	430a      	orrs	r2, r1
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
 8001166:	e034      	b.n	80011d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	3305      	adds	r3, #5
 800116e:	d111      	bne.n	8001194 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001170:	4b7d      	ldr	r3, [pc, #500]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001174:	4b7c      	ldr	r3, [pc, #496]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001176:	2104      	movs	r1, #4
 8001178:	438a      	bics	r2, r1
 800117a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800117c:	4b7a      	ldr	r3, [pc, #488]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	22f8      	movs	r2, #248	; 0xf8
 8001182:	4393      	bics	r3, r2
 8001184:	0019      	movs	r1, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	00da      	lsls	r2, r3, #3
 800118c:	4b76      	ldr	r3, [pc, #472]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	e01e      	b.n	80011d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001194:	4b74      	ldr	r3, [pc, #464]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001198:	4b73      	ldr	r3, [pc, #460]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800119a:	2104      	movs	r1, #4
 800119c:	430a      	orrs	r2, r1
 800119e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011a0:	4b71      	ldr	r3, [pc, #452]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80011a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a4:	4b70      	ldr	r3, [pc, #448]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	438a      	bics	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff fce0 	bl	8000b70 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011b6:	f7ff fcdb 	bl	8000b70 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e111      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011c8:	4b67      	ldr	r3, [pc, #412]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80011ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011cc:	2202      	movs	r2, #2
 80011ce:	4013      	ands	r3, r2
 80011d0:	d1f1      	bne.n	80011b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2220      	movs	r2, #32
 80011d8:	4013      	ands	r3, r2
 80011da:	d05c      	beq.n	8001296 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011dc:	4b62      	ldr	r3, [pc, #392]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	220c      	movs	r2, #12
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d00e      	beq.n	8001206 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011e8:	4b5f      	ldr	r3, [pc, #380]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	220c      	movs	r2, #12
 80011ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d114      	bne.n	800121e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011f4:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	23c0      	movs	r3, #192	; 0xc0
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	401a      	ands	r2, r3
 80011fe:	23c0      	movs	r3, #192	; 0xc0
 8001200:	025b      	lsls	r3, r3, #9
 8001202:	429a      	cmp	r2, r3
 8001204:	d10b      	bne.n	800121e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001206:	4b58      	ldr	r3, [pc, #352]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	025b      	lsls	r3, r3, #9
 800120e:	4013      	ands	r3, r2
 8001210:	d040      	beq.n	8001294 <HAL_RCC_OscConfig+0x5a8>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d03c      	beq.n	8001294 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0e6      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d01b      	beq.n	800125e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001226:	4b50      	ldr	r3, [pc, #320]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122a:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	0249      	lsls	r1, r1, #9
 8001230:	430a      	orrs	r2, r1
 8001232:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fc9c 	bl	8000b70 <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800123e:	f7ff fc97 	bl	8000b70 <HAL_GetTick>
 8001242:	0002      	movs	r2, r0
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e0cd      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	4013      	ands	r3, r2
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x552>
 800125c:	e01b      	b.n	8001296 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800125e:	4b42      	ldr	r3, [pc, #264]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001264:	4943      	ldr	r1, [pc, #268]	; (8001374 <HAL_RCC_OscConfig+0x688>)
 8001266:	400a      	ands	r2, r1
 8001268:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fc81 	bl	8000b70 <HAL_GetTick>
 800126e:	0003      	movs	r3, r0
 8001270:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001274:	f7ff fc7c 	bl	8000b70 <HAL_GetTick>
 8001278:	0002      	movs	r2, r0
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e0b2      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	4013      	ands	r3, r2
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x588>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001294:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5b4>
 800129e:	e0a4      	b.n	80013ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	220c      	movs	r2, #12
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d100      	bne.n	80012ae <HAL_RCC_OscConfig+0x5c2>
 80012ac:	e078      	b.n	80013a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d14c      	bne.n	8001350 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80012bc:	492e      	ldr	r1, [pc, #184]	; (8001378 <HAL_RCC_OscConfig+0x68c>)
 80012be:	400a      	ands	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fc55 	bl	8000b70 <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fc50 	bl	8000b70 <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e086      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	049b      	lsls	r3, r3, #18
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	220f      	movs	r2, #15
 80012f0:	4393      	bics	r3, r2
 80012f2:	0019      	movs	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_RCC_OscConfig+0x690>)
 8001304:	4013      	ands	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	431a      	orrs	r2, r3
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001314:	430a      	orrs	r2, r1
 8001316:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	0449      	lsls	r1, r1, #17
 8001322:	430a      	orrs	r2, r1
 8001324:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fc23 	bl	8000b70 <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff fc1e 	bl	8000b70 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e054      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	049b      	lsls	r3, r3, #18
 800134a:	4013      	ands	r3, r2
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x644>
 800134e:	e04c      	b.n	80013ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_RCC_OscConfig+0x67c>)
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <HAL_RCC_OscConfig+0x68c>)
 8001358:	400a      	ands	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fc08 	bl	8000b70 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001364:	e015      	b.n	8001392 <HAL_RCC_OscConfig+0x6a6>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40021000 	.word	0x40021000
 800136c:	00001388 	.word	0x00001388
 8001370:	efffffff 	.word	0xefffffff
 8001374:	fffeffff 	.word	0xfffeffff
 8001378:	feffffff 	.word	0xfeffffff
 800137c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff fbf6 	bl	8000b70 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e02c      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_RCC_OscConfig+0x708>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	049b      	lsls	r3, r3, #18
 800139a:	4013      	ands	r3, r2
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x694>
 800139e:	e024      	b.n	80013ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e01f      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_RCC_OscConfig+0x708>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_RCC_OscConfig+0x708>)
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	23c0      	movs	r3, #192	; 0xc0
 80013bc:	025b      	lsls	r3, r3, #9
 80013be:	401a      	ands	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10e      	bne.n	80013e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	220f      	movs	r2, #15
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	23f0      	movs	r3, #240	; 0xf0
 80013da:	039b      	lsls	r3, r3, #14
 80013dc:	401a      	ands	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b008      	add	sp, #32
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0bf      	b.n	800158c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_RCC_ClockConfig+0x19c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d911      	bls.n	800143e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_RCC_ClockConfig+0x19c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2201      	movs	r2, #1
 8001420:	4393      	bics	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <HAL_RCC_ClockConfig+0x19c>)
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_RCC_ClockConfig+0x19c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	4013      	ands	r3, r2
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d001      	beq.n	800143e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e0a6      	b.n	800158c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	d015      	beq.n	8001474 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2204      	movs	r2, #4
 800144e:	4013      	ands	r3, r2
 8001450:	d006      	beq.n	8001460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4b50      	ldr	r3, [pc, #320]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001458:	21e0      	movs	r1, #224	; 0xe0
 800145a:	00c9      	lsls	r1, r1, #3
 800145c:	430a      	orrs	r2, r1
 800145e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	22f0      	movs	r2, #240	; 0xf0
 8001466:	4393      	bics	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	4013      	ands	r3, r2
 800147c:	d04c      	beq.n	8001518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	029b      	lsls	r3, r3, #10
 800148e:	4013      	ands	r3, r2
 8001490:	d120      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07a      	b.n	800158c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	049b      	lsls	r3, r3, #18
 80014a6:	4013      	ands	r3, r2
 80014a8:	d114      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06e      	b.n	800158c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 80014b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	4013      	ands	r3, r2
 80014c0:	d108      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e062      	b.n	800158c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e05b      	b.n	800158c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2203      	movs	r2, #3
 80014da:	4393      	bics	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff fb42 	bl	8000b70 <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f0:	e009      	b.n	8001506 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f2:	f7ff fb3d 	bl	8000b70 <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	4a27      	ldr	r2, [pc, #156]	; (800159c <HAL_RCC_ClockConfig+0x1a4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e042      	b.n	800158c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	220c      	movs	r2, #12
 800150c:	401a      	ands	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1ec      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_RCC_ClockConfig+0x19c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	4013      	ands	r3, r2
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d211      	bcs.n	800154a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_RCC_ClockConfig+0x19c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4393      	bics	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_RCC_ClockConfig+0x19c>)
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_RCC_ClockConfig+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	4013      	ands	r3, r2
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e020      	b.n	800158c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2204      	movs	r2, #4
 8001550:	4013      	ands	r3, r2
 8001552:	d009      	beq.n	8001568 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_RCC_ClockConfig+0x1a8>)
 800155a:	4013      	ands	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001568:	f000 f820 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 800156c:	0001      	movs	r1, r0
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_RCC_ClockConfig+0x1a0>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	220f      	movs	r2, #15
 8001576:	4013      	ands	r3, r2
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_RCC_ClockConfig+0x1ac>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	000a      	movs	r2, r1
 800157e:	40da      	lsrs	r2, r3
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001582:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001584:	2003      	movs	r0, #3
 8001586:	f7ff faad 	bl	8000ae4 <HAL_InitTick>
  
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b004      	add	sp, #16
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40022000 	.word	0x40022000
 8001598:	40021000 	.word	0x40021000
 800159c:	00001388 	.word	0x00001388
 80015a0:	fffff8ff 	.word	0xfffff8ff
 80015a4:	0800175c 	.word	0x0800175c
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b08f      	sub	sp, #60	; 0x3c
 80015b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80015b2:	2314      	movs	r3, #20
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	4a38      	ldr	r2, [pc, #224]	; (8001698 <HAL_RCC_GetSysClockFreq+0xec>)
 80015b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015ba:	c313      	stmia	r3!, {r0, r1, r4}
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4a36      	ldr	r2, [pc, #216]	; (800169c <HAL_RCC_GetSysClockFreq+0xf0>)
 80015c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015c6:	c313      	stmia	r3!, {r0, r1, r4}
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	220c      	movs	r2, #12
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	d047      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0xd4>
 80015f0:	d849      	bhi.n	8001686 <HAL_RCC_GetSysClockFreq+0xda>
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d002      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x50>
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0x56>
 80015fa:	e044      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001600:	e044      	b.n	800168c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	0c9b      	lsrs	r3, r3, #18
 8001606:	220f      	movs	r2, #15
 8001608:	4013      	ands	r3, r2
 800160a:	2214      	movs	r2, #20
 800160c:	18ba      	adds	r2, r7, r2
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	220f      	movs	r2, #15
 8001618:	4013      	ands	r3, r2
 800161a:	1d3a      	adds	r2, r7, #4
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001622:	23c0      	movs	r3, #192	; 0xc0
 8001624:	025b      	lsls	r3, r3, #9
 8001626:	401a      	ands	r2, r3
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	025b      	lsls	r3, r3, #9
 800162c:	429a      	cmp	r2, r3
 800162e:	d109      	bne.n	8001644 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001632:	481c      	ldr	r0, [pc, #112]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001634:	f7fe fd66 	bl	8000104 <__udivsi3>
 8001638:	0003      	movs	r3, r0
 800163a:	001a      	movs	r2, r3
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	4353      	muls	r3, r2
 8001640:	637b      	str	r3, [r7, #52]	; 0x34
 8001642:	e01a      	b.n	800167a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001646:	23c0      	movs	r3, #192	; 0xc0
 8001648:	025b      	lsls	r3, r3, #9
 800164a:	401a      	ands	r2, r3
 800164c:	23c0      	movs	r3, #192	; 0xc0
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	429a      	cmp	r2, r3
 8001652:	d109      	bne.n	8001668 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001656:	4814      	ldr	r0, [pc, #80]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001658:	f7fe fd54 	bl	8000104 <__udivsi3>
 800165c:	0003      	movs	r3, r0
 800165e:	001a      	movs	r2, r3
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	4353      	muls	r3, r2
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
 8001666:	e008      	b.n	800167a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800166a:	480e      	ldr	r0, [pc, #56]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800166c:	f7fe fd4a 	bl	8000104 <__udivsi3>
 8001670:	0003      	movs	r3, r0
 8001672:	001a      	movs	r2, r3
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	4353      	muls	r3, r2
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800167a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800167e:	e005      	b.n	800168c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001684:	e002      	b.n	800168c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800168a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b00f      	add	sp, #60	; 0x3c
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	0800173c 	.word	0x0800173c
 800169c:	0800174c 	.word	0x0800174c
 80016a0:	40021000 	.word	0x40021000
 80016a4:	007a1200 	.word	0x007a1200
 80016a8:	02dc6c00 	.word	0x02dc6c00

080016ac <__libc_init_array>:
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	2600      	movs	r6, #0
 80016b0:	4d0c      	ldr	r5, [pc, #48]	; (80016e4 <__libc_init_array+0x38>)
 80016b2:	4c0d      	ldr	r4, [pc, #52]	; (80016e8 <__libc_init_array+0x3c>)
 80016b4:	1b64      	subs	r4, r4, r5
 80016b6:	10a4      	asrs	r4, r4, #2
 80016b8:	42a6      	cmp	r6, r4
 80016ba:	d109      	bne.n	80016d0 <__libc_init_array+0x24>
 80016bc:	2600      	movs	r6, #0
 80016be:	f000 f821 	bl	8001704 <_init>
 80016c2:	4d0a      	ldr	r5, [pc, #40]	; (80016ec <__libc_init_array+0x40>)
 80016c4:	4c0a      	ldr	r4, [pc, #40]	; (80016f0 <__libc_init_array+0x44>)
 80016c6:	1b64      	subs	r4, r4, r5
 80016c8:	10a4      	asrs	r4, r4, #2
 80016ca:	42a6      	cmp	r6, r4
 80016cc:	d105      	bne.n	80016da <__libc_init_array+0x2e>
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	00b3      	lsls	r3, r6, #2
 80016d2:	58eb      	ldr	r3, [r5, r3]
 80016d4:	4798      	blx	r3
 80016d6:	3601      	adds	r6, #1
 80016d8:	e7ee      	b.n	80016b8 <__libc_init_array+0xc>
 80016da:	00b3      	lsls	r3, r6, #2
 80016dc:	58eb      	ldr	r3, [r5, r3]
 80016de:	4798      	blx	r3
 80016e0:	3601      	adds	r6, #1
 80016e2:	e7f2      	b.n	80016ca <__libc_init_array+0x1e>
 80016e4:	0800176c 	.word	0x0800176c
 80016e8:	0800176c 	.word	0x0800176c
 80016ec:	0800176c 	.word	0x0800176c
 80016f0:	08001770 	.word	0x08001770

080016f4 <memset>:
 80016f4:	0003      	movs	r3, r0
 80016f6:	1882      	adds	r2, r0, r2
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d100      	bne.n	80016fe <memset+0xa>
 80016fc:	4770      	bx	lr
 80016fe:	7019      	strb	r1, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	e7f9      	b.n	80016f8 <memset+0x4>

08001704 <_init>:
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170a:	bc08      	pop	{r3}
 800170c:	469e      	mov	lr, r3
 800170e:	4770      	bx	lr

08001710 <_fini>:
 8001710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001716:	bc08      	pop	{r3}
 8001718:	469e      	mov	lr, r3
 800171a:	4770      	bx	lr
