
metaporter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002060  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a8  080021a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080021a8  080021a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a8  080021a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080021b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000074  08002224  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002224  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c1d  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f91  00000000  00000000  00022cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00023c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000350  00000000  00000000  00024048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a20c  00000000  00000000  00024398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000548b  00000000  00000000  0003e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6dd  00000000  00000000  00043a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df10c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fb4  00000000  00000000  000df15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002104 	.word	0x08002104

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08002104 	.word	0x08002104

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <i2c1_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void i2c1_init()
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000234:	4b36      	ldr	r3, [pc, #216]	; (8000310 <i2c1_init+0xe0>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	4b35      	ldr	r3, [pc, #212]	; (8000310 <i2c1_init+0xe0>)
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	02c9      	lsls	r1, r1, #11
 800023e:	430a      	orrs	r2, r1
 8000240:	615a      	str	r2, [r3, #20]
	GPIOB->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 8000242:	4b34      	ldr	r3, [pc, #208]	; (8000314 <i2c1_init+0xe4>)
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b33      	ldr	r3, [pc, #204]	; (8000314 <i2c1_init+0xe4>)
 8000248:	4933      	ldr	r1, [pc, #204]	; (8000318 <i2c1_init+0xe8>)
 800024a:	400a      	ands	r2, r1
 800024c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1;
 800024e:	4b31      	ldr	r3, [pc, #196]	; (8000314 <i2c1_init+0xe4>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	4b30      	ldr	r3, [pc, #192]	; (8000314 <i2c1_init+0xe4>)
 8000254:	21a0      	movs	r1, #160	; 0xa0
 8000256:	0209      	lsls	r1, r1, #8
 8000258:	430a      	orrs	r2, r1
 800025a:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[0] |= (1 << 4*6) | (1 << 4 * 7);
 800025c:	4b2d      	ldr	r3, [pc, #180]	; (8000314 <i2c1_init+0xe4>)
 800025e:	6a1a      	ldr	r2, [r3, #32]
 8000260:	4b2c      	ldr	r3, [pc, #176]	; (8000314 <i2c1_init+0xe4>)
 8000262:	2188      	movs	r1, #136	; 0x88
 8000264:	0549      	lsls	r1, r1, #21
 8000266:	430a      	orrs	r2, r1
 8000268:	621a      	str	r2, [r3, #32]

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800026a:	4b29      	ldr	r3, [pc, #164]	; (8000310 <i2c1_init+0xe0>)
 800026c:	69da      	ldr	r2, [r3, #28]
 800026e:	4b28      	ldr	r3, [pc, #160]	; (8000310 <i2c1_init+0xe0>)
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	0389      	lsls	r1, r1, #14
 8000274:	430a      	orrs	r2, r1
 8000276:	61da      	str	r2, [r3, #28]

    I2C1->CR1 &= ~(I2C_CR1_PE | I2C_CR1_ANFOFF | I2C_CR1_ERRIE | I2C_CR1_NOSTRETCH);
 8000278:	4b28      	ldr	r3, [pc, #160]	; (800031c <i2c1_init+0xec>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <i2c1_init+0xec>)
 800027e:	4928      	ldr	r1, [pc, #160]	; (8000320 <i2c1_init+0xf0>)
 8000280:	400a      	ands	r2, r1
 8000282:	601a      	str	r2, [r3, #0]

    I2C1->TIMINGR = 0;
 8000284:	4b25      	ldr	r3, [pc, #148]	; (800031c <i2c1_init+0xec>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR &= ~I2C_TIMINGR_PRESC;
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <i2c1_init+0xec>)
 800028c:	691a      	ldr	r2, [r3, #16]
 800028e:	4b23      	ldr	r3, [pc, #140]	; (800031c <i2c1_init+0xec>)
 8000290:	0112      	lsls	r2, r2, #4
 8000292:	0912      	lsrs	r2, r2, #4
 8000294:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR |= 3 << 20;
 8000296:	4b21      	ldr	r3, [pc, #132]	; (800031c <i2c1_init+0xec>)
 8000298:	691a      	ldr	r2, [r3, #16]
 800029a:	4b20      	ldr	r3, [pc, #128]	; (800031c <i2c1_init+0xec>)
 800029c:	21c0      	movs	r1, #192	; 0xc0
 800029e:	0389      	lsls	r1, r1, #14
 80002a0:	430a      	orrs	r2, r1
 80002a2:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR |= 1 << 16;
 80002a4:	4b1d      	ldr	r3, [pc, #116]	; (800031c <i2c1_init+0xec>)
 80002a6:	691a      	ldr	r2, [r3, #16]
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <i2c1_init+0xec>)
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	0249      	lsls	r1, r1, #9
 80002ae:	430a      	orrs	r2, r1
 80002b0:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR |= 3 << 8;
 80002b2:	4b1a      	ldr	r3, [pc, #104]	; (800031c <i2c1_init+0xec>)
 80002b4:	691a      	ldr	r2, [r3, #16]
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <i2c1_init+0xec>)
 80002b8:	21c0      	movs	r1, #192	; 0xc0
 80002ba:	0089      	lsls	r1, r1, #2
 80002bc:	430a      	orrs	r2, r1
 80002be:	611a      	str	r2, [r3, #16]
    I2C1->TIMINGR |= 9 << 0;
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <i2c1_init+0xec>)
 80002c2:	691a      	ldr	r2, [r3, #16]
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <i2c1_init+0xec>)
 80002c6:	2109      	movs	r1, #9
 80002c8:	430a      	orrs	r2, r1
 80002ca:	611a      	str	r2, [r3, #16]

    I2C1->OAR1 &= ~I2C_OAR1_OA1EN;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <i2c1_init+0xec>)
 80002ce:	689a      	ldr	r2, [r3, #8]
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <i2c1_init+0xec>)
 80002d2:	4914      	ldr	r1, [pc, #80]	; (8000324 <i2c1_init+0xf4>)
 80002d4:	400a      	ands	r2, r1
 80002d6:	609a      	str	r2, [r3, #8]
    I2C1->OAR2 &= ~I2C_OAR2_OA2EN;
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <i2c1_init+0xec>)
 80002da:	68da      	ldr	r2, [r3, #12]
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <i2c1_init+0xec>)
 80002de:	4911      	ldr	r1, [pc, #68]	; (8000324 <i2c1_init+0xf4>)
 80002e0:	400a      	ands	r2, r1
 80002e2:	60da      	str	r2, [r3, #12]

    I2C1->CR2 &= ~I2C_CR2_ADD10;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <i2c1_init+0xec>)
 80002e6:	685a      	ldr	r2, [r3, #4]
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <i2c1_init+0xec>)
 80002ea:	490f      	ldr	r1, [pc, #60]	; (8000328 <i2c1_init+0xf8>)
 80002ec:	400a      	ands	r2, r1
 80002ee:	605a      	str	r2, [r3, #4]
    I2C1->CR2 |= I2C_CR2_AUTOEND;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <i2c1_init+0xec>)
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <i2c1_init+0xec>)
 80002f6:	2180      	movs	r1, #128	; 0x80
 80002f8:	0489      	lsls	r1, r1, #18
 80002fa:	430a      	orrs	r2, r1
 80002fc:	605a      	str	r2, [r3, #4]

    I2C1->CR1 |= I2C_CR1_PE;
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <i2c1_init+0xec>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <i2c1_init+0xec>)
 8000304:	2101      	movs	r1, #1
 8000306:	430a      	orrs	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40021000 	.word	0x40021000
 8000314:	48000400 	.word	0x48000400
 8000318:	ffff0fff 	.word	0xffff0fff
 800031c:	40005400 	.word	0x40005400
 8000320:	fffdef7e 	.word	0xfffdef7e
 8000324:	ffff7fff 	.word	0xffff7fff
 8000328:	fffff7ff 	.word	0xfffff7ff

0800032c <i2c1_start>:

void i2c1_start(uint32_t devaddr, uint8_t size, uint8_t dir)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	0008      	movs	r0, r1
 8000336:	0011      	movs	r1, r2
 8000338:	1cfb      	adds	r3, r7, #3
 800033a:	1c02      	adds	r2, r0, #0
 800033c:	701a      	strb	r2, [r3, #0]
 800033e:	1cbb      	adds	r3, r7, #2
 8000340:	1c0a      	adds	r2, r1, #0
 8000342:	701a      	strb	r2, [r3, #0]
	uint32_t tempreg = I2C1->CR2;
 8000344:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <i2c1_start+0x78>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	60fb      	str	r3, [r7, #12]
	tempreg &= ~(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD |
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <i2c1_start+0x7c>)
 800034e:	4013      	ands	r3, r2
 8000350:	60fb      	str	r3, [r7, #12]
	        I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP);
	if (dir == 1)
 8000352:	1cbb      	adds	r3, r7, #2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d105      	bne.n	8000366 <i2c1_start+0x3a>
    {
		tempreg |= I2C_CR2_RD_WRN;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	2280      	movs	r2, #128	; 0x80
 800035e:	00d2      	lsls	r2, r2, #3
 8000360:	4313      	orrs	r3, r2
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e003      	b.n	800036e <i2c1_start+0x42>
	}
    else
    {
        tempreg &= ~I2C_CR2_RD_WRN;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	4a10      	ldr	r2, [pc, #64]	; (80003ac <i2c1_start+0x80>)
 800036a:	4013      	ands	r3, r2
 800036c:	60fb      	str	r3, [r7, #12]
    }
    tempreg |= ((devaddr << 1) & I2C_CR2_SADD) | ((size << 16) & I2C_CR2_NBYTES);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	059b      	lsls	r3, r3, #22
 8000374:	0d9a      	lsrs	r2, r3, #22
 8000376:	1cfb      	adds	r3, r7, #3
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	041b      	lsls	r3, r3, #16
 800037c:	0019      	movs	r1, r3
 800037e:	23ff      	movs	r3, #255	; 0xff
 8000380:	041b      	lsls	r3, r3, #16
 8000382:	400b      	ands	r3, r1
 8000384:	4313      	orrs	r3, r2
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	4313      	orrs	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
    tempreg |= I2C_CR2_START;
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	0192      	lsls	r2, r2, #6
 8000392:	4313      	orrs	r3, r2
 8000394:	60fb      	str	r3, [r7, #12]
    I2C1->CR2 = tempreg;
 8000396:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <i2c1_start+0x78>)
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	605a      	str	r2, [r3, #4]
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b004      	add	sp, #16
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40005400 	.word	0x40005400
 80003a8:	fc009800 	.word	0xfc009800
 80003ac:	fffffbff 	.word	0xfffffbff

080003b0 <i2c1_stop>:

void i2c1_stop(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    if (I2C1->ISR & I2C_ISR_STOPF)
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <i2c1_stop+0x3c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	2220      	movs	r2, #32
 80003ba:	4013      	ands	r3, r2
 80003bc:	d113      	bne.n	80003e6 <i2c1_stop+0x36>
    {
        return;
    }
    I2C1->CR2 |= I2C_CR2_STOP; // Send stop bit as master
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <i2c1_stop+0x3c>)
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <i2c1_stop+0x3c>)
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	01c9      	lsls	r1, r1, #7
 80003c8:	430a      	orrs	r2, r1
 80003ca:	605a      	str	r2, [r3, #4]

    while( (I2C1->ISR & I2C_ISR_STOPF) == 0); // Wait while stop flag is not set
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <i2c1_stop+0x3c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	2220      	movs	r2, #32
 80003d4:	4013      	ands	r3, r2
 80003d6:	d0fa      	beq.n	80003ce <i2c1_stop+0x1e>
    I2C1->ICR |= I2C_ICR_STOPCF; // Clear stop flag
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <i2c1_stop+0x3c>)
 80003da:	69da      	ldr	r2, [r3, #28]
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <i2c1_stop+0x3c>)
 80003de:	2120      	movs	r1, #32
 80003e0:	430a      	orrs	r2, r1
 80003e2:	61da      	str	r2, [r3, #28]
 80003e4:	e000      	b.n	80003e8 <i2c1_stop+0x38>
        return;
 80003e6:	46c0      	nop			; (mov r8, r8)
}
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40005400 	.word	0x40005400

080003f0 <i2c1_wait_idle>:

void i2c1_wait_idle(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
    while ((I2C1->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY); // Wait while busy
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <i2c1_wait_idle+0x20>)
 80003f8:	699a      	ldr	r2, [r3, #24]
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	021b      	lsls	r3, r3, #8
 80003fe:	401a      	ands	r2, r3
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	021b      	lsls	r3, r3, #8
 8000404:	429a      	cmp	r2, r3
 8000406:	d0f6      	beq.n	80003f6 <i2c1_wait_idle+0x6>
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40005400 	.word	0x40005400

08000414 <i2c1_send_data>:

int8_t i2c1_send_data(uint8_t devaddr, void *pdata, uint8_t size)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6039      	str	r1, [r7, #0]
 800041c:	0011      	movs	r1, r2
 800041e:	1dfb      	adds	r3, r7, #7
 8000420:	1c02      	adds	r2, r0, #0
 8000422:	701a      	strb	r2, [r3, #0]
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	1c0a      	adds	r2, r1, #0
 8000428:	701a      	strb	r2, [r3, #0]
    int i;
    if (size <= 0 || pdata == 0)
 800042a:	1dbb      	adds	r3, r7, #6
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <i2c1_send_data+0x24>
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d102      	bne.n	800043e <i2c1_send_data+0x2a>
    {
        return -1;
 8000438:	2301      	movs	r3, #1
 800043a:	425b      	negs	r3, r3
 800043c:	e054      	b.n	80004e8 <i2c1_send_data+0xd4>
    }
    uint8_t *udata = (uint8_t*)pdata;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	60fb      	str	r3, [r7, #12]
    i2c1_wait_idle();
 8000442:	f7ff ffd5 	bl	80003f0 <i2c1_wait_idle>

    i2c1_start(devaddr, size, 0);
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	7818      	ldrb	r0, [r3, #0]
 800044a:	1dbb      	adds	r3, r7, #6
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2200      	movs	r2, #0
 8000450:	0019      	movs	r1, r3
 8000452:	f7ff ff6b 	bl	800032c <i2c1_start>

    for (i = 0; i < size; i++)
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e02a      	b.n	80004b2 <i2c1_send_data+0x9e>
    {
        int count = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
        while ((I2C1->ISR & I2C_ISR_TXIS) == 0)
 8000460:	e019      	b.n	8000496 <i2c1_send_data+0x82>
        {
            count += 1;
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	3301      	adds	r3, #1
 8000466:	613b      	str	r3, [r7, #16]
            if (count > 1000000)
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <i2c1_send_data+0xdc>)
 800046c:	4293      	cmp	r3, r2
 800046e:	dd02      	ble.n	8000476 <i2c1_send_data+0x62>
            {
                return -1;
 8000470:	2301      	movs	r3, #1
 8000472:	425b      	negs	r3, r3
 8000474:	e038      	b.n	80004e8 <i2c1_send_data+0xd4>
            }

            if ((I2C1->ISR & I2C_ISR_NACKF))
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <i2c1_send_data+0xe0>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	2210      	movs	r2, #16
 800047c:	4013      	ands	r3, r2
 800047e:	d00a      	beq.n	8000496 <i2c1_send_data+0x82>
            {
                I2C1->ICR |= I2C_ICR_NACKCF;
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <i2c1_send_data+0xe0>)
 8000482:	69da      	ldr	r2, [r3, #28]
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <i2c1_send_data+0xe0>)
 8000486:	2110      	movs	r1, #16
 8000488:	430a      	orrs	r2, r1
 800048a:	61da      	str	r2, [r3, #28]
                i2c1_stop();
 800048c:	f7ff ff90 	bl	80003b0 <i2c1_stop>
                return -1;
 8000490:	2301      	movs	r3, #1
 8000492:	425b      	negs	r3, r3
 8000494:	e028      	b.n	80004e8 <i2c1_send_data+0xd4>
        while ((I2C1->ISR & I2C_ISR_TXIS) == 0)
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <i2c1_send_data+0xe0>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	2202      	movs	r2, #2
 800049c:	4013      	ands	r3, r2
 800049e:	d0e0      	beq.n	8000462 <i2c1_send_data+0x4e>
            }
        }

        I2C1->TXDR = udata[i] & I2C_TXDR_TXDATA;
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	18d3      	adds	r3, r2, r3
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <i2c1_send_data+0xe0>)
 80004aa:	629a      	str	r2, [r3, #40]	; 0x28
    for (i = 0; i < size; i++)
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	3301      	adds	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	1dbb      	adds	r3, r7, #6
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	697a      	ldr	r2, [r7, #20]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dbcf      	blt.n	800045c <i2c1_send_data+0x48>
        //nano_wait(1000000);
    }

    while ((I2C1->ISR & I2C_ISR_TC) == 0 && (I2C1->ISR & I2C_ISR_NACKF) == 0);
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <i2c1_send_data+0xe0>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	2240      	movs	r2, #64	; 0x40
 80004c4:	4013      	ands	r3, r2
 80004c6:	d104      	bne.n	80004d2 <i2c1_send_data+0xbe>
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <i2c1_send_data+0xe0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	2210      	movs	r2, #16
 80004ce:	4013      	ands	r3, r2
 80004d0:	d0f5      	beq.n	80004be <i2c1_send_data+0xaa>

    if ((I2C1->ISR & I2C_ISR_NACKF) != 0)
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <i2c1_send_data+0xe0>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	2210      	movs	r2, #16
 80004d8:	4013      	ands	r3, r2
 80004da:	d002      	beq.n	80004e2 <i2c1_send_data+0xce>
    {
        return -1;
 80004dc:	2301      	movs	r3, #1
 80004de:	425b      	negs	r3, r3
 80004e0:	e002      	b.n	80004e8 <i2c1_send_data+0xd4>
    }

    i2c1_stop();
 80004e2:	f7ff ff65 	bl	80003b0 <i2c1_stop>
    return 0;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b006      	add	sp, #24
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	000f4240 	.word	0x000f4240
 80004f4:	40005400 	.word	0x40005400

080004f8 <i2c1_recv_data>:

int8_t i2c1_recv_data(uint8_t devaddr, void *pdata, uint8_t size)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6039      	str	r1, [r7, #0]
 8000500:	0011      	movs	r1, r2
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	1c02      	adds	r2, r0, #0
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	1c0a      	adds	r2, r1, #0
 800050c:	701a      	strb	r2, [r3, #0]
    int i;
    if (size <= 0 || pdata == 0)
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <i2c1_recv_data+0x24>
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <i2c1_recv_data+0x2a>
    {
        return -1;
 800051c:	2301      	movs	r3, #1
 800051e:	425b      	negs	r3, r3
 8000520:	e02c      	b.n	800057c <i2c1_recv_data+0x84>
    }
    uint8_t *udata = (uint8_t*) pdata;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	60bb      	str	r3, [r7, #8]
    i2c1_wait_idle();
 8000526:	f7ff ff63 	bl	80003f0 <i2c1_wait_idle>

    i2c1_start(devaddr, size, 1);
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	7818      	ldrb	r0, [r3, #0]
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2201      	movs	r2, #1
 8000534:	0019      	movs	r1, r3
 8000536:	f7ff fef9 	bl	800032c <i2c1_start>

    for (i = 0; i < size; i++)
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00f      	b.n	8000560 <i2c1_recv_data+0x68>
    {
        while ((I2C1->ISR & I2C_ISR_RXNE) == 0);
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <i2c1_recv_data+0x8c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	2204      	movs	r2, #4
 8000548:	4013      	ands	r3, r2
 800054a:	d0fa      	beq.n	8000542 <i2c1_recv_data+0x4a>
        udata[i] = I2C1->RXDR & I2C_RXDR_RXDATA;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <i2c1_recv_data+0x8c>)
 800054e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	18d3      	adds	r3, r2, r3
 8000556:	b2ca      	uxtb	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3301      	adds	r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	1dbb      	adds	r3, r7, #6
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	429a      	cmp	r2, r3
 8000568:	dbea      	blt.n	8000540 <i2c1_recv_data+0x48>
        //nano_wait(1000000);
    }

    while ((I2C1->ISR & I2C_ISR_TC) == 0);
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <i2c1_recv_data+0x8c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	2240      	movs	r2, #64	; 0x40
 8000572:	4013      	ands	r3, r2
 8000574:	d0fa      	beq.n	800056c <i2c1_recv_data+0x74>
    i2c1_stop();
 8000576:	f7ff ff1b 	bl	80003b0 <i2c1_stop>
    return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b004      	add	sp, #16
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40005400 	.word	0x40005400

08000588 <lidar_init>:

void lidar_init()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	i2c1_init();
 800058c:	f7ff fe50 	bl	8000230 <i2c1_init>
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <lidar_init_dist_measure>:

void lidar_init_dist_measure()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	uint8_t init_data[] = {LIDAR_ACQ_COMMAND_REG, LIDAR_ACQ_COMMAND_VAL};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	00d2      	lsls	r2, r2, #3
 80005a4:	801a      	strh	r2, [r3, #0]
	i2c1_send_data(lidar_addr, init_data, sizeof(init_data));
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <lidar_init_dist_measure+0x24>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	1d39      	adds	r1, r7, #4
 80005ac:	2202      	movs	r2, #2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff ff30 	bl	8000414 <i2c1_send_data>
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000

080005c0 <lidar_wait_for_data>:

void lidar_wait_for_data()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

	uint8_t reg_addr[] = {LIDAR_STATUS_REG};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <lidar_wait_for_data+0x78>)
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	701a      	strb	r2, [r3, #0]
	i2c1_send_data(lidar_addr, reg_addr, sizeof(reg_addr));
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <lidar_wait_for_data+0x7c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	1d39      	adds	r1, r7, #4
 80005d4:	2201      	movs	r2, #1
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff1c 	bl	8000414 <i2c1_send_data>

	uint16_t counter = 0;
 80005dc:	1dbb      	adds	r3, r7, #6
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint8_t busy[] = {1};
 80005e2:	003b      	movs	r3, r7
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <lidar_wait_for_data+0x78>)
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	701a      	strb	r2, [r3, #0]
	while (busy[0])
 80005ea:	e01b      	b.n	8000624 <lidar_wait_for_data+0x64>
	{
		if (counter > LIDAR_TIMEOUT_VAL)
 80005ec:	1dbb      	adds	r3, r7, #6
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	4a13      	ldr	r2, [pc, #76]	; (8000640 <lidar_wait_for_data+0x80>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d81b      	bhi.n	800062e <lidar_wait_for_data+0x6e>
		{
			break;
		}

		i2c1_recv_data(lidar_addr, busy, sizeof(busy));
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <lidar_wait_for_data+0x7c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	0039      	movs	r1, r7
 80005fc:	2201      	movs	r2, #1
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff ff7a 	bl	80004f8 <i2c1_recv_data>
		busy[0] &= 0x01;
 8000604:	003b      	movs	r3, r7
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	4013      	ands	r3, r2
 800060c:	b2da      	uxtb	r2, r3
 800060e:	003b      	movs	r3, r7
 8000610:	701a      	strb	r2, [r3, #0]
		counter++;
 8000612:	1dbb      	adds	r3, r7, #6
 8000614:	881a      	ldrh	r2, [r3, #0]
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	3201      	adds	r2, #1
 800061a:	801a      	strh	r2, [r3, #0]
		nano_wait(10000);
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <lidar_wait_for_data+0x84>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 f854 	bl	80006cc <nano_wait>
	while (busy[0])
 8000624:	003b      	movs	r3, r7
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1df      	bne.n	80005ec <lidar_wait_for_data+0x2c>
	}
}
 800062c:	e000      	b.n	8000630 <lidar_wait_for_data+0x70>
			break;
 800062e:	46c0      	nop			; (mov r8, r8)
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}
 8000638:	0800211c 	.word	0x0800211c
 800063c:	20000000 	.word	0x20000000
 8000640:	0000270f 	.word	0x0000270f
 8000644:	00002710 	.word	0x00002710

08000648 <lidar_read_dist_reg>:

void lidar_read_dist_reg(uint16_t* pdist)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	uint8_t reg_addr[] = {LIDAR_DIST_ADDR};
 8000650:	210c      	movs	r1, #12
 8000652:	187b      	adds	r3, r7, r1
 8000654:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <lidar_read_dist_reg+0x5c>)
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	701a      	strb	r2, [r3, #0]
	i2c1_send_data(lidar_addr, reg_addr, sizeof(reg_addr));
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <lidar_read_dist_reg+0x60>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	1879      	adds	r1, r7, r1
 8000660:	2201      	movs	r2, #1
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fed6 	bl	8000414 <i2c1_send_data>

	uint8_t temp[2] = {0};
 8000668:	2108      	movs	r1, #8
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	801a      	strh	r2, [r3, #0]
	i2c1_recv_data(lidar_addr, temp, sizeof(temp));
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <lidar_read_dist_reg+0x60>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	000c      	movs	r4, r1
 8000676:	1879      	adds	r1, r7, r1
 8000678:	2202      	movs	r2, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f7ff ff3c 	bl	80004f8 <i2c1_recv_data>

	*pdist = ((temp[0] << 8) | temp[1]);
 8000680:	0021      	movs	r1, r4
 8000682:	187b      	adds	r3, r7, r1
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b21a      	sxth	r2, r3
 800068a:	187b      	adds	r3, r7, r1
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	801a      	strh	r2, [r3, #0]
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b005      	add	sp, #20
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	08002120 	.word	0x08002120
 80006a8:	20000000 	.word	0x20000000

080006ac <lidar_get_distance>:

void lidar_get_distance(uint16_t* pdist)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

	// step 1: initiate the transaction and set the register from which we want to read
	lidar_init_dist_measure();
 80006b4:	f7ff ff70 	bl	8000598 <lidar_init_dist_measure>

	// step 2: wait till status reg lsb goes low
	lidar_wait_for_data();
 80006b8:	f7ff ff82 	bl	80005c0 <lidar_wait_for_data>

	// step 3: read data register
	lidar_read_dist_reg(pdist);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff ffc2 	bl	8000648 <lidar_read_dist_reg>
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}

080006cc <nano_wait>:
	uint16_t dist;
	lidar_get_distance(&dist);
}


void nano_wait(unsigned int n) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1c18      	adds	r0, r3, #0

080006d8 <repeat>:
 80006d8:	3853      	subs	r0, #83	; 0x53
 80006da:	dcfd      	bgt.n	80006d8 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b0ea      	sub	sp, #424	; 0x1a8
 80006e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 fa77 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f86d 	bl	80007cc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  uart3_init();
 80006f2:	f000 f96f 	bl	80009d4 <uart3_init>
  lidar_init();
 80006f6:	f7ff ff47 	bl	8000588 <lidar_init>
  //lidar_test_read_one();  // passes. scope verified
  //lidar_wait_for_data(); // passes. scope verified
  // lidar_test_get_one_distance(); // passes. scope verified. Reading takes a long time to be ready

#define LIDAR_BUFFER_SIZE 200
  uart3_test();
 80006fa:	f000 fa39 	bl	8000b70 <uart3_test>

  // UART buffer for lidar data
  uint8_t header[2];
  uart3_create_header(header, UART_COM_NONE, UART_DATA_SOURCE_LIDAR, UART_UINT16_T, LIDAR_BUFFER_SIZE);
 80006fe:	25cc      	movs	r5, #204	; 0xcc
 8000700:	006d      	lsls	r5, r5, #1
 8000702:	1978      	adds	r0, r7, r5
 8000704:	23c8      	movs	r3, #200	; 0xc8
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2320      	movs	r3, #32
 800070a:	2204      	movs	r2, #4
 800070c:	2100      	movs	r1, #0
 800070e:	f000 f9c3 	bl	8000a98 <uart3_create_header>

  char dist_string[8];

  // send header as string
  sprintf(dist_string, "%d", header[0]);
 8000712:	197b      	adds	r3, r7, r5
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	001a      	movs	r2, r3
 8000718:	4929      	ldr	r1, [pc, #164]	; (80007c0 <main+0xdc>)
 800071a:	24c8      	movs	r4, #200	; 0xc8
 800071c:	0064      	lsls	r4, r4, #1
 800071e:	193b      	adds	r3, r7, r4
 8000720:	0018      	movs	r0, r3
 8000722:	f001 f885 	bl	8001830 <siprintf>
  uart3_send_string(dist_string);
 8000726:	193b      	adds	r3, r7, r4
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fa0b 	bl	8000b44 <uart3_send_string>
  uart3_send_string("\n\r");
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <main+0xe0>)
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fa07 	bl	8000b44 <uart3_send_string>

  sprintf(dist_string, "%d", header[1]);
 8000736:	197b      	adds	r3, r7, r5
 8000738:	785b      	ldrb	r3, [r3, #1]
 800073a:	001a      	movs	r2, r3
 800073c:	4920      	ldr	r1, [pc, #128]	; (80007c0 <main+0xdc>)
 800073e:	193b      	adds	r3, r7, r4
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f875 	bl	8001830 <siprintf>
  uart3_send_string(dist_string);
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0018      	movs	r0, r3
 800074a:	f000 f9fb 	bl	8000b44 <uart3_send_string>
  uart3_send_string("\n\r");
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <main+0xe0>)
 8000750:	0018      	movs	r0, r3
 8000752:	f000 f9f7 	bl	8000b44 <uart3_send_string>

  // read lidar data into buffer and send as string
  uint16_t dist[LIDAR_BUFFER_SIZE];
  for (int i = 0; i < LIDAR_BUFFER_SIZE; i++) {
 8000756:	2300      	movs	r3, #0
 8000758:	22ce      	movs	r2, #206	; 0xce
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	18ba      	adds	r2, r7, r2
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	e027      	b.n	80007b2 <main+0xce>
	  lidar_get_distance(&dist[i]);
 8000762:	003a      	movs	r2, r7
 8000764:	24ce      	movs	r4, #206	; 0xce
 8000766:	0064      	lsls	r4, r4, #1
 8000768:	193b      	adds	r3, r7, r4
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	18d3      	adds	r3, r2, r3
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff ff9b 	bl	80006ac <lidar_get_distance>

	  // send over uart as string
	  sprintf(dist_string, "%d", dist[i]);
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <main+0xe4>)
 8000778:	22d0      	movs	r2, #208	; 0xd0
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	189b      	adds	r3, r3, r2
 800077e:	19db      	adds	r3, r3, r7
 8000780:	193a      	adds	r2, r7, r4
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	0052      	lsls	r2, r2, #1
 8000786:	5ad3      	ldrh	r3, [r2, r3]
 8000788:	001a      	movs	r2, r3
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <main+0xdc>)
 800078c:	25c8      	movs	r5, #200	; 0xc8
 800078e:	006d      	lsls	r5, r5, #1
 8000790:	197b      	adds	r3, r7, r5
 8000792:	0018      	movs	r0, r3
 8000794:	f001 f84c 	bl	8001830 <siprintf>
	  uart3_send_string(dist_string);
 8000798:	197b      	adds	r3, r7, r5
 800079a:	0018      	movs	r0, r3
 800079c:	f000 f9d2 	bl	8000b44 <uart3_send_string>
	  uart3_send_string("\n\r");
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <main+0xe0>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 f9ce 	bl	8000b44 <uart3_send_string>
  for (int i = 0; i < LIDAR_BUFFER_SIZE; i++) {
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	193a      	adds	r2, r7, r4
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	23ce      	movs	r3, #206	; 0xce
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2bc7      	cmp	r3, #199	; 0xc7
 80007bc:	ddd1      	ble.n	8000762 <main+0x7e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007be:	e7fe      	b.n	80007be <main+0xda>
 80007c0:	08002124 	.word	0x08002124
 80007c4:	08002128 	.word	0x08002128
 80007c8:	fffffe60 	.word	0xfffffe60

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b093      	sub	sp, #76	; 0x4c
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	2414      	movs	r4, #20
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	0018      	movs	r0, r3
 80007d8:	2334      	movs	r3, #52	; 0x34
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f001 f81f 	bl	8001820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	0018      	movs	r0, r3
 80007e6:	2310      	movs	r3, #16
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f001 f818 	bl	8001820 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2220      	movs	r2, #32
 80007f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2201      	movs	r2, #1
 80007fa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	193b      	adds	r3, r7, r4
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fb01 	bl	8000e0c <HAL_RCC_OscConfig>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800080e:	f000 f819 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2203      	movs	r2, #3
 800081c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2101      	movs	r1, #1
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fe72 	bl	8001518 <HAL_RCC_ClockConfig>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000838:	f000 f804 	bl	8000844 <Error_Handler>
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b013      	add	sp, #76	; 0x4c
 8000842:	bd90      	pop	{r4, r7, pc}

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	699a      	ldr	r2, [r3, #24]
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	619a      	str	r2, [r3, #24]
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	69da      	ldr	r2, [r3, #28]
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0549      	lsls	r1, r1, #21
 8000878:	430a      	orrs	r2, r1
 800087a:	61da      	str	r2, [r3, #28]
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_MspInit+0x44>)
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	055b      	lsls	r3, r3, #21
 8000884:	4013      	ands	r3, r2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f9d6 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f000 ff68 	bl	80017cc <__errno>
 80008fc:	0003      	movs	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	2301      	movs	r3, #1
 8000904:	425b      	negs	r3, r3
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	18d2      	adds	r2, r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b006      	add	sp, #24
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20008000 	.word	0x20008000
 8000928:	00000400 	.word	0x00000400
 800092c:	20000090 	.word	0x20000090
 8000930:	200000a8 	.word	0x200000a8

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <uart3_gpio_init>:



/* USER CODE BEGIN 4 */

void uart3_gpio_init(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;			// Enable GPIOC
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <uart3_gpio_init+0x84>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <uart3_gpio_init+0x84>)
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	0309      	lsls	r1, r1, #12
 800094e:	430a      	orrs	r2, r1
 8000950:	615a      	str	r2, [r3, #20]
	GPIOC->MODER &= ~GPIO_MODER_MODER10;		// Clear GPIOC MODER10 bits
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <uart3_gpio_init+0x88>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <uart3_gpio_init+0x88>)
 8000958:	491c      	ldr	r1, [pc, #112]	; (80009cc <uart3_gpio_init+0x8c>)
 800095a:	400a      	ands	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= GPIO_MODER_MODER10_1;		// Set alternate function bits
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <uart3_gpio_init+0x88>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <uart3_gpio_init+0x88>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0389      	lsls	r1, r1, #14
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER11;		// Clear GPIOC MODER11 bits
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <uart3_gpio_init+0x88>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <uart3_gpio_init+0x88>)
 8000972:	4917      	ldr	r1, [pc, #92]	; (80009d0 <uart3_gpio_init+0x90>)
 8000974:	400a      	ands	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= GPIO_MODER_MODER11_1;		// Set alternate function bits
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <uart3_gpio_init+0x88>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <uart3_gpio_init+0x88>)
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	0409      	lsls	r1, r1, #16
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR10;	// Set high speed output for GPIOC pin 10
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <uart3_gpio_init+0x88>)
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <uart3_gpio_init+0x88>)
 800098c:	21c0      	movs	r1, #192	; 0xc0
 800098e:	0389      	lsls	r1, r1, #14
 8000990:	430a      	orrs	r2, r1
 8000992:	609a      	str	r2, [r3, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR11;	// Set high speed output for GPIOC pin 11
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <uart3_gpio_init+0x88>)
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <uart3_gpio_init+0x88>)
 800099a:	21c0      	movs	r1, #192	; 0xc0
 800099c:	0409      	lsls	r1, r1, #16
 800099e:	430a      	orrs	r2, r1
 80009a0:	609a      	str	r2, [r3, #8]
	GPIOC->AFR[1]  |= (1<<8);					// Set AF1 for GPIOC pin 10
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <uart3_gpio_init+0x88>)
 80009a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <uart3_gpio_init+0x88>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0049      	lsls	r1, r1, #1
 80009ac:	430a      	orrs	r2, r1
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1]  |= (1<<12);					// Set AF1 for GPIOC pin 11
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <uart3_gpio_init+0x88>)
 80009b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <uart3_gpio_init+0x88>)
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	0149      	lsls	r1, r1, #5
 80009ba:	430a      	orrs	r2, r1
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24

}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	48000800 	.word	0x48000800
 80009cc:	ffcfffff 	.word	0xffcfffff
 80009d0:	ff3fffff 	.word	0xff3fffff

080009d4 <uart3_init>:

void uart3_init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	uart3_gpio_init();
 80009d8:	f7ff ffb2 	bl	8000940 <uart3_gpio_init>
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;	// Enable USART3
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <uart3_init+0xac>)
 80009de:	69da      	ldr	r2, [r3, #28]
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <uart3_init+0xac>)
 80009e2:	2180      	movs	r1, #128	; 0x80
 80009e4:	02c9      	lsls	r1, r1, #11
 80009e6:	430a      	orrs	r2, r1
 80009e8:	61da      	str	r2, [r3, #28]
	USART3->CR1 &= ~USART_CR1_UE;			// Disable UE (USART3)
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <uart3_init+0xb0>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <uart3_init+0xb0>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	438a      	bics	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]
	USART3->CR1 &= ~(0x3<<28);				// Set word length (M0) to 1 Start bit, 8 data bits, n stop bits
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <uart3_init+0xb0>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <uart3_init+0xb0>)
 80009fc:	4922      	ldr	r1, [pc, #136]	; (8000a88 <uart3_init+0xb4>)
 80009fe:	400a      	ands	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
	USART3->CR2 &= ~(0x3<<12);				// Set stop bit to 1
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <uart3_init+0xb0>)
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <uart3_init+0xb0>)
 8000a08:	4920      	ldr	r1, [pc, #128]	; (8000a8c <uart3_init+0xb8>)
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	605a      	str	r2, [r3, #4]
	USART3->CR1 &= ~USART_CR1_PCE;			// Disable parity control
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <uart3_init+0xb0>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <uart3_init+0xb0>)
 8000a14:	491e      	ldr	r1, [pc, #120]	; (8000a90 <uart3_init+0xbc>)
 8000a16:	400a      	ands	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
	USART3->CR1 &= ~USART_CR1_OVER8;		// Set oversampling by 16
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <uart3_init+0xb0>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <uart3_init+0xb0>)
 8000a20:	491c      	ldr	r1, [pc, #112]	; (8000a94 <uart3_init+0xc0>)
 8000a22:	400a      	ands	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
	USART3->BRR = 0x1a1;					// Set baud rate to 115200 bits/s (0x1a1 = 417 = 48000000 / 115200)
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <uart3_init+0xb0>)
 8000a28:	22a2      	movs	r2, #162	; 0xa2
 8000a2a:	32ff      	adds	r2, #255	; 0xff
 8000a2c:	60da      	str	r2, [r3, #12]
	USART3->CR1 |= 1<<2;					// Receiver is enabled
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <uart3_init+0xb0>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <uart3_init+0xb0>)
 8000a34:	2104      	movs	r1, #4
 8000a36:	430a      	orrs	r2, r1
 8000a38:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= 1<<3;					// Transmitter is enabled
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <uart3_init+0xb0>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <uart3_init+0xb0>)
 8000a40:	2108      	movs	r1, #8
 8000a42:	430a      	orrs	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= 1;						// Enable UE (USART3)
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <uart3_init+0xb0>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <uart3_init+0xb0>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]

	while(((USART3->ISR & USART_ISR_REACK) != USART_ISR_REACK) && ((USART3->ISR & USART_ISR_TEACK) != USART_ISR_TEACK));
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <uart3_init+0xb0>)
 8000a56:	69da      	ldr	r2, [r3, #28]
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	03db      	lsls	r3, r3, #15
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d008      	beq.n	8000a78 <uart3_init+0xa4>
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <uart3_init+0xb0>)
 8000a68:	69da      	ldr	r2, [r3, #28]
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	039b      	lsls	r3, r3, #14
 8000a6e:	401a      	ands	r2, r3
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	039b      	lsls	r3, r3, #14
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d1ed      	bne.n	8000a54 <uart3_init+0x80>

}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40004800 	.word	0x40004800
 8000a88:	cfffffff 	.word	0xcfffffff
 8000a8c:	ffffcfff 	.word	0xffffcfff
 8000a90:	fffffbff 	.word	0xfffffbff
 8000a94:	ffff7fff 	.word	0xffff7fff

08000a98 <uart3_create_header>:

void uart3_create_header(uint8_t* pheader, uint8_t command, uint8_t d_source, uint8_t d_type, uint8_t num_data)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	000c      	movs	r4, r1
 8000aa2:	0010      	movs	r0, r2
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	1cfb      	adds	r3, r7, #3
 8000aa8:	1c22      	adds	r2, r4, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	1cbb      	adds	r3, r7, #2
 8000aae:	1c02      	adds	r2, r0, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	1c7b      	adds	r3, r7, #1
 8000ab4:	1c0a      	adds	r2, r1, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
	pheader[0] = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
	pheader[0] |= command;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	1cfb      	adds	r3, r7, #3
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	701a      	strb	r2, [r3, #0]
	pheader[0] |= d_source;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	1cbb      	adds	r3, r7, #2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	701a      	strb	r2, [r3, #0]
	pheader[0] |= d_type;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	1c7b      	adds	r3, r7, #1
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	701a      	strb	r2, [r3, #0]
	pheader[1] = num_data;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	2318      	movs	r3, #24
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	7013      	strb	r3, [r2, #0]
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b003      	add	sp, #12
 8000b00:	bd90      	pop	{r4, r7, pc}
	...

08000b04 <uart3_send_byte>:

void uart3_send_byte(uint8_t c) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	701a      	strb	r2, [r3, #0]

	while((USART3->ISR & USART_ISR_TXE) != USART_ISR_TXE);
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <uart3_send_byte+0x3c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b80      	cmp	r3, #128	; 0x80
 8000b1c:	d1f9      	bne.n	8000b12 <uart3_send_byte+0xe>
	USART3->TDR = c;
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <uart3_send_byte+0x3c>)
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	8513      	strh	r3, [r2, #40]	; 0x28
	while((USART3->ISR & USART_ISR_TXE) != USART_ISR_TXE);
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <uart3_send_byte+0x3c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b80      	cmp	r3, #128	; 0x80
 8000b34:	d1f9      	bne.n	8000b2a <uart3_send_byte+0x26>

}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40004800 	.word	0x40004800

08000b44 <uart3_send_string>:

void uart3_send_string(char * str) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

	while(*str) {
 8000b4c:	e006      	b.n	8000b5c <uart3_send_string+0x18>
		uart3_send_byte(*str++);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff ffd4 	bl	8000b04 <uart3_send_byte>
	while(*str) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1f4      	bne.n	8000b4e <uart3_send_string+0xa>
	}

}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <uart3_test>:

void uart3_test(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

	uart3_send_string("This is a UART test\n\r");
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <uart3_test+0x14>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff ffe4 	bl	8000b44 <uart3_send_string>

}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	0800212c 	.word	0x0800212c

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bb2:	f7ff febf 	bl	8000934 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f000 fe0f 	bl	80017d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fd93 	bl	80006e4 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bcc:	080021b0 	.word	0x080021b0
  ldr r2, =_sbss
 8000bd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bd4:	200000a8 	.word	0x200000a8

08000bd8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_COMP_IRQHandler>
	...

08000bdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_Init+0x24>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_Init+0x24>)
 8000be6:	2110      	movs	r1, #16
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f809 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf2:	f7ff fe2d 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	0098      	lsls	r0, r3, #2
 8000c1a:	f7ff fa7d 	bl	8000118 <__udivsi3>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0019      	movs	r1, r3
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fa78 	bl	8000118 <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f8e1 	bl	8000df2 <HAL_SYSTICK_Config>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00f      	b.n	8000c58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80b      	bhi.n	8000c56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f8be 	bl	8000dc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_InitTick+0x64>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000004 	.word	0x20000004
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	20000008 	.word	0x20000008

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	20000094 	.word	0x20000094

08000c90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000094 	.word	0x20000094

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb8:	d828      	bhi.n	8000d0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cba:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <__NVIC_SetPriority+0xd4>)
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	33c0      	adds	r3, #192	; 0xc0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	589b      	ldr	r3, [r3, r2]
 8000cca:	1dfa      	adds	r2, r7, #7
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	21ff      	movs	r1, #255	; 0xff
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	401a      	ands	r2, r3
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	4003      	ands	r3, r0
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf8:	481f      	ldr	r0, [pc, #124]	; (8000d78 <__NVIC_SetPriority+0xd4>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	430a      	orrs	r2, r1
 8000d04:	33c0      	adds	r3, #192	; 0xc0
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d0a:	e031      	b.n	8000d70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <__NVIC_SetPriority+0xd8>)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0019      	movs	r1, r3
 8000d14:	230f      	movs	r3, #15
 8000d16:	400b      	ands	r3, r1
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3306      	adds	r3, #6
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	18d3      	adds	r3, r2, r3
 8000d22:	3304      	adds	r3, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1dfa      	adds	r2, r7, #7
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	400a      	ands	r2, r1
 8000d30:	00d2      	lsls	r2, r2, #3
 8000d32:	21ff      	movs	r1, #255	; 0xff
 8000d34:	4091      	lsls	r1, r2
 8000d36:	000a      	movs	r2, r1
 8000d38:	43d2      	mvns	r2, r2
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	22ff      	movs	r2, #255	; 0xff
 8000d44:	401a      	ands	r2, r3
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	4003      	ands	r3, r0
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <__NVIC_SetPriority+0xd8>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	001c      	movs	r4, r3
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	4023      	ands	r3, r4
 8000d60:	3b08      	subs	r3, #8
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	430a      	orrs	r2, r1
 8000d66:	3306      	adds	r3, #6
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	18c3      	adds	r3, r0, r3
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b003      	add	sp, #12
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	045b      	lsls	r3, r3, #17
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d301      	bcc.n	8000d98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d94:	2301      	movs	r3, #1
 8000d96:	e010      	b.n	8000dba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <SysTick_Config+0x44>)
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2103      	movs	r1, #3
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff ff7c 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x44>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x44>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	1c02      	adds	r2, r0, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff ffbf 	bl	8000d80 <SysTick_Config>
 8000e02:	0003      	movs	r3, r0
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f000 fb76 	bl	800150c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4013      	ands	r3, r2
 8000e28:	d100      	bne.n	8000e2c <HAL_RCC_OscConfig+0x20>
 8000e2a:	e08e      	b.n	8000f4a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e2c:	4bc5      	ldr	r3, [pc, #788]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	220c      	movs	r2, #12
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d00e      	beq.n	8000e56 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e38:	4bc2      	ldr	r3, [pc, #776]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d117      	bne.n	8000e74 <HAL_RCC_OscConfig+0x68>
 8000e44:	4bbf      	ldr	r3, [pc, #764]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	23c0      	movs	r3, #192	; 0xc0
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d10e      	bne.n	8000e74 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e56:	4bbb      	ldr	r3, [pc, #748]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	029b      	lsls	r3, r3, #10
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d100      	bne.n	8000e64 <HAL_RCC_OscConfig+0x58>
 8000e62:	e071      	b.n	8000f48 <HAL_RCC_OscConfig+0x13c>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d000      	beq.n	8000e6e <HAL_RCC_OscConfig+0x62>
 8000e6c:	e06c      	b.n	8000f48 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f000 fb4c 	bl	800150c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d107      	bne.n	8000e8c <HAL_RCC_OscConfig+0x80>
 8000e7c:	4bb1      	ldr	r3, [pc, #708]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4bb0      	ldr	r3, [pc, #704]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e02f      	b.n	8000eec <HAL_RCC_OscConfig+0xe0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10c      	bne.n	8000eae <HAL_RCC_OscConfig+0xa2>
 8000e94:	4bab      	ldr	r3, [pc, #684]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4baa      	ldr	r3, [pc, #680]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	49ab      	ldr	r1, [pc, #684]	; (8001148 <HAL_RCC_OscConfig+0x33c>)
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	4ba8      	ldr	r3, [pc, #672]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4ba7      	ldr	r3, [pc, #668]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	49a9      	ldr	r1, [pc, #676]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e01e      	b.n	8000eec <HAL_RCC_OscConfig+0xe0>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d10e      	bne.n	8000ed4 <HAL_RCC_OscConfig+0xc8>
 8000eb6:	4ba3      	ldr	r3, [pc, #652]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4ba2      	ldr	r3, [pc, #648]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	02c9      	lsls	r1, r1, #11
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	4b9f      	ldr	r3, [pc, #636]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b9e      	ldr	r3, [pc, #632]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e00b      	b.n	8000eec <HAL_RCC_OscConfig+0xe0>
 8000ed4:	4b9b      	ldr	r3, [pc, #620]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b9a      	ldr	r3, [pc, #616]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000eda:	499b      	ldr	r1, [pc, #620]	; (8001148 <HAL_RCC_OscConfig+0x33c>)
 8000edc:	400a      	ands	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	4b98      	ldr	r3, [pc, #608]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b97      	ldr	r3, [pc, #604]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000ee6:	4999      	ldr	r1, [pc, #612]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000ee8:	400a      	ands	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d014      	beq.n	8000f1e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fecc 	bl	8000c90 <HAL_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efe:	f7ff fec7 	bl	8000c90 <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b64      	cmp	r3, #100	; 0x64
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e2fd      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f10:	4b8c      	ldr	r3, [pc, #560]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	029b      	lsls	r3, r3, #10
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d0f0      	beq.n	8000efe <HAL_RCC_OscConfig+0xf2>
 8000f1c:	e015      	b.n	8000f4a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1e:	f7ff feb7 	bl	8000c90 <HAL_GetTick>
 8000f22:	0003      	movs	r3, r0
 8000f24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff feb2 	bl	8000c90 <HAL_GetTick>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e2e8      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3a:	4b82      	ldr	r3, [pc, #520]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4013      	ands	r3, r2
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x11c>
 8000f46:	e000      	b.n	8000f4a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4013      	ands	r3, r2
 8000f52:	d100      	bne.n	8000f56 <HAL_RCC_OscConfig+0x14a>
 8000f54:	e06c      	b.n	8001030 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f56:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d00e      	beq.n	8000f7e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f60:	4b78      	ldr	r3, [pc, #480]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	220c      	movs	r2, #12
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d11f      	bne.n	8000fac <HAL_RCC_OscConfig+0x1a0>
 8000f6c:	4b75      	ldr	r3, [pc, #468]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	23c0      	movs	r3, #192	; 0xc0
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	401a      	ands	r2, r3
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d116      	bne.n	8000fac <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7e:	4b71      	ldr	r3, [pc, #452]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2202      	movs	r2, #2
 8000f84:	4013      	ands	r3, r2
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_OscConfig+0x188>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d001      	beq.n	8000f94 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e2bb      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f94:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	22f8      	movs	r2, #248	; 0xf8
 8000f9a:	4393      	bics	r3, r2
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	00da      	lsls	r2, r3, #3
 8000fa4:	4b67      	ldr	r3, [pc, #412]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000faa:	e041      	b.n	8001030 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d024      	beq.n	8000ffe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb4:	4b63      	ldr	r3, [pc, #396]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b62      	ldr	r3, [pc, #392]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fe66 	bl	8000c90 <HAL_GetTick>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fca:	f7ff fe61 	bl	8000c90 <HAL_GetTick>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e297      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	4b59      	ldr	r3, [pc, #356]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d0f1      	beq.n	8000fca <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b57      	ldr	r3, [pc, #348]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	22f8      	movs	r2, #248	; 0xf8
 8000fec:	4393      	bics	r3, r2
 8000fee:	0019      	movs	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	00da      	lsls	r2, r3, #3
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e018      	b.n	8001030 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffe:	4b51      	ldr	r3, [pc, #324]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8001004:	2101      	movs	r1, #1
 8001006:	438a      	bics	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fe41 	bl	8000c90 <HAL_GetTick>
 800100e:	0003      	movs	r3, r0
 8001010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fe3c 	bl	8000c90 <HAL_GetTick>
 8001018:	0002      	movs	r2, r0
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e272      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2202      	movs	r2, #2
 800102c:	4013      	ands	r3, r2
 800102e:	d1f1      	bne.n	8001014 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2208      	movs	r2, #8
 8001036:	4013      	ands	r3, r2
 8001038:	d036      	beq.n	80010a8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d019      	beq.n	8001076 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001042:	4b40      	ldr	r3, [pc, #256]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8001044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001046:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104e:	f7ff fe1f 	bl	8000c90 <HAL_GetTick>
 8001052:	0003      	movs	r3, r0
 8001054:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fe1a 	bl	8000c90 <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e250      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	2202      	movs	r2, #2
 8001070:	4013      	ands	r3, r2
 8001072:	d0f1      	beq.n	8001058 <HAL_RCC_OscConfig+0x24c>
 8001074:	e018      	b.n	80010a8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001076:	4b33      	ldr	r3, [pc, #204]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8001078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff fe05 	bl	8000c90 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800108c:	f7ff fe00 	bl	8000c90 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e236      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d1f1      	bne.n	800108c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2204      	movs	r2, #4
 80010ae:	4013      	ands	r3, r2
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0x2a8>
 80010b2:	e0b5      	b.n	8001220 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b4:	201f      	movs	r0, #31
 80010b6:	183b      	adds	r3, r7, r0
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 80010be:	69da      	ldr	r2, [r3, #28]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	055b      	lsls	r3, r3, #21
 80010c4:	4013      	ands	r3, r2
 80010c6:	d110      	bne.n	80010ea <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 80010ca:	69da      	ldr	r2, [r3, #28]
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0549      	lsls	r1, r1, #21
 80010d2:	430a      	orrs	r2, r1
 80010d4:	61da      	str	r2, [r3, #28]
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 80010d8:	69da      	ldr	r2, [r3, #28]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	055b      	lsls	r3, r3, #21
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010e4:	183b      	adds	r3, r7, r0
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_RCC_OscConfig+0x344>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4013      	ands	r3, r2
 80010f4:	d11a      	bne.n	800112c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_RCC_OscConfig+0x344>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_RCC_OscConfig+0x344>)
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	0049      	lsls	r1, r1, #1
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001104:	f7ff fdc4 	bl	8000c90 <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110e:	f7ff fdbf 	bl	8000c90 <HAL_GetTick>
 8001112:	0002      	movs	r2, r0
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1f5      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_RCC_OscConfig+0x344>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4013      	ands	r3, r2
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d10f      	bne.n	8001154 <HAL_RCC_OscConfig+0x348>
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 8001136:	6a1a      	ldr	r2, [r3, #32]
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <HAL_RCC_OscConfig+0x338>)
 800113a:	2101      	movs	r1, #1
 800113c:	430a      	orrs	r2, r1
 800113e:	621a      	str	r2, [r3, #32]
 8001140:	e036      	b.n	80011b0 <HAL_RCC_OscConfig+0x3a4>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40021000 	.word	0x40021000
 8001148:	fffeffff 	.word	0xfffeffff
 800114c:	fffbffff 	.word	0xfffbffff
 8001150:	40007000 	.word	0x40007000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10c      	bne.n	8001176 <HAL_RCC_OscConfig+0x36a>
 800115c:	4bca      	ldr	r3, [pc, #808]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	4bc9      	ldr	r3, [pc, #804]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001162:	2101      	movs	r1, #1
 8001164:	438a      	bics	r2, r1
 8001166:	621a      	str	r2, [r3, #32]
 8001168:	4bc7      	ldr	r3, [pc, #796]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	4bc6      	ldr	r3, [pc, #792]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800116e:	2104      	movs	r1, #4
 8001170:	438a      	bics	r2, r1
 8001172:	621a      	str	r2, [r3, #32]
 8001174:	e01c      	b.n	80011b0 <HAL_RCC_OscConfig+0x3a4>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b05      	cmp	r3, #5
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x38c>
 800117e:	4bc2      	ldr	r3, [pc, #776]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001180:	6a1a      	ldr	r2, [r3, #32]
 8001182:	4bc1      	ldr	r3, [pc, #772]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001184:	2104      	movs	r1, #4
 8001186:	430a      	orrs	r2, r1
 8001188:	621a      	str	r2, [r3, #32]
 800118a:	4bbf      	ldr	r3, [pc, #764]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800118c:	6a1a      	ldr	r2, [r3, #32]
 800118e:	4bbe      	ldr	r3, [pc, #760]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001190:	2101      	movs	r1, #1
 8001192:	430a      	orrs	r2, r1
 8001194:	621a      	str	r2, [r3, #32]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0x3a4>
 8001198:	4bbb      	ldr	r3, [pc, #748]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800119a:	6a1a      	ldr	r2, [r3, #32]
 800119c:	4bba      	ldr	r3, [pc, #744]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800119e:	2101      	movs	r1, #1
 80011a0:	438a      	bics	r2, r1
 80011a2:	621a      	str	r2, [r3, #32]
 80011a4:	4bb8      	ldr	r3, [pc, #736]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	4bb7      	ldr	r3, [pc, #732]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80011aa:	2104      	movs	r1, #4
 80011ac:	438a      	bics	r2, r1
 80011ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d014      	beq.n	80011e2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b8:	f7ff fd6a 	bl	8000c90 <HAL_GetTick>
 80011bc:	0003      	movs	r3, r0
 80011be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c0:	e009      	b.n	80011d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011c2:	f7ff fd65 	bl	8000c90 <HAL_GetTick>
 80011c6:	0002      	movs	r2, r0
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	4aaf      	ldr	r2, [pc, #700]	; (800148c <HAL_RCC_OscConfig+0x680>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e19a      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d6:	4bac      	ldr	r3, [pc, #688]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	2202      	movs	r2, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x3b6>
 80011e0:	e013      	b.n	800120a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fd55 	bl	8000c90 <HAL_GetTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ea:	e009      	b.n	8001200 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f7ff fd50 	bl	8000c90 <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	4aa5      	ldr	r2, [pc, #660]	; (800148c <HAL_RCC_OscConfig+0x680>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e185      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001200:	4ba1      	ldr	r3, [pc, #644]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	2202      	movs	r2, #2
 8001206:	4013      	ands	r3, r2
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800120a:	231f      	movs	r3, #31
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001214:	4b9c      	ldr	r3, [pc, #624]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	4b9b      	ldr	r3, [pc, #620]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800121a:	499d      	ldr	r1, [pc, #628]	; (8001490 <HAL_RCC_OscConfig+0x684>)
 800121c:	400a      	ands	r2, r1
 800121e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2210      	movs	r2, #16
 8001226:	4013      	ands	r3, r2
 8001228:	d063      	beq.n	80012f2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d12a      	bne.n	8001288 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001232:	4b95      	ldr	r3, [pc, #596]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001236:	4b94      	ldr	r3, [pc, #592]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001238:	2104      	movs	r1, #4
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800123e:	4b92      	ldr	r3, [pc, #584]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001242:	4b91      	ldr	r3, [pc, #580]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001244:	2101      	movs	r1, #1
 8001246:	430a      	orrs	r2, r1
 8001248:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fd21 	bl	8000c90 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001254:	f7ff fd1c 	bl	8000c90 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e152      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001266:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d0f1      	beq.n	8001254 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001270:	4b85      	ldr	r3, [pc, #532]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001274:	22f8      	movs	r2, #248	; 0xf8
 8001276:	4393      	bics	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	00da      	lsls	r2, r3, #3
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001282:	430a      	orrs	r2, r1
 8001284:	635a      	str	r2, [r3, #52]	; 0x34
 8001286:	e034      	b.n	80012f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	3305      	adds	r3, #5
 800128e:	d111      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001290:	4b7d      	ldr	r3, [pc, #500]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001294:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001296:	2104      	movs	r1, #4
 8001298:	438a      	bics	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800129c:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	22f8      	movs	r2, #248	; 0xf8
 80012a2:	4393      	bics	r3, r2
 80012a4:	0019      	movs	r1, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	00da      	lsls	r2, r3, #3
 80012ac:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
 80012b2:	e01e      	b.n	80012f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012b4:	4b74      	ldr	r3, [pc, #464]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80012b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b8:	4b73      	ldr	r3, [pc, #460]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80012ba:	2104      	movs	r1, #4
 80012bc:	430a      	orrs	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012c0:	4b71      	ldr	r3, [pc, #452]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80012c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c4:	4b70      	ldr	r3, [pc, #448]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	438a      	bics	r2, r1
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fce0 	bl	8000c90 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012d6:	f7ff fcdb 	bl	8000c90 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e111      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012e8:	4b67      	ldr	r3, [pc, #412]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	2202      	movs	r2, #2
 80012ee:	4013      	ands	r3, r2
 80012f0:	d1f1      	bne.n	80012d6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2220      	movs	r2, #32
 80012f8:	4013      	ands	r3, r2
 80012fa:	d05c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012fc:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	220c      	movs	r2, #12
 8001302:	4013      	ands	r3, r2
 8001304:	2b0c      	cmp	r3, #12
 8001306:	d00e      	beq.n	8001326 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001308:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	220c      	movs	r2, #12
 800130e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001310:	2b08      	cmp	r3, #8
 8001312:	d114      	bne.n	800133e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001314:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	23c0      	movs	r3, #192	; 0xc0
 800131a:	025b      	lsls	r3, r3, #9
 800131c:	401a      	ands	r2, r3
 800131e:	23c0      	movs	r3, #192	; 0xc0
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	429a      	cmp	r2, r3
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	025b      	lsls	r3, r3, #9
 800132e:	4013      	ands	r3, r2
 8001330:	d040      	beq.n	80013b4 <HAL_RCC_OscConfig+0x5a8>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d03c      	beq.n	80013b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0e6      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01b      	beq.n	800137e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001346:	4b50      	ldr	r3, [pc, #320]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800134a:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	0249      	lsls	r1, r1, #9
 8001350:	430a      	orrs	r2, r1
 8001352:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fc9c 	bl	8000c90 <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800135e:	f7ff fc97 	bl	8000c90 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0cd      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	025b      	lsls	r3, r3, #9
 8001378:	4013      	ands	r3, r2
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x552>
 800137c:	e01b      	b.n	80013b6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001384:	4943      	ldr	r1, [pc, #268]	; (8001494 <HAL_RCC_OscConfig+0x688>)
 8001386:	400a      	ands	r2, r1
 8001388:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fc81 	bl	8000c90 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001394:	f7ff fc7c 	bl	8000c90 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e0b2      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80013a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x588>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013b4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d100      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5b4>
 80013be:	e0a4      	b.n	800150a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	220c      	movs	r2, #12
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x5c2>
 80013cc:	e078      	b.n	80014c0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d14c      	bne.n	8001470 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 80013dc:	492e      	ldr	r1, [pc, #184]	; (8001498 <HAL_RCC_OscConfig+0x68c>)
 80013de:	400a      	ands	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fc55 	bl	8000c90 <HAL_GetTick>
 80013e6:	0003      	movs	r3, r0
 80013e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff fc50 	bl	8000c90 <HAL_GetTick>
 80013f0:	0002      	movs	r2, r0
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e086      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	049b      	lsls	r3, r3, #18
 8001406:	4013      	ands	r3, r2
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	220f      	movs	r2, #15
 8001410:	4393      	bics	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800141a:	430a      	orrs	r2, r1
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_RCC_OscConfig+0x690>)
 8001424:	4013      	ands	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	431a      	orrs	r2, r3
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001434:	430a      	orrs	r2, r1
 8001436:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	0449      	lsls	r1, r1, #17
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fc23 	bl	8000c90 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fc1e 	bl	8000c90 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e054      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	049b      	lsls	r3, r3, #18
 800146a:	4013      	ands	r3, r2
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x644>
 800146e:	e04c      	b.n	800150a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_RCC_OscConfig+0x67c>)
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <HAL_RCC_OscConfig+0x68c>)
 8001478:	400a      	ands	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc08 	bl	8000c90 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x6a6>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	40021000 	.word	0x40021000
 800148c:	00001388 	.word	0x00001388
 8001490:	efffffff 	.word	0xefffffff
 8001494:	fffeffff 	.word	0xfffeffff
 8001498:	feffffff 	.word	0xfeffffff
 800149c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fbf6 	bl	8000c90 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e02c      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_RCC_OscConfig+0x708>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	049b      	lsls	r3, r3, #18
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x694>
 80014be:	e024      	b.n	800150a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e01f      	b.n	800150c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_OscConfig+0x708>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_RCC_OscConfig+0x708>)
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	23c0      	movs	r3, #192	; 0xc0
 80014dc:	025b      	lsls	r3, r3, #9
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d10e      	bne.n	8001506 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	220f      	movs	r2, #15
 80014ec:	401a      	ands	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	23f0      	movs	r3, #240	; 0xf0
 80014fa:	039b      	lsls	r3, r3, #14
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b008      	add	sp, #32
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0bf      	b.n	80016ac <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <HAL_RCC_ClockConfig+0x19c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2201      	movs	r2, #1
 8001532:	4013      	ands	r3, r2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d911      	bls.n	800155e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b5e      	ldr	r3, [pc, #376]	; (80016b4 <HAL_RCC_ClockConfig+0x19c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	4393      	bics	r3, r2
 8001542:	0019      	movs	r1, r3
 8001544:	4b5b      	ldr	r3, [pc, #364]	; (80016b4 <HAL_RCC_ClockConfig+0x19c>)
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154c:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <HAL_RCC_ClockConfig+0x19c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d001      	beq.n	800155e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0a6      	b.n	80016ac <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2202      	movs	r2, #2
 8001564:	4013      	ands	r3, r2
 8001566:	d015      	beq.n	8001594 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2204      	movs	r2, #4
 800156e:	4013      	ands	r3, r2
 8001570:	d006      	beq.n	8001580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001572:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001578:	21e0      	movs	r1, #224	; 0xe0
 800157a:	00c9      	lsls	r1, r1, #3
 800157c:	430a      	orrs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001580:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	22f0      	movs	r2, #240	; 0xf0
 8001586:	4393      	bics	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	d04c      	beq.n	8001638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b44      	ldr	r3, [pc, #272]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	029b      	lsls	r3, r3, #10
 80015ae:	4013      	ands	r3, r2
 80015b0:	d120      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e07a      	b.n	80016ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	049b      	lsls	r3, r3, #18
 80015c6:	4013      	ands	r3, r2
 80015c8:	d114      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e06e      	b.n	80016ac <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015d6:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 80015d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	4013      	ands	r3, r2
 80015e0:	d108      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e062      	b.n	80016ac <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e05b      	b.n	80016ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2203      	movs	r2, #3
 80015fa:	4393      	bics	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001608:	f7ff fb42 	bl	8000c90 <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001610:	e009      	b.n	8001626 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001612:	f7ff fb3d 	bl	8000c90 <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <HAL_RCC_ClockConfig+0x1a4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e042      	b.n	80016ac <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	220c      	movs	r2, #12
 800162c:	401a      	ands	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d1ec      	bne.n	8001612 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <HAL_RCC_ClockConfig+0x19c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2201      	movs	r2, #1
 800163e:	4013      	ands	r3, r2
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d211      	bcs.n	800166a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_ClockConfig+0x19c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	4393      	bics	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_RCC_ClockConfig+0x19c>)
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_RCC_ClockConfig+0x19c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2201      	movs	r2, #1
 800165e:	4013      	ands	r3, r2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e020      	b.n	80016ac <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d009      	beq.n	8001688 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_RCC_ClockConfig+0x1a8>)
 800167a:	4013      	ands	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001688:	f000 f820 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 800168c:	0001      	movs	r1, r0
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x1a0>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	220f      	movs	r2, #15
 8001696:	4013      	ands	r3, r2
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x1ac>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	000a      	movs	r2, r1
 800169e:	40da      	lsrs	r2, r3
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_RCC_ClockConfig+0x1b0>)
 80016a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f7ff faad 	bl	8000c04 <HAL_InitTick>
  
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	00001388 	.word	0x00001388
 80016c0:	fffff8ff 	.word	0xfffff8ff
 80016c4:	08002164 	.word	0x08002164
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b08f      	sub	sp, #60	; 0x3c
 80016d0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016d2:	2314      	movs	r3, #20
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xec>)
 80016d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016da:	c313      	stmia	r3!, {r0, r1, r4}
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4a36      	ldr	r2, [pc, #216]	; (80017bc <HAL_RCC_GetSysClockFreq+0xf0>)
 80016e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016e6:	c313      	stmia	r3!, {r0, r1, r4}
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f4:	2300      	movs	r3, #0
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	220c      	movs	r2, #12
 800170a:	4013      	ands	r3, r2
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d047      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0xd4>
 8001710:	d849      	bhi.n	80017a6 <HAL_RCC_GetSysClockFreq+0xda>
 8001712:	2b04      	cmp	r3, #4
 8001714:	d002      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x50>
 8001716:	2b08      	cmp	r3, #8
 8001718:	d003      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x56>
 800171a:	e044      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001720:	e044      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	220f      	movs	r2, #15
 8001728:	4013      	ands	r3, r2
 800172a:	2214      	movs	r2, #20
 800172c:	18ba      	adds	r2, r7, r2
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	220f      	movs	r2, #15
 8001738:	4013      	ands	r3, r2
 800173a:	1d3a      	adds	r2, r7, #4
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001742:	23c0      	movs	r3, #192	; 0xc0
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	401a      	ands	r2, r3
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	025b      	lsls	r3, r3, #9
 800174c:	429a      	cmp	r2, r3
 800174e:	d109      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001752:	481c      	ldr	r0, [pc, #112]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001754:	f7fe fce0 	bl	8000118 <__udivsi3>
 8001758:	0003      	movs	r3, r0
 800175a:	001a      	movs	r2, r3
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	4353      	muls	r3, r2
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
 8001762:	e01a      	b.n	800179a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	025b      	lsls	r3, r3, #9
 800176a:	401a      	ands	r2, r3
 800176c:	23c0      	movs	r3, #192	; 0xc0
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	429a      	cmp	r2, r3
 8001772:	d109      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001776:	4814      	ldr	r0, [pc, #80]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001778:	f7fe fcce 	bl	8000118 <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	001a      	movs	r2, r3
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	4353      	muls	r3, r2
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
 8001786:	e008      	b.n	800179a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800178c:	f7fe fcc4 	bl	8000118 <__udivsi3>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	4353      	muls	r3, r2
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800179e:	e005      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017a4:	e002      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b00f      	add	sp, #60	; 0x3c
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	08002144 	.word	0x08002144
 80017bc:	08002154 	.word	0x08002154
 80017c0:	40021000 	.word	0x40021000
 80017c4:	007a1200 	.word	0x007a1200
 80017c8:	02dc6c00 	.word	0x02dc6c00

080017cc <__errno>:
 80017cc:	4b01      	ldr	r3, [pc, #4]	; (80017d4 <__errno+0x8>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	4770      	bx	lr
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	20000010 	.word	0x20000010

080017d8 <__libc_init_array>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	2600      	movs	r6, #0
 80017dc:	4d0c      	ldr	r5, [pc, #48]	; (8001810 <__libc_init_array+0x38>)
 80017de:	4c0d      	ldr	r4, [pc, #52]	; (8001814 <__libc_init_array+0x3c>)
 80017e0:	1b64      	subs	r4, r4, r5
 80017e2:	10a4      	asrs	r4, r4, #2
 80017e4:	42a6      	cmp	r6, r4
 80017e6:	d109      	bne.n	80017fc <__libc_init_array+0x24>
 80017e8:	2600      	movs	r6, #0
 80017ea:	f000 fc8b 	bl	8002104 <_init>
 80017ee:	4d0a      	ldr	r5, [pc, #40]	; (8001818 <__libc_init_array+0x40>)
 80017f0:	4c0a      	ldr	r4, [pc, #40]	; (800181c <__libc_init_array+0x44>)
 80017f2:	1b64      	subs	r4, r4, r5
 80017f4:	10a4      	asrs	r4, r4, #2
 80017f6:	42a6      	cmp	r6, r4
 80017f8:	d105      	bne.n	8001806 <__libc_init_array+0x2e>
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	00b3      	lsls	r3, r6, #2
 80017fe:	58eb      	ldr	r3, [r5, r3]
 8001800:	4798      	blx	r3
 8001802:	3601      	adds	r6, #1
 8001804:	e7ee      	b.n	80017e4 <__libc_init_array+0xc>
 8001806:	00b3      	lsls	r3, r6, #2
 8001808:	58eb      	ldr	r3, [r5, r3]
 800180a:	4798      	blx	r3
 800180c:	3601      	adds	r6, #1
 800180e:	e7f2      	b.n	80017f6 <__libc_init_array+0x1e>
 8001810:	080021a8 	.word	0x080021a8
 8001814:	080021a8 	.word	0x080021a8
 8001818:	080021a8 	.word	0x080021a8
 800181c:	080021ac 	.word	0x080021ac

08001820 <memset>:
 8001820:	0003      	movs	r3, r0
 8001822:	1882      	adds	r2, r0, r2
 8001824:	4293      	cmp	r3, r2
 8001826:	d100      	bne.n	800182a <memset+0xa>
 8001828:	4770      	bx	lr
 800182a:	7019      	strb	r1, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	e7f9      	b.n	8001824 <memset+0x4>

08001830 <siprintf>:
 8001830:	b40e      	push	{r1, r2, r3}
 8001832:	b500      	push	{lr}
 8001834:	490b      	ldr	r1, [pc, #44]	; (8001864 <siprintf+0x34>)
 8001836:	b09c      	sub	sp, #112	; 0x70
 8001838:	ab1d      	add	r3, sp, #116	; 0x74
 800183a:	9002      	str	r0, [sp, #8]
 800183c:	9006      	str	r0, [sp, #24]
 800183e:	9107      	str	r1, [sp, #28]
 8001840:	9104      	str	r1, [sp, #16]
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <siprintf+0x38>)
 8001844:	4909      	ldr	r1, [pc, #36]	; (800186c <siprintf+0x3c>)
 8001846:	cb04      	ldmia	r3!, {r2}
 8001848:	9105      	str	r1, [sp, #20]
 800184a:	6800      	ldr	r0, [r0, #0]
 800184c:	a902      	add	r1, sp, #8
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	f000 f870 	bl	8001934 <_svfiprintf_r>
 8001854:	2300      	movs	r3, #0
 8001856:	9a02      	ldr	r2, [sp, #8]
 8001858:	7013      	strb	r3, [r2, #0]
 800185a:	b01c      	add	sp, #112	; 0x70
 800185c:	bc08      	pop	{r3}
 800185e:	b003      	add	sp, #12
 8001860:	4718      	bx	r3
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	7fffffff 	.word	0x7fffffff
 8001868:	20000010 	.word	0x20000010
 800186c:	ffff0208 	.word	0xffff0208

08001870 <__ssputs_r>:
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	688e      	ldr	r6, [r1, #8]
 8001874:	b085      	sub	sp, #20
 8001876:	0007      	movs	r7, r0
 8001878:	000c      	movs	r4, r1
 800187a:	9203      	str	r2, [sp, #12]
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	429e      	cmp	r6, r3
 8001880:	d83c      	bhi.n	80018fc <__ssputs_r+0x8c>
 8001882:	2390      	movs	r3, #144	; 0x90
 8001884:	898a      	ldrh	r2, [r1, #12]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	421a      	tst	r2, r3
 800188a:	d034      	beq.n	80018f6 <__ssputs_r+0x86>
 800188c:	6909      	ldr	r1, [r1, #16]
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	6960      	ldr	r0, [r4, #20]
 8001892:	1a5b      	subs	r3, r3, r1
 8001894:	9302      	str	r3, [sp, #8]
 8001896:	2303      	movs	r3, #3
 8001898:	4343      	muls	r3, r0
 800189a:	0fdd      	lsrs	r5, r3, #31
 800189c:	18ed      	adds	r5, r5, r3
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	9802      	ldr	r0, [sp, #8]
 80018a2:	3301      	adds	r3, #1
 80018a4:	181b      	adds	r3, r3, r0
 80018a6:	106d      	asrs	r5, r5, #1
 80018a8:	42ab      	cmp	r3, r5
 80018aa:	d900      	bls.n	80018ae <__ssputs_r+0x3e>
 80018ac:	001d      	movs	r5, r3
 80018ae:	0553      	lsls	r3, r2, #21
 80018b0:	d532      	bpl.n	8001918 <__ssputs_r+0xa8>
 80018b2:	0029      	movs	r1, r5
 80018b4:	0038      	movs	r0, r7
 80018b6:	f000 fb53 	bl	8001f60 <_malloc_r>
 80018ba:	1e06      	subs	r6, r0, #0
 80018bc:	d109      	bne.n	80018d2 <__ssputs_r+0x62>
 80018be:	230c      	movs	r3, #12
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	2340      	movs	r3, #64	; 0x40
 80018c4:	2001      	movs	r0, #1
 80018c6:	89a2      	ldrh	r2, [r4, #12]
 80018c8:	4240      	negs	r0, r0
 80018ca:	4313      	orrs	r3, r2
 80018cc:	81a3      	strh	r3, [r4, #12]
 80018ce:	b005      	add	sp, #20
 80018d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d2:	9a02      	ldr	r2, [sp, #8]
 80018d4:	6921      	ldr	r1, [r4, #16]
 80018d6:	f000 faba 	bl	8001e4e <memcpy>
 80018da:	89a3      	ldrh	r3, [r4, #12]
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <__ssputs_r+0xc0>)
 80018de:	401a      	ands	r2, r3
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	4313      	orrs	r3, r2
 80018e4:	81a3      	strh	r3, [r4, #12]
 80018e6:	9b02      	ldr	r3, [sp, #8]
 80018e8:	6126      	str	r6, [r4, #16]
 80018ea:	18f6      	adds	r6, r6, r3
 80018ec:	6026      	str	r6, [r4, #0]
 80018ee:	6165      	str	r5, [r4, #20]
 80018f0:	9e01      	ldr	r6, [sp, #4]
 80018f2:	1aed      	subs	r5, r5, r3
 80018f4:	60a5      	str	r5, [r4, #8]
 80018f6:	9b01      	ldr	r3, [sp, #4]
 80018f8:	429e      	cmp	r6, r3
 80018fa:	d900      	bls.n	80018fe <__ssputs_r+0x8e>
 80018fc:	9e01      	ldr	r6, [sp, #4]
 80018fe:	0032      	movs	r2, r6
 8001900:	9903      	ldr	r1, [sp, #12]
 8001902:	6820      	ldr	r0, [r4, #0]
 8001904:	f000 faac 	bl	8001e60 <memmove>
 8001908:	68a3      	ldr	r3, [r4, #8]
 800190a:	2000      	movs	r0, #0
 800190c:	1b9b      	subs	r3, r3, r6
 800190e:	60a3      	str	r3, [r4, #8]
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	199e      	adds	r6, r3, r6
 8001914:	6026      	str	r6, [r4, #0]
 8001916:	e7da      	b.n	80018ce <__ssputs_r+0x5e>
 8001918:	002a      	movs	r2, r5
 800191a:	0038      	movs	r0, r7
 800191c:	f000 fb96 	bl	800204c <_realloc_r>
 8001920:	1e06      	subs	r6, r0, #0
 8001922:	d1e0      	bne.n	80018e6 <__ssputs_r+0x76>
 8001924:	0038      	movs	r0, r7
 8001926:	6921      	ldr	r1, [r4, #16]
 8001928:	f000 faae 	bl	8001e88 <_free_r>
 800192c:	e7c7      	b.n	80018be <__ssputs_r+0x4e>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	fffffb7f 	.word	0xfffffb7f

08001934 <_svfiprintf_r>:
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	b0a1      	sub	sp, #132	; 0x84
 8001938:	9003      	str	r0, [sp, #12]
 800193a:	001d      	movs	r5, r3
 800193c:	898b      	ldrh	r3, [r1, #12]
 800193e:	000f      	movs	r7, r1
 8001940:	0016      	movs	r6, r2
 8001942:	061b      	lsls	r3, r3, #24
 8001944:	d511      	bpl.n	800196a <_svfiprintf_r+0x36>
 8001946:	690b      	ldr	r3, [r1, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10e      	bne.n	800196a <_svfiprintf_r+0x36>
 800194c:	2140      	movs	r1, #64	; 0x40
 800194e:	f000 fb07 	bl	8001f60 <_malloc_r>
 8001952:	6038      	str	r0, [r7, #0]
 8001954:	6138      	str	r0, [r7, #16]
 8001956:	2800      	cmp	r0, #0
 8001958:	d105      	bne.n	8001966 <_svfiprintf_r+0x32>
 800195a:	230c      	movs	r3, #12
 800195c:	9a03      	ldr	r2, [sp, #12]
 800195e:	3801      	subs	r0, #1
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	b021      	add	sp, #132	; 0x84
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001966:	2340      	movs	r3, #64	; 0x40
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	2300      	movs	r3, #0
 800196c:	ac08      	add	r4, sp, #32
 800196e:	6163      	str	r3, [r4, #20]
 8001970:	3320      	adds	r3, #32
 8001972:	7663      	strb	r3, [r4, #25]
 8001974:	3310      	adds	r3, #16
 8001976:	76a3      	strb	r3, [r4, #26]
 8001978:	9507      	str	r5, [sp, #28]
 800197a:	0035      	movs	r5, r6
 800197c:	782b      	ldrb	r3, [r5, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <_svfiprintf_r+0x52>
 8001982:	2b25      	cmp	r3, #37	; 0x25
 8001984:	d147      	bne.n	8001a16 <_svfiprintf_r+0xe2>
 8001986:	1bab      	subs	r3, r5, r6
 8001988:	9305      	str	r3, [sp, #20]
 800198a:	42b5      	cmp	r5, r6
 800198c:	d00c      	beq.n	80019a8 <_svfiprintf_r+0x74>
 800198e:	0032      	movs	r2, r6
 8001990:	0039      	movs	r1, r7
 8001992:	9803      	ldr	r0, [sp, #12]
 8001994:	f7ff ff6c 	bl	8001870 <__ssputs_r>
 8001998:	1c43      	adds	r3, r0, #1
 800199a:	d100      	bne.n	800199e <_svfiprintf_r+0x6a>
 800199c:	e0ae      	b.n	8001afc <_svfiprintf_r+0x1c8>
 800199e:	6962      	ldr	r2, [r4, #20]
 80019a0:	9b05      	ldr	r3, [sp, #20]
 80019a2:	4694      	mov	ip, r2
 80019a4:	4463      	add	r3, ip
 80019a6:	6163      	str	r3, [r4, #20]
 80019a8:	782b      	ldrb	r3, [r5, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d100      	bne.n	80019b0 <_svfiprintf_r+0x7c>
 80019ae:	e0a5      	b.n	8001afc <_svfiprintf_r+0x1c8>
 80019b0:	2201      	movs	r2, #1
 80019b2:	2300      	movs	r3, #0
 80019b4:	4252      	negs	r2, r2
 80019b6:	6062      	str	r2, [r4, #4]
 80019b8:	a904      	add	r1, sp, #16
 80019ba:	3254      	adds	r2, #84	; 0x54
 80019bc:	1852      	adds	r2, r2, r1
 80019be:	1c6e      	adds	r6, r5, #1
 80019c0:	6023      	str	r3, [r4, #0]
 80019c2:	60e3      	str	r3, [r4, #12]
 80019c4:	60a3      	str	r3, [r4, #8]
 80019c6:	7013      	strb	r3, [r2, #0]
 80019c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80019ca:	2205      	movs	r2, #5
 80019cc:	7831      	ldrb	r1, [r6, #0]
 80019ce:	4854      	ldr	r0, [pc, #336]	; (8001b20 <_svfiprintf_r+0x1ec>)
 80019d0:	f000 fa32 	bl	8001e38 <memchr>
 80019d4:	1c75      	adds	r5, r6, #1
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d11f      	bne.n	8001a1a <_svfiprintf_r+0xe6>
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	06d3      	lsls	r3, r2, #27
 80019de:	d504      	bpl.n	80019ea <_svfiprintf_r+0xb6>
 80019e0:	2353      	movs	r3, #83	; 0x53
 80019e2:	a904      	add	r1, sp, #16
 80019e4:	185b      	adds	r3, r3, r1
 80019e6:	2120      	movs	r1, #32
 80019e8:	7019      	strb	r1, [r3, #0]
 80019ea:	0713      	lsls	r3, r2, #28
 80019ec:	d504      	bpl.n	80019f8 <_svfiprintf_r+0xc4>
 80019ee:	2353      	movs	r3, #83	; 0x53
 80019f0:	a904      	add	r1, sp, #16
 80019f2:	185b      	adds	r3, r3, r1
 80019f4:	212b      	movs	r1, #43	; 0x2b
 80019f6:	7019      	strb	r1, [r3, #0]
 80019f8:	7833      	ldrb	r3, [r6, #0]
 80019fa:	2b2a      	cmp	r3, #42	; 0x2a
 80019fc:	d016      	beq.n	8001a2c <_svfiprintf_r+0xf8>
 80019fe:	0035      	movs	r5, r6
 8001a00:	2100      	movs	r1, #0
 8001a02:	200a      	movs	r0, #10
 8001a04:	68e3      	ldr	r3, [r4, #12]
 8001a06:	782a      	ldrb	r2, [r5, #0]
 8001a08:	1c6e      	adds	r6, r5, #1
 8001a0a:	3a30      	subs	r2, #48	; 0x30
 8001a0c:	2a09      	cmp	r2, #9
 8001a0e:	d94e      	bls.n	8001aae <_svfiprintf_r+0x17a>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d111      	bne.n	8001a38 <_svfiprintf_r+0x104>
 8001a14:	e017      	b.n	8001a46 <_svfiprintf_r+0x112>
 8001a16:	3501      	adds	r5, #1
 8001a18:	e7b0      	b.n	800197c <_svfiprintf_r+0x48>
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <_svfiprintf_r+0x1ec>)
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	1ac0      	subs	r0, r0, r3
 8001a20:	2301      	movs	r3, #1
 8001a22:	4083      	lsls	r3, r0
 8001a24:	4313      	orrs	r3, r2
 8001a26:	002e      	movs	r6, r5
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	e7ce      	b.n	80019ca <_svfiprintf_r+0x96>
 8001a2c:	9b07      	ldr	r3, [sp, #28]
 8001a2e:	1d19      	adds	r1, r3, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	9107      	str	r1, [sp, #28]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db01      	blt.n	8001a3c <_svfiprintf_r+0x108>
 8001a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a3a:	e004      	b.n	8001a46 <_svfiprintf_r+0x112>
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	60e3      	str	r3, [r4, #12]
 8001a40:	2302      	movs	r3, #2
 8001a42:	4313      	orrs	r3, r2
 8001a44:	6023      	str	r3, [r4, #0]
 8001a46:	782b      	ldrb	r3, [r5, #0]
 8001a48:	2b2e      	cmp	r3, #46	; 0x2e
 8001a4a:	d10a      	bne.n	8001a62 <_svfiprintf_r+0x12e>
 8001a4c:	786b      	ldrb	r3, [r5, #1]
 8001a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a50:	d135      	bne.n	8001abe <_svfiprintf_r+0x18a>
 8001a52:	9b07      	ldr	r3, [sp, #28]
 8001a54:	3502      	adds	r5, #2
 8001a56:	1d1a      	adds	r2, r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	9207      	str	r2, [sp, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db2b      	blt.n	8001ab8 <_svfiprintf_r+0x184>
 8001a60:	9309      	str	r3, [sp, #36]	; 0x24
 8001a62:	4e30      	ldr	r6, [pc, #192]	; (8001b24 <_svfiprintf_r+0x1f0>)
 8001a64:	2203      	movs	r2, #3
 8001a66:	0030      	movs	r0, r6
 8001a68:	7829      	ldrb	r1, [r5, #0]
 8001a6a:	f000 f9e5 	bl	8001e38 <memchr>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d006      	beq.n	8001a80 <_svfiprintf_r+0x14c>
 8001a72:	2340      	movs	r3, #64	; 0x40
 8001a74:	1b80      	subs	r0, r0, r6
 8001a76:	4083      	lsls	r3, r0
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	3501      	adds	r5, #1
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	6023      	str	r3, [r4, #0]
 8001a80:	7829      	ldrb	r1, [r5, #0]
 8001a82:	2206      	movs	r2, #6
 8001a84:	4828      	ldr	r0, [pc, #160]	; (8001b28 <_svfiprintf_r+0x1f4>)
 8001a86:	1c6e      	adds	r6, r5, #1
 8001a88:	7621      	strb	r1, [r4, #24]
 8001a8a:	f000 f9d5 	bl	8001e38 <memchr>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d03c      	beq.n	8001b0c <_svfiprintf_r+0x1d8>
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <_svfiprintf_r+0x1f8>)
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d125      	bne.n	8001ae4 <_svfiprintf_r+0x1b0>
 8001a98:	2207      	movs	r2, #7
 8001a9a:	9b07      	ldr	r3, [sp, #28]
 8001a9c:	3307      	adds	r3, #7
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	3308      	adds	r3, #8
 8001aa2:	9307      	str	r3, [sp, #28]
 8001aa4:	6963      	ldr	r3, [r4, #20]
 8001aa6:	9a04      	ldr	r2, [sp, #16]
 8001aa8:	189b      	adds	r3, r3, r2
 8001aaa:	6163      	str	r3, [r4, #20]
 8001aac:	e765      	b.n	800197a <_svfiprintf_r+0x46>
 8001aae:	4343      	muls	r3, r0
 8001ab0:	0035      	movs	r5, r6
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	189b      	adds	r3, r3, r2
 8001ab6:	e7a6      	b.n	8001a06 <_svfiprintf_r+0xd2>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	425b      	negs	r3, r3
 8001abc:	e7d0      	b.n	8001a60 <_svfiprintf_r+0x12c>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	3501      	adds	r5, #1
 8001ac6:	6063      	str	r3, [r4, #4]
 8001ac8:	7829      	ldrb	r1, [r5, #0]
 8001aca:	1c6e      	adds	r6, r5, #1
 8001acc:	3930      	subs	r1, #48	; 0x30
 8001ace:	2909      	cmp	r1, #9
 8001ad0:	d903      	bls.n	8001ada <_svfiprintf_r+0x1a6>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0c5      	beq.n	8001a62 <_svfiprintf_r+0x12e>
 8001ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8001ad8:	e7c3      	b.n	8001a62 <_svfiprintf_r+0x12e>
 8001ada:	4342      	muls	r2, r0
 8001adc:	0035      	movs	r5, r6
 8001ade:	2301      	movs	r3, #1
 8001ae0:	1852      	adds	r2, r2, r1
 8001ae2:	e7f1      	b.n	8001ac8 <_svfiprintf_r+0x194>
 8001ae4:	ab07      	add	r3, sp, #28
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	003a      	movs	r2, r7
 8001aea:	0021      	movs	r1, r4
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <_svfiprintf_r+0x1fc>)
 8001aee:	9803      	ldr	r0, [sp, #12]
 8001af0:	e000      	b.n	8001af4 <_svfiprintf_r+0x1c0>
 8001af2:	bf00      	nop
 8001af4:	9004      	str	r0, [sp, #16]
 8001af6:	9b04      	ldr	r3, [sp, #16]
 8001af8:	3301      	adds	r3, #1
 8001afa:	d1d3      	bne.n	8001aa4 <_svfiprintf_r+0x170>
 8001afc:	89bb      	ldrh	r3, [r7, #12]
 8001afe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001b00:	065b      	lsls	r3, r3, #25
 8001b02:	d400      	bmi.n	8001b06 <_svfiprintf_r+0x1d2>
 8001b04:	e72d      	b.n	8001962 <_svfiprintf_r+0x2e>
 8001b06:	2001      	movs	r0, #1
 8001b08:	4240      	negs	r0, r0
 8001b0a:	e72a      	b.n	8001962 <_svfiprintf_r+0x2e>
 8001b0c:	ab07      	add	r3, sp, #28
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	003a      	movs	r2, r7
 8001b12:	0021      	movs	r1, r4
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <_svfiprintf_r+0x1fc>)
 8001b16:	9803      	ldr	r0, [sp, #12]
 8001b18:	f000 f87c 	bl	8001c14 <_printf_i>
 8001b1c:	e7ea      	b.n	8001af4 <_svfiprintf_r+0x1c0>
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	08002174 	.word	0x08002174
 8001b24:	0800217a 	.word	0x0800217a
 8001b28:	0800217e 	.word	0x0800217e
 8001b2c:	00000000 	.word	0x00000000
 8001b30:	08001871 	.word	0x08001871

08001b34 <_printf_common>:
 8001b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b36:	0015      	movs	r5, r2
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	688a      	ldr	r2, [r1, #8]
 8001b3c:	690b      	ldr	r3, [r1, #16]
 8001b3e:	000c      	movs	r4, r1
 8001b40:	9000      	str	r0, [sp, #0]
 8001b42:	4293      	cmp	r3, r2
 8001b44:	da00      	bge.n	8001b48 <_printf_common+0x14>
 8001b46:	0013      	movs	r3, r2
 8001b48:	0022      	movs	r2, r4
 8001b4a:	602b      	str	r3, [r5, #0]
 8001b4c:	3243      	adds	r2, #67	; 0x43
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	d001      	beq.n	8001b58 <_printf_common+0x24>
 8001b54:	3301      	adds	r3, #1
 8001b56:	602b      	str	r3, [r5, #0]
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	069b      	lsls	r3, r3, #26
 8001b5c:	d502      	bpl.n	8001b64 <_printf_common+0x30>
 8001b5e:	682b      	ldr	r3, [r5, #0]
 8001b60:	3302      	adds	r3, #2
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	2306      	movs	r3, #6
 8001b68:	0017      	movs	r7, r2
 8001b6a:	401f      	ands	r7, r3
 8001b6c:	421a      	tst	r2, r3
 8001b6e:	d027      	beq.n	8001bc0 <_printf_common+0x8c>
 8001b70:	0023      	movs	r3, r4
 8001b72:	3343      	adds	r3, #67	; 0x43
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	1e5a      	subs	r2, r3, #1
 8001b78:	4193      	sbcs	r3, r2
 8001b7a:	6822      	ldr	r2, [r4, #0]
 8001b7c:	0692      	lsls	r2, r2, #26
 8001b7e:	d430      	bmi.n	8001be2 <_printf_common+0xae>
 8001b80:	0022      	movs	r2, r4
 8001b82:	9901      	ldr	r1, [sp, #4]
 8001b84:	9800      	ldr	r0, [sp, #0]
 8001b86:	9e08      	ldr	r6, [sp, #32]
 8001b88:	3243      	adds	r2, #67	; 0x43
 8001b8a:	47b0      	blx	r6
 8001b8c:	1c43      	adds	r3, r0, #1
 8001b8e:	d025      	beq.n	8001bdc <_printf_common+0xa8>
 8001b90:	2306      	movs	r3, #6
 8001b92:	6820      	ldr	r0, [r4, #0]
 8001b94:	682a      	ldr	r2, [r5, #0]
 8001b96:	68e1      	ldr	r1, [r4, #12]
 8001b98:	2500      	movs	r5, #0
 8001b9a:	4003      	ands	r3, r0
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d103      	bne.n	8001ba8 <_printf_common+0x74>
 8001ba0:	1a8d      	subs	r5, r1, r2
 8001ba2:	43eb      	mvns	r3, r5
 8001ba4:	17db      	asrs	r3, r3, #31
 8001ba6:	401d      	ands	r5, r3
 8001ba8:	68a3      	ldr	r3, [r4, #8]
 8001baa:	6922      	ldr	r2, [r4, #16]
 8001bac:	4293      	cmp	r3, r2
 8001bae:	dd01      	ble.n	8001bb4 <_printf_common+0x80>
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	18ed      	adds	r5, r5, r3
 8001bb4:	2700      	movs	r7, #0
 8001bb6:	42bd      	cmp	r5, r7
 8001bb8:	d120      	bne.n	8001bfc <_printf_common+0xc8>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e010      	b.n	8001be0 <_printf_common+0xac>
 8001bbe:	3701      	adds	r7, #1
 8001bc0:	68e3      	ldr	r3, [r4, #12]
 8001bc2:	682a      	ldr	r2, [r5, #0]
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	42bb      	cmp	r3, r7
 8001bc8:	ddd2      	ble.n	8001b70 <_printf_common+0x3c>
 8001bca:	0022      	movs	r2, r4
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9901      	ldr	r1, [sp, #4]
 8001bd0:	9800      	ldr	r0, [sp, #0]
 8001bd2:	9e08      	ldr	r6, [sp, #32]
 8001bd4:	3219      	adds	r2, #25
 8001bd6:	47b0      	blx	r6
 8001bd8:	1c43      	adds	r3, r0, #1
 8001bda:	d1f0      	bne.n	8001bbe <_printf_common+0x8a>
 8001bdc:	2001      	movs	r0, #1
 8001bde:	4240      	negs	r0, r0
 8001be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001be2:	2030      	movs	r0, #48	; 0x30
 8001be4:	18e1      	adds	r1, r4, r3
 8001be6:	3143      	adds	r1, #67	; 0x43
 8001be8:	7008      	strb	r0, [r1, #0]
 8001bea:	0021      	movs	r1, r4
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	3145      	adds	r1, #69	; 0x45
 8001bf0:	7809      	ldrb	r1, [r1, #0]
 8001bf2:	18a2      	adds	r2, r4, r2
 8001bf4:	3243      	adds	r2, #67	; 0x43
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	7011      	strb	r1, [r2, #0]
 8001bfa:	e7c1      	b.n	8001b80 <_printf_common+0x4c>
 8001bfc:	0022      	movs	r2, r4
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9901      	ldr	r1, [sp, #4]
 8001c02:	9800      	ldr	r0, [sp, #0]
 8001c04:	9e08      	ldr	r6, [sp, #32]
 8001c06:	321a      	adds	r2, #26
 8001c08:	47b0      	blx	r6
 8001c0a:	1c43      	adds	r3, r0, #1
 8001c0c:	d0e6      	beq.n	8001bdc <_printf_common+0xa8>
 8001c0e:	3701      	adds	r7, #1
 8001c10:	e7d1      	b.n	8001bb6 <_printf_common+0x82>
	...

08001c14 <_printf_i>:
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b08b      	sub	sp, #44	; 0x2c
 8001c18:	9206      	str	r2, [sp, #24]
 8001c1a:	000a      	movs	r2, r1
 8001c1c:	3243      	adds	r2, #67	; 0x43
 8001c1e:	9307      	str	r3, [sp, #28]
 8001c20:	9005      	str	r0, [sp, #20]
 8001c22:	9204      	str	r2, [sp, #16]
 8001c24:	7e0a      	ldrb	r2, [r1, #24]
 8001c26:	000c      	movs	r4, r1
 8001c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001c2a:	2a78      	cmp	r2, #120	; 0x78
 8001c2c:	d807      	bhi.n	8001c3e <_printf_i+0x2a>
 8001c2e:	2a62      	cmp	r2, #98	; 0x62
 8001c30:	d809      	bhi.n	8001c46 <_printf_i+0x32>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d100      	bne.n	8001c38 <_printf_i+0x24>
 8001c36:	e0c1      	b.n	8001dbc <_printf_i+0x1a8>
 8001c38:	2a58      	cmp	r2, #88	; 0x58
 8001c3a:	d100      	bne.n	8001c3e <_printf_i+0x2a>
 8001c3c:	e08c      	b.n	8001d58 <_printf_i+0x144>
 8001c3e:	0026      	movs	r6, r4
 8001c40:	3642      	adds	r6, #66	; 0x42
 8001c42:	7032      	strb	r2, [r6, #0]
 8001c44:	e022      	b.n	8001c8c <_printf_i+0x78>
 8001c46:	0010      	movs	r0, r2
 8001c48:	3863      	subs	r0, #99	; 0x63
 8001c4a:	2815      	cmp	r0, #21
 8001c4c:	d8f7      	bhi.n	8001c3e <_printf_i+0x2a>
 8001c4e:	f7fe fa59 	bl	8000104 <__gnu_thumb1_case_shi>
 8001c52:	0016      	.short	0x0016
 8001c54:	fff6001f 	.word	0xfff6001f
 8001c58:	fff6fff6 	.word	0xfff6fff6
 8001c5c:	001ffff6 	.word	0x001ffff6
 8001c60:	fff6fff6 	.word	0xfff6fff6
 8001c64:	fff6fff6 	.word	0xfff6fff6
 8001c68:	003600a8 	.word	0x003600a8
 8001c6c:	fff6009a 	.word	0xfff6009a
 8001c70:	00b9fff6 	.word	0x00b9fff6
 8001c74:	0036fff6 	.word	0x0036fff6
 8001c78:	fff6fff6 	.word	0xfff6fff6
 8001c7c:	009e      	.short	0x009e
 8001c7e:	0026      	movs	r6, r4
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	3642      	adds	r6, #66	; 0x42
 8001c84:	1d11      	adds	r1, r2, #4
 8001c86:	6019      	str	r1, [r3, #0]
 8001c88:	6813      	ldr	r3, [r2, #0]
 8001c8a:	7033      	strb	r3, [r6, #0]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0a7      	b.n	8001de0 <_printf_i+0x1cc>
 8001c90:	6808      	ldr	r0, [r1, #0]
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	1d0a      	adds	r2, r1, #4
 8001c96:	0605      	lsls	r5, r0, #24
 8001c98:	d50b      	bpl.n	8001cb2 <_printf_i+0x9e>
 8001c9a:	680d      	ldr	r5, [r1, #0]
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	da03      	bge.n	8001caa <_printf_i+0x96>
 8001ca2:	232d      	movs	r3, #45	; 0x2d
 8001ca4:	9a04      	ldr	r2, [sp, #16]
 8001ca6:	426d      	negs	r5, r5
 8001ca8:	7013      	strb	r3, [r2, #0]
 8001caa:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <_printf_i+0x21c>)
 8001cac:	270a      	movs	r7, #10
 8001cae:	9303      	str	r3, [sp, #12]
 8001cb0:	e01b      	b.n	8001cea <_printf_i+0xd6>
 8001cb2:	680d      	ldr	r5, [r1, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	0641      	lsls	r1, r0, #25
 8001cb8:	d5f1      	bpl.n	8001c9e <_printf_i+0x8a>
 8001cba:	b22d      	sxth	r5, r5
 8001cbc:	e7ef      	b.n	8001c9e <_printf_i+0x8a>
 8001cbe:	680d      	ldr	r5, [r1, #0]
 8001cc0:	6819      	ldr	r1, [r3, #0]
 8001cc2:	1d08      	adds	r0, r1, #4
 8001cc4:	6018      	str	r0, [r3, #0]
 8001cc6:	062e      	lsls	r6, r5, #24
 8001cc8:	d501      	bpl.n	8001cce <_printf_i+0xba>
 8001cca:	680d      	ldr	r5, [r1, #0]
 8001ccc:	e003      	b.n	8001cd6 <_printf_i+0xc2>
 8001cce:	066d      	lsls	r5, r5, #25
 8001cd0:	d5fb      	bpl.n	8001cca <_printf_i+0xb6>
 8001cd2:	680d      	ldr	r5, [r1, #0]
 8001cd4:	b2ad      	uxth	r5, r5
 8001cd6:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <_printf_i+0x21c>)
 8001cd8:	2708      	movs	r7, #8
 8001cda:	9303      	str	r3, [sp, #12]
 8001cdc:	2a6f      	cmp	r2, #111	; 0x6f
 8001cde:	d000      	beq.n	8001ce2 <_printf_i+0xce>
 8001ce0:	3702      	adds	r7, #2
 8001ce2:	0023      	movs	r3, r4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	3343      	adds	r3, #67	; 0x43
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	60a3      	str	r3, [r4, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db03      	blt.n	8001cfa <_printf_i+0xe6>
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	6821      	ldr	r1, [r4, #0]
 8001cf6:	4391      	bics	r1, r2
 8001cf8:	6021      	str	r1, [r4, #0]
 8001cfa:	2d00      	cmp	r5, #0
 8001cfc:	d102      	bne.n	8001d04 <_printf_i+0xf0>
 8001cfe:	9e04      	ldr	r6, [sp, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00c      	beq.n	8001d1e <_printf_i+0x10a>
 8001d04:	9e04      	ldr	r6, [sp, #16]
 8001d06:	0028      	movs	r0, r5
 8001d08:	0039      	movs	r1, r7
 8001d0a:	f7fe fa8b 	bl	8000224 <__aeabi_uidivmod>
 8001d0e:	9b03      	ldr	r3, [sp, #12]
 8001d10:	3e01      	subs	r6, #1
 8001d12:	5c5b      	ldrb	r3, [r3, r1]
 8001d14:	7033      	strb	r3, [r6, #0]
 8001d16:	002b      	movs	r3, r5
 8001d18:	0005      	movs	r5, r0
 8001d1a:	429f      	cmp	r7, r3
 8001d1c:	d9f3      	bls.n	8001d06 <_printf_i+0xf2>
 8001d1e:	2f08      	cmp	r7, #8
 8001d20:	d109      	bne.n	8001d36 <_printf_i+0x122>
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	07db      	lsls	r3, r3, #31
 8001d26:	d506      	bpl.n	8001d36 <_printf_i+0x122>
 8001d28:	6863      	ldr	r3, [r4, #4]
 8001d2a:	6922      	ldr	r2, [r4, #16]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	dc02      	bgt.n	8001d36 <_printf_i+0x122>
 8001d30:	2330      	movs	r3, #48	; 0x30
 8001d32:	3e01      	subs	r6, #1
 8001d34:	7033      	strb	r3, [r6, #0]
 8001d36:	9b04      	ldr	r3, [sp, #16]
 8001d38:	1b9b      	subs	r3, r3, r6
 8001d3a:	6123      	str	r3, [r4, #16]
 8001d3c:	9b07      	ldr	r3, [sp, #28]
 8001d3e:	0021      	movs	r1, r4
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	9805      	ldr	r0, [sp, #20]
 8001d44:	9b06      	ldr	r3, [sp, #24]
 8001d46:	aa09      	add	r2, sp, #36	; 0x24
 8001d48:	f7ff fef4 	bl	8001b34 <_printf_common>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	d14c      	bne.n	8001dea <_printf_i+0x1d6>
 8001d50:	2001      	movs	r0, #1
 8001d52:	4240      	negs	r0, r0
 8001d54:	b00b      	add	sp, #44	; 0x2c
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d58:	3145      	adds	r1, #69	; 0x45
 8001d5a:	700a      	strb	r2, [r1, #0]
 8001d5c:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <_printf_i+0x21c>)
 8001d5e:	9203      	str	r2, [sp, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	6821      	ldr	r1, [r4, #0]
 8001d64:	ca20      	ldmia	r2!, {r5}
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	0608      	lsls	r0, r1, #24
 8001d6a:	d516      	bpl.n	8001d9a <_printf_i+0x186>
 8001d6c:	07cb      	lsls	r3, r1, #31
 8001d6e:	d502      	bpl.n	8001d76 <_printf_i+0x162>
 8001d70:	2320      	movs	r3, #32
 8001d72:	4319      	orrs	r1, r3
 8001d74:	6021      	str	r1, [r4, #0]
 8001d76:	2710      	movs	r7, #16
 8001d78:	2d00      	cmp	r5, #0
 8001d7a:	d1b2      	bne.n	8001ce2 <_printf_i+0xce>
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	439a      	bics	r2, r3
 8001d82:	6022      	str	r2, [r4, #0]
 8001d84:	e7ad      	b.n	8001ce2 <_printf_i+0xce>
 8001d86:	2220      	movs	r2, #32
 8001d88:	6809      	ldr	r1, [r1, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	6022      	str	r2, [r4, #0]
 8001d8e:	0022      	movs	r2, r4
 8001d90:	2178      	movs	r1, #120	; 0x78
 8001d92:	3245      	adds	r2, #69	; 0x45
 8001d94:	7011      	strb	r1, [r2, #0]
 8001d96:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <_printf_i+0x220>)
 8001d98:	e7e1      	b.n	8001d5e <_printf_i+0x14a>
 8001d9a:	0648      	lsls	r0, r1, #25
 8001d9c:	d5e6      	bpl.n	8001d6c <_printf_i+0x158>
 8001d9e:	b2ad      	uxth	r5, r5
 8001da0:	e7e4      	b.n	8001d6c <_printf_i+0x158>
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	680d      	ldr	r5, [r1, #0]
 8001da6:	1d10      	adds	r0, r2, #4
 8001da8:	6949      	ldr	r1, [r1, #20]
 8001daa:	6018      	str	r0, [r3, #0]
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	062e      	lsls	r6, r5, #24
 8001db0:	d501      	bpl.n	8001db6 <_printf_i+0x1a2>
 8001db2:	6019      	str	r1, [r3, #0]
 8001db4:	e002      	b.n	8001dbc <_printf_i+0x1a8>
 8001db6:	066d      	lsls	r5, r5, #25
 8001db8:	d5fb      	bpl.n	8001db2 <_printf_i+0x19e>
 8001dba:	8019      	strh	r1, [r3, #0]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9e04      	ldr	r6, [sp, #16]
 8001dc0:	6123      	str	r3, [r4, #16]
 8001dc2:	e7bb      	b.n	8001d3c <_printf_i+0x128>
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	1d11      	adds	r1, r2, #4
 8001dc8:	6019      	str	r1, [r3, #0]
 8001dca:	6816      	ldr	r6, [r2, #0]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	0030      	movs	r0, r6
 8001dd0:	6862      	ldr	r2, [r4, #4]
 8001dd2:	f000 f831 	bl	8001e38 <memchr>
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d001      	beq.n	8001dde <_printf_i+0x1ca>
 8001dda:	1b80      	subs	r0, r0, r6
 8001ddc:	6060      	str	r0, [r4, #4]
 8001dde:	6863      	ldr	r3, [r4, #4]
 8001de0:	6123      	str	r3, [r4, #16]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9a04      	ldr	r2, [sp, #16]
 8001de6:	7013      	strb	r3, [r2, #0]
 8001de8:	e7a8      	b.n	8001d3c <_printf_i+0x128>
 8001dea:	6923      	ldr	r3, [r4, #16]
 8001dec:	0032      	movs	r2, r6
 8001dee:	9906      	ldr	r1, [sp, #24]
 8001df0:	9805      	ldr	r0, [sp, #20]
 8001df2:	9d07      	ldr	r5, [sp, #28]
 8001df4:	47a8      	blx	r5
 8001df6:	1c43      	adds	r3, r0, #1
 8001df8:	d0aa      	beq.n	8001d50 <_printf_i+0x13c>
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	079b      	lsls	r3, r3, #30
 8001dfe:	d415      	bmi.n	8001e2c <_printf_i+0x218>
 8001e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e02:	68e0      	ldr	r0, [r4, #12]
 8001e04:	4298      	cmp	r0, r3
 8001e06:	daa5      	bge.n	8001d54 <_printf_i+0x140>
 8001e08:	0018      	movs	r0, r3
 8001e0a:	e7a3      	b.n	8001d54 <_printf_i+0x140>
 8001e0c:	0022      	movs	r2, r4
 8001e0e:	2301      	movs	r3, #1
 8001e10:	9906      	ldr	r1, [sp, #24]
 8001e12:	9805      	ldr	r0, [sp, #20]
 8001e14:	9e07      	ldr	r6, [sp, #28]
 8001e16:	3219      	adds	r2, #25
 8001e18:	47b0      	blx	r6
 8001e1a:	1c43      	adds	r3, r0, #1
 8001e1c:	d098      	beq.n	8001d50 <_printf_i+0x13c>
 8001e1e:	3501      	adds	r5, #1
 8001e20:	68e3      	ldr	r3, [r4, #12]
 8001e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	42ab      	cmp	r3, r5
 8001e28:	dcf0      	bgt.n	8001e0c <_printf_i+0x1f8>
 8001e2a:	e7e9      	b.n	8001e00 <_printf_i+0x1ec>
 8001e2c:	2500      	movs	r5, #0
 8001e2e:	e7f7      	b.n	8001e20 <_printf_i+0x20c>
 8001e30:	08002185 	.word	0x08002185
 8001e34:	08002196 	.word	0x08002196

08001e38 <memchr>:
 8001e38:	b2c9      	uxtb	r1, r1
 8001e3a:	1882      	adds	r2, r0, r2
 8001e3c:	4290      	cmp	r0, r2
 8001e3e:	d101      	bne.n	8001e44 <memchr+0xc>
 8001e40:	2000      	movs	r0, #0
 8001e42:	4770      	bx	lr
 8001e44:	7803      	ldrb	r3, [r0, #0]
 8001e46:	428b      	cmp	r3, r1
 8001e48:	d0fb      	beq.n	8001e42 <memchr+0xa>
 8001e4a:	3001      	adds	r0, #1
 8001e4c:	e7f6      	b.n	8001e3c <memchr+0x4>

08001e4e <memcpy>:
 8001e4e:	2300      	movs	r3, #0
 8001e50:	b510      	push	{r4, lr}
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d100      	bne.n	8001e58 <memcpy+0xa>
 8001e56:	bd10      	pop	{r4, pc}
 8001e58:	5ccc      	ldrb	r4, [r1, r3]
 8001e5a:	54c4      	strb	r4, [r0, r3]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	e7f8      	b.n	8001e52 <memcpy+0x4>

08001e60 <memmove>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	4288      	cmp	r0, r1
 8001e64:	d902      	bls.n	8001e6c <memmove+0xc>
 8001e66:	188b      	adds	r3, r1, r2
 8001e68:	4298      	cmp	r0, r3
 8001e6a:	d303      	bcc.n	8001e74 <memmove+0x14>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e007      	b.n	8001e80 <memmove+0x20>
 8001e70:	5c8b      	ldrb	r3, [r1, r2]
 8001e72:	5483      	strb	r3, [r0, r2]
 8001e74:	3a01      	subs	r2, #1
 8001e76:	d2fb      	bcs.n	8001e70 <memmove+0x10>
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	5ccc      	ldrb	r4, [r1, r3]
 8001e7c:	54c4      	strb	r4, [r0, r3]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1fa      	bne.n	8001e7a <memmove+0x1a>
 8001e84:	e7f8      	b.n	8001e78 <memmove+0x18>
	...

08001e88 <_free_r>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	0005      	movs	r5, r0
 8001e8c:	2900      	cmp	r1, #0
 8001e8e:	d010      	beq.n	8001eb2 <_free_r+0x2a>
 8001e90:	1f0c      	subs	r4, r1, #4
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da00      	bge.n	8001e9a <_free_r+0x12>
 8001e98:	18e4      	adds	r4, r4, r3
 8001e9a:	0028      	movs	r0, r5
 8001e9c:	f000 f918 	bl	80020d0 <__malloc_lock>
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <_free_r+0x90>)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <_free_r+0x2c>
 8001ea8:	6063      	str	r3, [r4, #4]
 8001eaa:	6014      	str	r4, [r2, #0]
 8001eac:	0028      	movs	r0, r5
 8001eae:	f000 f917 	bl	80020e0 <__malloc_unlock>
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
 8001eb4:	42a3      	cmp	r3, r4
 8001eb6:	d908      	bls.n	8001eca <_free_r+0x42>
 8001eb8:	6821      	ldr	r1, [r4, #0]
 8001eba:	1860      	adds	r0, r4, r1
 8001ebc:	4283      	cmp	r3, r0
 8001ebe:	d1f3      	bne.n	8001ea8 <_free_r+0x20>
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	1841      	adds	r1, r0, r1
 8001ec6:	6021      	str	r1, [r4, #0]
 8001ec8:	e7ee      	b.n	8001ea8 <_free_r+0x20>
 8001eca:	001a      	movs	r2, r3
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <_free_r+0x4e>
 8001ed2:	42a3      	cmp	r3, r4
 8001ed4:	d9f9      	bls.n	8001eca <_free_r+0x42>
 8001ed6:	6811      	ldr	r1, [r2, #0]
 8001ed8:	1850      	adds	r0, r2, r1
 8001eda:	42a0      	cmp	r0, r4
 8001edc:	d10b      	bne.n	8001ef6 <_free_r+0x6e>
 8001ede:	6820      	ldr	r0, [r4, #0]
 8001ee0:	1809      	adds	r1, r1, r0
 8001ee2:	1850      	adds	r0, r2, r1
 8001ee4:	6011      	str	r1, [r2, #0]
 8001ee6:	4283      	cmp	r3, r0
 8001ee8:	d1e0      	bne.n	8001eac <_free_r+0x24>
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	1841      	adds	r1, r0, r1
 8001ef0:	6011      	str	r1, [r2, #0]
 8001ef2:	6053      	str	r3, [r2, #4]
 8001ef4:	e7da      	b.n	8001eac <_free_r+0x24>
 8001ef6:	42a0      	cmp	r0, r4
 8001ef8:	d902      	bls.n	8001f00 <_free_r+0x78>
 8001efa:	230c      	movs	r3, #12
 8001efc:	602b      	str	r3, [r5, #0]
 8001efe:	e7d5      	b.n	8001eac <_free_r+0x24>
 8001f00:	6821      	ldr	r1, [r4, #0]
 8001f02:	1860      	adds	r0, r4, r1
 8001f04:	4283      	cmp	r3, r0
 8001f06:	d103      	bne.n	8001f10 <_free_r+0x88>
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	1841      	adds	r1, r0, r1
 8001f0e:	6021      	str	r1, [r4, #0]
 8001f10:	6063      	str	r3, [r4, #4]
 8001f12:	6054      	str	r4, [r2, #4]
 8001f14:	e7ca      	b.n	8001eac <_free_r+0x24>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	20000098 	.word	0x20000098

08001f1c <sbrk_aligned>:
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	4e0f      	ldr	r6, [pc, #60]	; (8001f5c <sbrk_aligned+0x40>)
 8001f20:	000d      	movs	r5, r1
 8001f22:	6831      	ldr	r1, [r6, #0]
 8001f24:	0004      	movs	r4, r0
 8001f26:	2900      	cmp	r1, #0
 8001f28:	d102      	bne.n	8001f30 <sbrk_aligned+0x14>
 8001f2a:	f000 f8bf 	bl	80020ac <_sbrk_r>
 8001f2e:	6030      	str	r0, [r6, #0]
 8001f30:	0029      	movs	r1, r5
 8001f32:	0020      	movs	r0, r4
 8001f34:	f000 f8ba 	bl	80020ac <_sbrk_r>
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d00a      	beq.n	8001f52 <sbrk_aligned+0x36>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	1cc5      	adds	r5, r0, #3
 8001f40:	439d      	bics	r5, r3
 8001f42:	42a8      	cmp	r0, r5
 8001f44:	d007      	beq.n	8001f56 <sbrk_aligned+0x3a>
 8001f46:	1a29      	subs	r1, r5, r0
 8001f48:	0020      	movs	r0, r4
 8001f4a:	f000 f8af 	bl	80020ac <_sbrk_r>
 8001f4e:	1c43      	adds	r3, r0, #1
 8001f50:	d101      	bne.n	8001f56 <sbrk_aligned+0x3a>
 8001f52:	2501      	movs	r5, #1
 8001f54:	426d      	negs	r5, r5
 8001f56:	0028      	movs	r0, r5
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	2000009c 	.word	0x2000009c

08001f60 <_malloc_r>:
 8001f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f62:	2203      	movs	r2, #3
 8001f64:	1ccb      	adds	r3, r1, #3
 8001f66:	4393      	bics	r3, r2
 8001f68:	3308      	adds	r3, #8
 8001f6a:	0006      	movs	r6, r0
 8001f6c:	001f      	movs	r7, r3
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d232      	bcs.n	8001fd8 <_malloc_r+0x78>
 8001f72:	270c      	movs	r7, #12
 8001f74:	42b9      	cmp	r1, r7
 8001f76:	d831      	bhi.n	8001fdc <_malloc_r+0x7c>
 8001f78:	0030      	movs	r0, r6
 8001f7a:	f000 f8a9 	bl	80020d0 <__malloc_lock>
 8001f7e:	4d32      	ldr	r5, [pc, #200]	; (8002048 <_malloc_r+0xe8>)
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	001c      	movs	r4, r3
 8001f84:	2c00      	cmp	r4, #0
 8001f86:	d12e      	bne.n	8001fe6 <_malloc_r+0x86>
 8001f88:	0039      	movs	r1, r7
 8001f8a:	0030      	movs	r0, r6
 8001f8c:	f7ff ffc6 	bl	8001f1c <sbrk_aligned>
 8001f90:	0004      	movs	r4, r0
 8001f92:	1c43      	adds	r3, r0, #1
 8001f94:	d11e      	bne.n	8001fd4 <_malloc_r+0x74>
 8001f96:	682c      	ldr	r4, [r5, #0]
 8001f98:	0025      	movs	r5, r4
 8001f9a:	2d00      	cmp	r5, #0
 8001f9c:	d14a      	bne.n	8002034 <_malloc_r+0xd4>
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	0029      	movs	r1, r5
 8001fa2:	18e3      	adds	r3, r4, r3
 8001fa4:	0030      	movs	r0, r6
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	f000 f880 	bl	80020ac <_sbrk_r>
 8001fac:	9b01      	ldr	r3, [sp, #4]
 8001fae:	4283      	cmp	r3, r0
 8001fb0:	d143      	bne.n	800203a <_malloc_r+0xda>
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	3703      	adds	r7, #3
 8001fb6:	1aff      	subs	r7, r7, r3
 8001fb8:	2303      	movs	r3, #3
 8001fba:	439f      	bics	r7, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	2f0c      	cmp	r7, #12
 8001fc0:	d200      	bcs.n	8001fc4 <_malloc_r+0x64>
 8001fc2:	270c      	movs	r7, #12
 8001fc4:	0039      	movs	r1, r7
 8001fc6:	0030      	movs	r0, r6
 8001fc8:	f7ff ffa8 	bl	8001f1c <sbrk_aligned>
 8001fcc:	1c43      	adds	r3, r0, #1
 8001fce:	d034      	beq.n	800203a <_malloc_r+0xda>
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	19df      	adds	r7, r3, r7
 8001fd4:	6027      	str	r7, [r4, #0]
 8001fd6:	e013      	b.n	8002000 <_malloc_r+0xa0>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	dacb      	bge.n	8001f74 <_malloc_r+0x14>
 8001fdc:	230c      	movs	r3, #12
 8001fde:	2500      	movs	r5, #0
 8001fe0:	6033      	str	r3, [r6, #0]
 8001fe2:	0028      	movs	r0, r5
 8001fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	1bd1      	subs	r1, r2, r7
 8001fea:	d420      	bmi.n	800202e <_malloc_r+0xce>
 8001fec:	290b      	cmp	r1, #11
 8001fee:	d917      	bls.n	8002020 <_malloc_r+0xc0>
 8001ff0:	19e2      	adds	r2, r4, r7
 8001ff2:	6027      	str	r7, [r4, #0]
 8001ff4:	42a3      	cmp	r3, r4
 8001ff6:	d111      	bne.n	800201c <_malloc_r+0xbc>
 8001ff8:	602a      	str	r2, [r5, #0]
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	6011      	str	r1, [r2, #0]
 8001ffe:	6053      	str	r3, [r2, #4]
 8002000:	0030      	movs	r0, r6
 8002002:	0025      	movs	r5, r4
 8002004:	f000 f86c 	bl	80020e0 <__malloc_unlock>
 8002008:	2207      	movs	r2, #7
 800200a:	350b      	adds	r5, #11
 800200c:	1d23      	adds	r3, r4, #4
 800200e:	4395      	bics	r5, r2
 8002010:	1aea      	subs	r2, r5, r3
 8002012:	429d      	cmp	r5, r3
 8002014:	d0e5      	beq.n	8001fe2 <_malloc_r+0x82>
 8002016:	1b5b      	subs	r3, r3, r5
 8002018:	50a3      	str	r3, [r4, r2]
 800201a:	e7e2      	b.n	8001fe2 <_malloc_r+0x82>
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	e7ec      	b.n	8001ffa <_malloc_r+0x9a>
 8002020:	6862      	ldr	r2, [r4, #4]
 8002022:	42a3      	cmp	r3, r4
 8002024:	d101      	bne.n	800202a <_malloc_r+0xca>
 8002026:	602a      	str	r2, [r5, #0]
 8002028:	e7ea      	b.n	8002000 <_malloc_r+0xa0>
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	e7e8      	b.n	8002000 <_malloc_r+0xa0>
 800202e:	0023      	movs	r3, r4
 8002030:	6864      	ldr	r4, [r4, #4]
 8002032:	e7a7      	b.n	8001f84 <_malloc_r+0x24>
 8002034:	002c      	movs	r4, r5
 8002036:	686d      	ldr	r5, [r5, #4]
 8002038:	e7af      	b.n	8001f9a <_malloc_r+0x3a>
 800203a:	230c      	movs	r3, #12
 800203c:	0030      	movs	r0, r6
 800203e:	6033      	str	r3, [r6, #0]
 8002040:	f000 f84e 	bl	80020e0 <__malloc_unlock>
 8002044:	e7cd      	b.n	8001fe2 <_malloc_r+0x82>
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	20000098 	.word	0x20000098

0800204c <_realloc_r>:
 800204c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800204e:	0007      	movs	r7, r0
 8002050:	000e      	movs	r6, r1
 8002052:	0014      	movs	r4, r2
 8002054:	2900      	cmp	r1, #0
 8002056:	d105      	bne.n	8002064 <_realloc_r+0x18>
 8002058:	0011      	movs	r1, r2
 800205a:	f7ff ff81 	bl	8001f60 <_malloc_r>
 800205e:	0005      	movs	r5, r0
 8002060:	0028      	movs	r0, r5
 8002062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002064:	2a00      	cmp	r2, #0
 8002066:	d103      	bne.n	8002070 <_realloc_r+0x24>
 8002068:	f7ff ff0e 	bl	8001e88 <_free_r>
 800206c:	0025      	movs	r5, r4
 800206e:	e7f7      	b.n	8002060 <_realloc_r+0x14>
 8002070:	f000 f83e 	bl	80020f0 <_malloc_usable_size_r>
 8002074:	9001      	str	r0, [sp, #4]
 8002076:	4284      	cmp	r4, r0
 8002078:	d803      	bhi.n	8002082 <_realloc_r+0x36>
 800207a:	0035      	movs	r5, r6
 800207c:	0843      	lsrs	r3, r0, #1
 800207e:	42a3      	cmp	r3, r4
 8002080:	d3ee      	bcc.n	8002060 <_realloc_r+0x14>
 8002082:	0021      	movs	r1, r4
 8002084:	0038      	movs	r0, r7
 8002086:	f7ff ff6b 	bl	8001f60 <_malloc_r>
 800208a:	1e05      	subs	r5, r0, #0
 800208c:	d0e8      	beq.n	8002060 <_realloc_r+0x14>
 800208e:	9b01      	ldr	r3, [sp, #4]
 8002090:	0022      	movs	r2, r4
 8002092:	429c      	cmp	r4, r3
 8002094:	d900      	bls.n	8002098 <_realloc_r+0x4c>
 8002096:	001a      	movs	r2, r3
 8002098:	0031      	movs	r1, r6
 800209a:	0028      	movs	r0, r5
 800209c:	f7ff fed7 	bl	8001e4e <memcpy>
 80020a0:	0031      	movs	r1, r6
 80020a2:	0038      	movs	r0, r7
 80020a4:	f7ff fef0 	bl	8001e88 <_free_r>
 80020a8:	e7da      	b.n	8002060 <_realloc_r+0x14>
	...

080020ac <_sbrk_r>:
 80020ac:	2300      	movs	r3, #0
 80020ae:	b570      	push	{r4, r5, r6, lr}
 80020b0:	4d06      	ldr	r5, [pc, #24]	; (80020cc <_sbrk_r+0x20>)
 80020b2:	0004      	movs	r4, r0
 80020b4:	0008      	movs	r0, r1
 80020b6:	602b      	str	r3, [r5, #0]
 80020b8:	f7fe fc06 	bl	80008c8 <_sbrk>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	d103      	bne.n	80020c8 <_sbrk_r+0x1c>
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d000      	beq.n	80020c8 <_sbrk_r+0x1c>
 80020c6:	6023      	str	r3, [r4, #0]
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	200000a0 	.word	0x200000a0

080020d0 <__malloc_lock>:
 80020d0:	b510      	push	{r4, lr}
 80020d2:	4802      	ldr	r0, [pc, #8]	; (80020dc <__malloc_lock+0xc>)
 80020d4:	f000 f814 	bl	8002100 <__retarget_lock_acquire_recursive>
 80020d8:	bd10      	pop	{r4, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	200000a4 	.word	0x200000a4

080020e0 <__malloc_unlock>:
 80020e0:	b510      	push	{r4, lr}
 80020e2:	4802      	ldr	r0, [pc, #8]	; (80020ec <__malloc_unlock+0xc>)
 80020e4:	f000 f80d 	bl	8002102 <__retarget_lock_release_recursive>
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	200000a4 	.word	0x200000a4

080020f0 <_malloc_usable_size_r>:
 80020f0:	1f0b      	subs	r3, r1, #4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1f18      	subs	r0, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da01      	bge.n	80020fe <_malloc_usable_size_r+0xe>
 80020fa:	580b      	ldr	r3, [r1, r0]
 80020fc:	18c0      	adds	r0, r0, r3
 80020fe:	4770      	bx	lr

08002100 <__retarget_lock_acquire_recursive>:
 8002100:	4770      	bx	lr

08002102 <__retarget_lock_release_recursive>:
 8002102:	4770      	bx	lr

08002104 <_init>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr

08002110 <_fini>:
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002116:	bc08      	pop	{r3}
 8002118:	469e      	mov	lr, r3
 800211a:	4770      	bx	lr
