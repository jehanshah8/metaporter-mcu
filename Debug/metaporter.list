
metaporter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a0c  08002a0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a0c  08002a0c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a0c  08002a0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002a84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002a84  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037aa  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011d1  00000000  00000000  00023842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00024a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000398  00000000  00000000  00024e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad16  00000000  00000000  00025200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005def  00000000  00000000  0003ff16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c77e  00000000  00000000  00045d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001674  00000000  00000000  000e24d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002860 	.word	0x08002860

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08002860 	.word	0x08002860

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <Keypad_Init>:
// Keypad will be configured in such a way that
// Row will be the output and the Column will be the input
// @Param = None
// @ReturnVal = None
void Keypad_Init()
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b092      	sub	sp, #72	; 0x48
 8000234:	af00      	add	r7, sp, #0
	//Port setup
	//enable GPIOA RCC
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000236:	4b44      	ldr	r3, [pc, #272]	; (8000348 <Keypad_Init+0x118>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b43      	ldr	r3, [pc, #268]	; (8000348 <Keypad_Init+0x118>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0289      	lsls	r1, r1, #10
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
	/* Enable SYSCFG clock */
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);


	// Setting up row for output high
	for (int idx = 0; idx < KEYPAD_ROW_SIZE; idx++)
 8000244:	2300      	movs	r3, #0
 8000246:	647b      	str	r3, [r7, #68]	; 0x44
 8000248:	e02f      	b.n	80002aa <Keypad_Init+0x7a>
	{
		GPIO_InitTypeDef RowDefault =
		{
				.Pin = kpPinout.Rows[idx].GPIO_Pin,
 800024a:	4a40      	ldr	r2, [pc, #256]	; (800034c <Keypad_Init+0x11c>)
 800024c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800024e:	00db      	lsls	r3, r3, #3
 8000250:	18d3      	adds	r3, r2, r3
 8000252:	3304      	adds	r3, #4
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	001a      	movs	r2, r3
		GPIO_InitTypeDef RowDefault =
 8000258:	2118      	movs	r1, #24
 800025a:	187b      	adds	r3, r7, r1
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	187b      	adds	r3, r7, r1
 8000260:	2201      	movs	r2, #1
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	187b      	adds	r3, r7, r1
 8000266:	2201      	movs	r2, #1
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	187b      	adds	r3, r7, r1
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	187b      	adds	r3, r7, r1
 8000272:	2200      	movs	r2, #0
 8000274:	611a      	str	r2, [r3, #16]
				.Mode = GPIO_MODE_OUTPUT_PP,
				.Pull = GPIO_PULLUP,
				.Speed = GPIO_SPEED_FREQ_LOW,
				.Alternate = 0
		};
		HAL_GPIO_Init(kpPinout.Rows[idx].GPIOx,&RowDefault);
 8000276:	4b35      	ldr	r3, [pc, #212]	; (800034c <Keypad_Init+0x11c>)
 8000278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800027a:	00d2      	lsls	r2, r2, #3
 800027c:	58d3      	ldr	r3, [r2, r3]
 800027e:	187a      	adds	r2, r7, r1
 8000280:	0011      	movs	r1, r2
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fbea 	bl	8000a5c <HAL_GPIO_Init>

		// Toggles to high for output
		HAL_GPIO_WritePin(kpPinout.Rows[idx].GPIOx,kpPinout.Rows[idx].GPIO_Pin,GPIO_PIN_SET);
 8000288:	4b30      	ldr	r3, [pc, #192]	; (800034c <Keypad_Init+0x11c>)
 800028a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800028c:	00d2      	lsls	r2, r2, #3
 800028e:	58d0      	ldr	r0, [r2, r3]
 8000290:	4a2e      	ldr	r2, [pc, #184]	; (800034c <Keypad_Init+0x11c>)
 8000292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000294:	00db      	lsls	r3, r3, #3
 8000296:	18d3      	adds	r3, r2, r3
 8000298:	3304      	adds	r3, #4
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	2201      	movs	r2, #1
 800029e:	0019      	movs	r1, r3
 80002a0:	f000 fd71 	bl	8000d86 <HAL_GPIO_WritePin>
	for (int idx = 0; idx < KEYPAD_ROW_SIZE; idx++)
 80002a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002a6:	3301      	adds	r3, #1
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
 80002aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002ac:	2b03      	cmp	r3, #3
 80002ae:	ddcc      	ble.n	800024a <Keypad_Init+0x1a>


	}

	// Setting up col for input
	for (int idx = 0; idx < KEYPAD_COL_SIZE; idx++)
 80002b0:	2300      	movs	r3, #0
 80002b2:	643b      	str	r3, [r7, #64]	; 0x40
 80002b4:	e022      	b.n	80002fc <Keypad_Init+0xcc>
	{
			GPIO_InitTypeDef ColDefault =
			{
					.Pin = kpPinout.Cols[idx].GPIO_Pin,
 80002b6:	4a25      	ldr	r2, [pc, #148]	; (800034c <Keypad_Init+0x11c>)
 80002b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002ba:	3304      	adds	r3, #4
 80002bc:	00db      	lsls	r3, r3, #3
 80002be:	18d3      	adds	r3, r2, r3
 80002c0:	3304      	adds	r3, #4
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	001a      	movs	r2, r3
			GPIO_InitTypeDef ColDefault =
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2202      	movs	r2, #2
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
					.Mode = GPIO_MODE_INPUT,
					.Pull = GPIO_PULLDOWN,
					.Speed = GPIO_SPEED_FREQ_LOW,
					.Alternate = 0
			};
			HAL_GPIO_Init(kpPinout.Cols[idx].GPIOx,&ColDefault);
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <Keypad_Init+0x11c>)
 80002e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80002e6:	3204      	adds	r2, #4
 80002e8:	00d2      	lsls	r2, r2, #3
 80002ea:	58d3      	ldr	r3, [r2, r3]
 80002ec:	1d3a      	adds	r2, r7, #4
 80002ee:	0011      	movs	r1, r2
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 fbb3 	bl	8000a5c <HAL_GPIO_Init>
	for (int idx = 0; idx < KEYPAD_COL_SIZE; idx++)
 80002f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002f8:	3301      	adds	r3, #1
 80002fa:	643b      	str	r3, [r7, #64]	; 0x40
 80002fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002fe:	2b03      	cmp	r3, #3
 8000300:	ddd9      	ble.n	80002b6 <Keypad_Init+0x86>
	}

	//Setup EXTI interrupts
	GPIO_InitTypeDef IrqDefault =
				{
						.Pin = kpPinout.IrqPin.GPIO_Pin,
 8000302:	2380      	movs	r3, #128	; 0x80
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	001a      	movs	r2, r3
	GPIO_InitTypeDef IrqDefault =
 8000308:	212c      	movs	r1, #44	; 0x2c
 800030a:	187b      	adds	r3, r7, r1
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2288      	movs	r2, #136	; 0x88
 8000312:	0352      	lsls	r2, r2, #13
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
	*/

	//If priority needs to be changed, values range from 0-3, where 0 is the highest priority
	//HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2U, 0);

	HAL_GPIO_Init(kpPinout.IrqPin.GPIOx,&IrqDefault);
 8000328:	2390      	movs	r3, #144	; 0x90
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	187a      	adds	r2, r7, r1
 800032e:	0011      	movs	r1, r2
 8000330:	0018      	movs	r0, r3
 8000332:	f000 fb93 	bl	8000a5c <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(kpPinout.IrqIdx);
 8000336:	2307      	movs	r3, #7
 8000338:	b25b      	sxtb	r3, r3
 800033a:	0018      	movs	r0, r3
 800033c:	f000 fb71 	bl	8000a22 <HAL_NVIC_EnableIRQ>
	//NVIC->ISER[0] = (1<<EXTI4_15_IRQn);

}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b012      	add	sp, #72	; 0x48
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40021000 	.word	0x40021000
 800034c:	080028c0 	.word	0x080028c0

08000350 <Keypad_Scan>:
// Scans the keypad to find any outputs
// This is the function to invoke in a IRQ or Timer routine (TBD)
// @Param returnChar = returns the keypad option if keypad is pressed
// @ReturnVal = the status of keypad, 0 for not pressed and 1 for pressed
int Keypad_Scan(char* returnChar)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	int KeyNotPressed = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	613b      	str	r3, [r7, #16]
	int KeyPressed = 1;
 800035c:	2301      	movs	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]

	for (int colIdx = 0; colIdx < KEYPAD_COL_SIZE; colIdx++)
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	e02d      	b.n	80003c2 <Keypad_Scan+0x72>
	{
		// If the column pin input is pulled high (registered press)
		if (HAL_GPIO_ReadPin(kpPinout.Cols[colIdx].GPIOx,kpPinout.Cols[colIdx].GPIO_Pin))
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <Keypad_Scan+0x84>)
 8000368:	697a      	ldr	r2, [r7, #20]
 800036a:	3204      	adds	r2, #4
 800036c:	00d2      	lsls	r2, r2, #3
 800036e:	58d0      	ldr	r0, [r2, r3]
 8000370:	4a18      	ldr	r2, [pc, #96]	; (80003d4 <Keypad_Scan+0x84>)
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	3304      	adds	r3, #4
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	18d3      	adds	r3, r2, r3
 800037a:	3304      	adds	r3, #4
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	0019      	movs	r1, r3
 8000380:	f000 fce4 	bl	8000d4c <HAL_GPIO_ReadPin>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d019      	beq.n	80003bc <Keypad_Scan+0x6c>
		{
			int rowIdx = Keypad_Search_Row(colIdx);
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	0018      	movs	r0, r3
 800038c:	f000 f82c 	bl	80003e8 <Keypad_Search_Row>
 8000390:	0003      	movs	r3, r0
 8000392:	60bb      	str	r3, [r7, #8]
			assert(rowIdx != -1);
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	3301      	adds	r3, #1
 8000398:	d105      	bne.n	80003a6 <Keypad_Scan+0x56>
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <Keypad_Scan+0x88>)
 800039c:	4a0f      	ldr	r2, [pc, #60]	; (80003dc <Keypad_Scan+0x8c>)
 800039e:	4810      	ldr	r0, [pc, #64]	; (80003e0 <Keypad_Scan+0x90>)
 80003a0:	2168      	movs	r1, #104	; 0x68
 80003a2:	f001 f9ed 	bl	8001780 <__assert_func>
			*returnChar = KeyPadMatrix[rowIdx][colIdx];
 80003a6:	4a0f      	ldr	r2, [pc, #60]	; (80003e4 <Keypad_Scan+0x94>)
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	18d2      	adds	r2, r2, r3
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	18d3      	adds	r3, r2, r3
 80003b2:	781a      	ldrb	r2, [r3, #0]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	701a      	strb	r2, [r3, #0]
			return KeyPressed;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	e006      	b.n	80003ca <Keypad_Scan+0x7a>
	for (int colIdx = 0; colIdx < KEYPAD_COL_SIZE; colIdx++)
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	3301      	adds	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	ddce      	ble.n	8000366 <Keypad_Scan+0x16>
		}

	}

	return KeyNotPressed;
 80003c8:	693b      	ldr	r3, [r7, #16]
}
 80003ca:	0018      	movs	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b006      	add	sp, #24
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	080028c0 	.word	0x080028c0
 80003d8:	08002878 	.word	0x08002878
 80003dc:	0800291c 	.word	0x0800291c
 80003e0:	08002888 	.word	0x08002888
 80003e4:	0800290c 	.word	0x0800290c

080003e8 <Keypad_Search_Row>:
// Helper function of Keypad_Scan
// toggleConfig goes from 1000, 0100, 0010, 0001 to test out the button read
// @Param colIdx = column index that registered a button pressed
// @ReturnVal = the row index that registered a button pressed , -1 for state of error
int Keypad_Search_Row(int colIdx)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	int retVal = -1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	425b      	negs	r3, r3
 80003f4:	61fb      	str	r3, [r7, #28]

	// Column pin config goes from 1000, 0100, 0010, to 0001
	for (int toggleConfig = 0; toggleConfig < KEYPAD_ROW_SIZE; toggleConfig++)
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	e03a      	b.n	8000472 <Keypad_Search_Row+0x8a>
	{
		// Going through each row pins to set the output signal logic
		for(int idx = 0; idx < KEYPAD_ROW_SIZE; idx++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	e01d      	b.n	800043e <Keypad_Search_Row+0x56>
		{
			uint8_t BitState = GPIO_PIN_RESET; // 0u
 8000402:	2113      	movs	r1, #19
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
			if(idx == toggleConfig) BitState = GPIO_PIN_SET; // 1u
 800040a:	697a      	ldr	r2, [r7, #20]
 800040c:	69bb      	ldr	r3, [r7, #24]
 800040e:	429a      	cmp	r2, r3
 8000410:	d102      	bne.n	8000418 <Keypad_Search_Row+0x30>
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(kpPinout.Rows[idx].GPIOx,kpPinout.Rows[idx].GPIO_Pin,BitState);
 8000418:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <Keypad_Search_Row+0xc8>)
 800041a:	697a      	ldr	r2, [r7, #20]
 800041c:	00d2      	lsls	r2, r2, #3
 800041e:	58d0      	ldr	r0, [r2, r3]
 8000420:	4a23      	ldr	r2, [pc, #140]	; (80004b0 <Keypad_Search_Row+0xc8>)
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	00db      	lsls	r3, r3, #3
 8000426:	18d3      	adds	r3, r2, r3
 8000428:	3304      	adds	r3, #4
 800042a:	8819      	ldrh	r1, [r3, #0]
 800042c:	2313      	movs	r3, #19
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	001a      	movs	r2, r3
 8000434:	f000 fca7 	bl	8000d86 <HAL_GPIO_WritePin>
		for(int idx = 0; idx < KEYPAD_ROW_SIZE; idx++)
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	3301      	adds	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	2b03      	cmp	r3, #3
 8000442:	ddde      	ble.n	8000402 <Keypad_Search_Row+0x1a>

		}

		// If the column pin input is still registered as high, (found the corresponding row pin)
		if (HAL_GPIO_ReadPin(kpPinout.Cols[colIdx].GPIOx,kpPinout.Cols[colIdx].GPIO_Pin))
 8000444:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <Keypad_Search_Row+0xc8>)
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	3204      	adds	r2, #4
 800044a:	00d2      	lsls	r2, r2, #3
 800044c:	58d0      	ldr	r0, [r2, r3]
 800044e:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <Keypad_Search_Row+0xc8>)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3304      	adds	r3, #4
 8000454:	00db      	lsls	r3, r3, #3
 8000456:	18d3      	adds	r3, r2, r3
 8000458:	3304      	adds	r3, #4
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	0019      	movs	r1, r3
 800045e:	f000 fc75 	bl	8000d4c <HAL_GPIO_ReadPin>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d002      	beq.n	800046c <Keypad_Search_Row+0x84>
		{
			retVal = toggleConfig;
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	61fb      	str	r3, [r7, #28]
			break;
 800046a:	e005      	b.n	8000478 <Keypad_Search_Row+0x90>
	for (int toggleConfig = 0; toggleConfig < KEYPAD_ROW_SIZE; toggleConfig++)
 800046c:	69bb      	ldr	r3, [r7, #24]
 800046e:	3301      	adds	r3, #1
 8000470:	61bb      	str	r3, [r7, #24]
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	2b03      	cmp	r3, #3
 8000476:	ddc1      	ble.n	80003fc <Keypad_Search_Row+0x14>
		}
	}

	//Reset all row output pins to high
	for (int idx = 0; idx < KEYPAD_ROW_SIZE; idx++)
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	e010      	b.n	80004a0 <Keypad_Search_Row+0xb8>
	{
		HAL_GPIO_WritePin(kpPinout.Rows[idx].GPIOx,kpPinout.Rows[idx].GPIO_Pin,GPIO_PIN_SET);
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <Keypad_Search_Row+0xc8>)
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	00d2      	lsls	r2, r2, #3
 8000484:	58d0      	ldr	r0, [r2, r3]
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <Keypad_Search_Row+0xc8>)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	00db      	lsls	r3, r3, #3
 800048c:	18d3      	adds	r3, r2, r3
 800048e:	3304      	adds	r3, #4
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	2201      	movs	r2, #1
 8000494:	0019      	movs	r1, r3
 8000496:	f000 fc76 	bl	8000d86 <HAL_GPIO_WritePin>
	for (int idx = 0; idx < KEYPAD_ROW_SIZE; idx++)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3301      	adds	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	2b03      	cmp	r3, #3
 80004a4:	ddeb      	ble.n	800047e <Keypad_Search_Row+0x96>
	}

	return retVal;
 80004a6:	69fb      	ldr	r3, [r7, #28]
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b008      	add	sp, #32
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	080028c0 	.word	0x080028c0

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 f98e 	bl	80007d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f818 	bl	80004f0 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  Keypad_Init();
 80004c0:	f7ff feb6 	bl	8000230 <Keypad_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80004c4:	e7fe      	b.n	80004c4 <main+0x10>

080004c6 <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	0002      	movs	r2, r0
 80004ce:	1dbb      	adds	r3, r7, #6
 80004d0:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_8){
 80004d2:	1dbb      	adds	r3, r7, #6
 80004d4:	881a      	ldrh	r2, [r3, #0]
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	429a      	cmp	r2, r3
 80004dc:	d104      	bne.n	80004e8 <HAL_GPIO_EXTI_Callback+0x22>
		char buttonVal;
		if(Keypad_Scan(&buttonVal))
 80004de:	230f      	movs	r3, #15
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff ff34 	bl	8000350 <Keypad_Scan>
		{
			//fprintf("%c",buttonVal);
		}
	}
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b004      	add	sp, #16
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b093      	sub	sp, #76	; 0x4c
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	2414      	movs	r4, #20
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2334      	movs	r3, #52	; 0x34
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f001 f995 	bl	8001830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	0018      	movs	r0, r3
 800050a:	2310      	movs	r3, #16
 800050c:	001a      	movs	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	f001 f98e 	bl	8001830 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2220      	movs	r2, #32
 8000518:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2201      	movs	r2, #1
 800051e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	193b      	adds	r3, r7, r4
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fc49 	bl	8000dc0 <HAL_RCC_OscConfig>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000532:	f000 f819 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2207      	movs	r2, #7
 800053a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2203      	movs	r2, #3
 8000540:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2101      	movs	r1, #1
 8000552:	0018      	movs	r0, r3
 8000554:	f000 ffba 	bl	80014cc <HAL_RCC_ClockConfig>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800055c:	f000 f804 	bl	8000568 <Error_Handler>
  }
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b013      	add	sp, #76	; 0x4c
 8000566:	bd90      	pop	{r4, r7, pc}

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	699a      	ldr	r2, [r3, #24]
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	2101      	movs	r1, #1
 8000582:	430a      	orrs	r2, r1
 8000584:	619a      	str	r2, [r3, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	2201      	movs	r2, #1
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	69da      	ldr	r2, [r3, #28]
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	0549      	lsls	r1, r1, #21
 800059c:	430a      	orrs	r2, r1
 800059e:	61da      	str	r2, [r3, #28]
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_MspInit+0x44>)
 80005a2:	69da      	ldr	r2, [r3, #28]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	055b      	lsls	r3, r3, #21
 80005a8:	4013      	ands	r3, r2
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000

080005bc <EXTI4_15_IRQHandler>:
/******************************************************************************/
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/

void EXTI4_15_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	0018      	movs	r0, r3
 80005c6:	f7ff ff7e 	bl	80004c6 <HAL_GPIO_EXTI_Callback>

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <NMI_Handler+0x4>

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f000 f938 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
	return 1;
 8000602:	2301      	movs	r3, #1
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <_kill>:

int _kill(int pid, int sig)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000614:	f001 f8d2 	bl	80017bc <__errno>
 8000618:	0003      	movs	r3, r0
 800061a:	2216      	movs	r2, #22
 800061c:	601a      	str	r2, [r3, #0]
	return -1;
 800061e:	2301      	movs	r3, #1
 8000620:	425b      	negs	r3, r3
}
 8000622:	0018      	movs	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}

0800062a <_exit>:

void _exit (int status)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000632:	2301      	movs	r3, #1
 8000634:	425a      	negs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ffe5 	bl	800060a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000640:	e7fe      	b.n	8000640 <_exit+0x16>

08000642 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e00a      	b.n	800066a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000654:	e000      	b.n	8000658 <_read+0x16>
 8000656:	bf00      	nop
 8000658:	0001      	movs	r1, r0
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	60ba      	str	r2, [r7, #8]
 8000660:	b2ca      	uxtb	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	3301      	adds	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	429a      	cmp	r2, r3
 8000670:	dbf0      	blt.n	8000654 <_read+0x12>
	}

return len;
 8000672:	687b      	ldr	r3, [r7, #4]
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b006      	add	sp, #24
 800067a:	bd80      	pop	{r7, pc}

0800067c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	e009      	b.n	80006a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	60ba      	str	r2, [r7, #8]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	0018      	movs	r0, r3
 8000698:	e000      	b.n	800069c <_write+0x20>
 800069a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	3301      	adds	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	dbf1      	blt.n	800068e <_write+0x12>
	}
	return len;
 80006aa:	687b      	ldr	r3, [r7, #4]
}
 80006ac:	0018      	movs	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b006      	add	sp, #24
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_close>:

int _close(int file)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	return -1;
 80006bc:	2301      	movs	r3, #1
 80006be:	425b      	negs	r3, r3
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0192      	lsls	r2, r2, #6
 80006d8:	605a      	str	r2, [r3, #4]
	return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_isatty>:

int _isatty(int file)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	return 1;
 80006ec:	2301      	movs	r3, #1
}
 80006ee:	0018      	movs	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b004      	add	sp, #16
 800070a:	bd80      	pop	{r7, pc}

0800070c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <_sbrk+0x5c>)
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <_sbrk+0x60>)
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d102      	bne.n	800072e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <_sbrk+0x64>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <_sbrk+0x68>)
 800072c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	18d3      	adds	r3, r2, r3
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d207      	bcs.n	800074c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800073c:	f001 f83e 	bl	80017bc <__errno>
 8000740:	0003      	movs	r3, r0
 8000742:	220c      	movs	r2, #12
 8000744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000746:	2301      	movs	r3, #1
 8000748:	425b      	negs	r3, r3
 800074a:	e009      	b.n	8000760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	18d2      	adds	r2, r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <_sbrk+0x64>)
 800075c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	b006      	add	sp, #24
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20008000 	.word	0x20008000
 800076c:	00000400 	.word	0x00000400
 8000770:	2000008c 	.word	0x2000008c
 8000774:	200000a8 	.word	0x200000a8

08000778 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000786:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800078a:	490e      	ldr	r1, [pc, #56]	; (80007c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800078c:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <LoopForever+0xe>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a0:	4c0b      	ldr	r4, [pc, #44]	; (80007d0 <LoopForever+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007ae:	f7ff ffe3 	bl	8000778 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007b2:	f001 f819 	bl	80017e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b6:	f7ff fe7d 	bl	80004b4 <main>

080007ba <LoopForever>:

LoopForever:
    b LoopForever
 80007ba:	e7fe      	b.n	80007ba <LoopForever>
  ldr   r0, =_estack
 80007bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007c8:	08002a14 	.word	0x08002a14
  ldr r2, =_sbss
 80007cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007d0:	200000a4 	.word	0x200000a4

080007d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_COMP_IRQHandler>
	...

080007d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <HAL_Init+0x24>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_Init+0x24>)
 80007e2:	2110      	movs	r1, #16
 80007e4:	430a      	orrs	r2, r1
 80007e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f809 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ee:	f7ff fec1 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40022000 	.word	0x40022000

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <HAL_InitTick+0x5c>)
 800080a:	681c      	ldr	r4, [r3, #0]
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_InitTick+0x60>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	0019      	movs	r1, r3
 8000812:	23fa      	movs	r3, #250	; 0xfa
 8000814:	0098      	lsls	r0, r3, #2
 8000816:	f7ff fc7f 	bl	8000118 <__udivsi3>
 800081a:	0003      	movs	r3, r0
 800081c:	0019      	movs	r1, r3
 800081e:	0020      	movs	r0, r4
 8000820:	f7ff fc7a 	bl	8000118 <__udivsi3>
 8000824:	0003      	movs	r3, r0
 8000826:	0018      	movs	r0, r3
 8000828:	f000 f90b 	bl	8000a42 <HAL_SYSTICK_Config>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	e00f      	b.n	8000854 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d80b      	bhi.n	8000852 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	2301      	movs	r3, #1
 800083e:	425b      	negs	r3, r3
 8000840:	2200      	movs	r2, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f8d8 	bl	80009f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_InitTick+0x64>)
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	b003      	add	sp, #12
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	20000000 	.word	0x20000000
 8000860:	20000008 	.word	0x20000008
 8000864:	20000004 	.word	0x20000004

08000868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x1c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	001a      	movs	r2, r3
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x20>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	18d2      	adds	r2, r2, r3
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_IncTick+0x20>)
 800087a:	601a      	str	r2, [r3, #0]
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000008 	.word	0x20000008
 8000888:	20000090 	.word	0x20000090

0800088c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b02      	ldr	r3, [pc, #8]	; (800089c <HAL_GetTick+0x10>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	20000090 	.word	0x20000090

080008a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	0002      	movs	r2, r0
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b7f      	cmp	r3, #127	; 0x7f
 80008b2:	d809      	bhi.n	80008c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	001a      	movs	r2, r3
 80008ba:	231f      	movs	r3, #31
 80008bc:	401a      	ands	r2, r3
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_EnableIRQ+0x30>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	4091      	lsls	r1, r2
 80008c4:	000a      	movs	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]
  }
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	0002      	movs	r2, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b7f      	cmp	r3, #127	; 0x7f
 80008e8:	d828      	bhi.n	800093c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ea:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <__NVIC_SetPriority+0xd4>)
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	33c0      	adds	r3, #192	; 0xc0
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	589b      	ldr	r3, [r3, r2]
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0011      	movs	r1, r2
 8000900:	2203      	movs	r2, #3
 8000902:	400a      	ands	r2, r1
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	21ff      	movs	r1, #255	; 0xff
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	22ff      	movs	r2, #255	; 0xff
 8000918:	401a      	ands	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	2303      	movs	r3, #3
 8000922:	4003      	ands	r3, r0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	481f      	ldr	r0, [pc, #124]	; (80009a8 <__NVIC_SetPriority+0xd4>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b25b      	sxtb	r3, r3
 8000930:	089b      	lsrs	r3, r3, #2
 8000932:	430a      	orrs	r2, r1
 8000934:	33c0      	adds	r3, #192	; 0xc0
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800093a:	e031      	b.n	80009a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <__NVIC_SetPriority+0xd8>)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	0019      	movs	r1, r3
 8000944:	230f      	movs	r3, #15
 8000946:	400b      	ands	r3, r1
 8000948:	3b08      	subs	r3, #8
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	3306      	adds	r3, #6
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	3304      	adds	r3, #4
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	1dfa      	adds	r2, r7, #7
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	0011      	movs	r1, r2
 800095c:	2203      	movs	r2, #3
 800095e:	400a      	ands	r2, r1
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	21ff      	movs	r1, #255	; 0xff
 8000964:	4091      	lsls	r1, r2
 8000966:	000a      	movs	r2, r1
 8000968:	43d2      	mvns	r2, r2
 800096a:	401a      	ands	r2, r3
 800096c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	019b      	lsls	r3, r3, #6
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	401a      	ands	r2, r3
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	0018      	movs	r0, r3
 800097c:	2303      	movs	r3, #3
 800097e:	4003      	ands	r3, r0
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <__NVIC_SetPriority+0xd8>)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	001c      	movs	r4, r3
 800098c:	230f      	movs	r3, #15
 800098e:	4023      	ands	r3, r4
 8000990:	3b08      	subs	r3, #8
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	430a      	orrs	r2, r1
 8000996:	3306      	adds	r3, #6
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	18c3      	adds	r3, r0, r3
 800099c:	3304      	adds	r3, #4
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b003      	add	sp, #12
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	1e5a      	subs	r2, r3, #1
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	045b      	lsls	r3, r3, #17
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d301      	bcc.n	80009c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c4:	2301      	movs	r3, #1
 80009c6:	e010      	b.n	80009ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <SysTick_Config+0x44>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	3a01      	subs	r2, #1
 80009ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d0:	2301      	movs	r3, #1
 80009d2:	425b      	negs	r3, r3
 80009d4:	2103      	movs	r1, #3
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff ff7c 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Config+0x44>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Config+0x44>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	0018      	movs	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	210f      	movs	r1, #15
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	1c02      	adds	r2, r0, #0
 8000a08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ff5d 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	0002      	movs	r2, r0
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff ff33 	bl	80008a0 <__NVIC_EnableIRQ>
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff ffaf 	bl	80009b0 <SysTick_Config>
 8000a52:	0003      	movs	r3, r0
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6a:	e155      	b.n	8000d18 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	4091      	lsls	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d100      	bne.n	8000a84 <HAL_GPIO_Init+0x28>
 8000a82:	e146      	b.n	8000d12 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2203      	movs	r2, #3
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d005      	beq.n	8000a9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2203      	movs	r2, #3
 8000a96:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d130      	bne.n	8000afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	0013      	movs	r3, r2
 8000aac:	43da      	mvns	r2, r3
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	409a      	lsls	r2, r3
 8000abe:	0013      	movs	r3, r2
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	091b      	lsrs	r3, r3, #4
 8000ae8:	2201      	movs	r2, #1
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2203      	movs	r2, #3
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d017      	beq.n	8000b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	409a      	lsls	r2, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2203      	movs	r2, #3
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d123      	bne.n	8000b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	08da      	lsrs	r2, r3, #3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3208      	adds	r2, #8
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	58d3      	ldr	r3, [r2, r3]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	2207      	movs	r2, #7
 8000b58:	4013      	ands	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2107      	movs	r1, #7
 8000b72:	400b      	ands	r3, r1
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	08da      	lsrs	r2, r3, #3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3208      	adds	r2, #8
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	6939      	ldr	r1, [r7, #16]
 8000b8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2203      	movs	r2, #3
 8000bac:	401a      	ands	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	23c0      	movs	r3, #192	; 0xc0
 8000bc8:	029b      	lsls	r3, r3, #10
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d100      	bne.n	8000bd0 <HAL_GPIO_Init+0x174>
 8000bce:	e0a0      	b.n	8000d12 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	4b57      	ldr	r3, [pc, #348]	; (8000d30 <HAL_GPIO_Init+0x2d4>)
 8000bd2:	699a      	ldr	r2, [r3, #24]
 8000bd4:	4b56      	ldr	r3, [pc, #344]	; (8000d30 <HAL_GPIO_Init+0x2d4>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	619a      	str	r2, [r3, #24]
 8000bdc:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <HAL_GPIO_Init+0x2d4>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	2201      	movs	r2, #1
 8000be2:	4013      	ands	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000be8:	4a52      	ldr	r2, [pc, #328]	; (8000d34 <HAL_GPIO_Init+0x2d8>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	589b      	ldr	r3, [r3, r2]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	409a      	lsls	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	43da      	mvns	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	2390      	movs	r3, #144	; 0x90
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d019      	beq.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a47      	ldr	r2, [pc, #284]	; (8000d38 <HAL_GPIO_Init+0x2dc>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d013      	beq.n	8000c46 <HAL_GPIO_Init+0x1ea>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a46      	ldr	r2, [pc, #280]	; (8000d3c <HAL_GPIO_Init+0x2e0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d00d      	beq.n	8000c42 <HAL_GPIO_Init+0x1e6>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a45      	ldr	r2, [pc, #276]	; (8000d40 <HAL_GPIO_Init+0x2e4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d007      	beq.n	8000c3e <HAL_GPIO_Init+0x1e2>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a44      	ldr	r2, [pc, #272]	; (8000d44 <HAL_GPIO_Init+0x2e8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_GPIO_Init+0x1de>
 8000c36:	2304      	movs	r3, #4
 8000c38:	e008      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e004      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c42:	2302      	movs	r3, #2
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	2103      	movs	r1, #3
 8000c50:	400a      	ands	r2, r1
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	4093      	lsls	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5c:	4935      	ldr	r1, [pc, #212]	; (8000d34 <HAL_GPIO_Init+0x2d8>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c6a:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	025b      	lsls	r3, r3, #9
 8000c82:	4013      	ands	r3, r2
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	029b      	lsls	r3, r3, #10
 8000cac:	4013      	ands	r3, r2
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	035b      	lsls	r3, r3, #13
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43da      	mvns	r2, r3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	039b      	lsls	r3, r3, #14
 8000d00:	4013      	ands	r3, r2
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	40da      	lsrs	r2, r3
 8000d20:	1e13      	subs	r3, r2, #0
 8000d22:	d000      	beq.n	8000d26 <HAL_GPIO_Init+0x2ca>
 8000d24:	e6a2      	b.n	8000a6c <HAL_GPIO_Init+0x10>
  } 
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b006      	add	sp, #24
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	48000c00 	.word	0x48000c00
 8000d44:	48001000 	.word	0x48001000
 8000d48:	40010400 	.word	0x40010400

08000d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	000a      	movs	r2, r1
 8000d56:	1cbb      	adds	r3, r7, #2
 8000d58:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	1cba      	adds	r2, r7, #2
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	4013      	ands	r3, r2
 8000d64:	d004      	beq.n	8000d70 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000d66:	230f      	movs	r3, #15
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e003      	b.n	8000d78 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d70:	230f      	movs	r3, #15
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000d78:	230f      	movs	r3, #15
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	781b      	ldrb	r3, [r3, #0]
  }
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	0008      	movs	r0, r1
 8000d90:	0011      	movs	r1, r2
 8000d92:	1cbb      	adds	r3, r7, #2
 8000d94:	1c02      	adds	r2, r0, #0
 8000d96:	801a      	strh	r2, [r3, #0]
 8000d98:	1c7b      	adds	r3, r7, #1
 8000d9a:	1c0a      	adds	r2, r1, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d9e:	1c7b      	adds	r3, r7, #1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da6:	1cbb      	adds	r3, r7, #2
 8000da8:	881a      	ldrh	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dae:	e003      	b.n	8000db8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db0:	1cbb      	adds	r3, r7, #2
 8000db2:	881a      	ldrh	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b002      	add	sp, #8
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d102      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f000 fb76 	bl	80014c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d100      	bne.n	8000de0 <HAL_RCC_OscConfig+0x20>
 8000dde:	e08e      	b.n	8000efe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000de0:	4bc5      	ldr	r3, [pc, #788]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	220c      	movs	r2, #12
 8000de6:	4013      	ands	r3, r2
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d00e      	beq.n	8000e0a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dec:	4bc2      	ldr	r3, [pc, #776]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	220c      	movs	r2, #12
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d117      	bne.n	8000e28 <HAL_RCC_OscConfig+0x68>
 8000df8:	4bbf      	ldr	r3, [pc, #764]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	23c0      	movs	r3, #192	; 0xc0
 8000dfe:	025b      	lsls	r3, r3, #9
 8000e00:	401a      	ands	r2, r3
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d10e      	bne.n	8000e28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0a:	4bbb      	ldr	r3, [pc, #748]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	029b      	lsls	r3, r3, #10
 8000e12:	4013      	ands	r3, r2
 8000e14:	d100      	bne.n	8000e18 <HAL_RCC_OscConfig+0x58>
 8000e16:	e071      	b.n	8000efc <HAL_RCC_OscConfig+0x13c>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d000      	beq.n	8000e22 <HAL_RCC_OscConfig+0x62>
 8000e20:	e06c      	b.n	8000efc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f000 fb4c 	bl	80014c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d107      	bne.n	8000e40 <HAL_RCC_OscConfig+0x80>
 8000e30:	4bb1      	ldr	r3, [pc, #708]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4bb0      	ldr	r3, [pc, #704]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e02f      	b.n	8000ea0 <HAL_RCC_OscConfig+0xe0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10c      	bne.n	8000e62 <HAL_RCC_OscConfig+0xa2>
 8000e48:	4bab      	ldr	r3, [pc, #684]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4baa      	ldr	r3, [pc, #680]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e4e:	49ab      	ldr	r1, [pc, #684]	; (80010fc <HAL_RCC_OscConfig+0x33c>)
 8000e50:	400a      	ands	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	4ba8      	ldr	r3, [pc, #672]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4ba7      	ldr	r3, [pc, #668]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	49a9      	ldr	r1, [pc, #676]	; (8001100 <HAL_RCC_OscConfig+0x340>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e01e      	b.n	8000ea0 <HAL_RCC_OscConfig+0xe0>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	d10e      	bne.n	8000e88 <HAL_RCC_OscConfig+0xc8>
 8000e6a:	4ba3      	ldr	r3, [pc, #652]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4ba2      	ldr	r3, [pc, #648]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	02c9      	lsls	r1, r1, #11
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	4b9f      	ldr	r3, [pc, #636]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b9e      	ldr	r3, [pc, #632]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e00b      	b.n	8000ea0 <HAL_RCC_OscConfig+0xe0>
 8000e88:	4b9b      	ldr	r3, [pc, #620]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b9a      	ldr	r3, [pc, #616]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	499b      	ldr	r1, [pc, #620]	; (80010fc <HAL_RCC_OscConfig+0x33c>)
 8000e90:	400a      	ands	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	4b98      	ldr	r3, [pc, #608]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b97      	ldr	r3, [pc, #604]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	4999      	ldr	r1, [pc, #612]	; (8001100 <HAL_RCC_OscConfig+0x340>)
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d014      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fcf0 	bl	800088c <HAL_GetTick>
 8000eac:	0003      	movs	r3, r0
 8000eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fceb 	bl	800088c <HAL_GetTick>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b64      	cmp	r3, #100	; 0x64
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e2fd      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec4:	4b8c      	ldr	r3, [pc, #560]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	029b      	lsls	r3, r3, #10
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0xf2>
 8000ed0:	e015      	b.n	8000efe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fcdb 	bl	800088c <HAL_GetTick>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fcd6 	bl	800088c <HAL_GetTick>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	; 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e2e8      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eee:	4b82      	ldr	r3, [pc, #520]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	029b      	lsls	r3, r3, #10
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d1f0      	bne.n	8000edc <HAL_RCC_OscConfig+0x11c>
 8000efa:	e000      	b.n	8000efe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	d100      	bne.n	8000f0a <HAL_RCC_OscConfig+0x14a>
 8000f08:	e06c      	b.n	8000fe4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f0a:	4b7b      	ldr	r3, [pc, #492]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	220c      	movs	r2, #12
 8000f10:	4013      	ands	r3, r2
 8000f12:	d00e      	beq.n	8000f32 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f14:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	220c      	movs	r2, #12
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d11f      	bne.n	8000f60 <HAL_RCC_OscConfig+0x1a0>
 8000f20:	4b75      	ldr	r3, [pc, #468]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	23c0      	movs	r3, #192	; 0xc0
 8000f26:	025b      	lsls	r3, r3, #9
 8000f28:	401a      	ands	r2, r3
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d116      	bne.n	8000f60 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f32:	4b71      	ldr	r3, [pc, #452]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x188>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d001      	beq.n	8000f48 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e2bb      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	22f8      	movs	r2, #248	; 0xf8
 8000f4e:	4393      	bics	r3, r2
 8000f50:	0019      	movs	r1, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	00da      	lsls	r2, r3, #3
 8000f58:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5e:	e041      	b.n	8000fe4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d024      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f68:	4b63      	ldr	r3, [pc, #396]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b62      	ldr	r3, [pc, #392]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc8a 	bl	800088c <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fc85 	bl	800088c <HAL_GetTick>
 8000f82:	0002      	movs	r2, r0
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e297      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	4b59      	ldr	r3, [pc, #356]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2202      	movs	r2, #2
 8000f96:	4013      	ands	r3, r2
 8000f98:	d0f1      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9a:	4b57      	ldr	r3, [pc, #348]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	22f8      	movs	r2, #248	; 0xf8
 8000fa0:	4393      	bics	r3, r2
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	00da      	lsls	r2, r3, #3
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e018      	b.n	8000fe4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb2:	4b51      	ldr	r3, [pc, #324]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b50      	ldr	r3, [pc, #320]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	438a      	bics	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fc65 	bl	800088c <HAL_GetTick>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fc60 	bl	800088c <HAL_GetTick>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e272      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fda:	4b47      	ldr	r3, [pc, #284]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2202      	movs	r2, #2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d1f1      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2208      	movs	r2, #8
 8000fea:	4013      	ands	r3, r2
 8000fec:	d036      	beq.n	800105c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d019      	beq.n	800102a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff6:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ffa:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	430a      	orrs	r2, r1
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fc43 	bl	800088c <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff fc3e 	bl	800088c <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e250      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101e:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	2202      	movs	r2, #2
 8001024:	4013      	ands	r3, r2
 8001026:	d0f1      	beq.n	800100c <HAL_RCC_OscConfig+0x24c>
 8001028:	e018      	b.n	800105c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 800102c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8001030:	2101      	movs	r1, #1
 8001032:	438a      	bics	r2, r1
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fc29 	bl	800088c <HAL_GetTick>
 800103a:	0003      	movs	r3, r0
 800103c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fc24 	bl	800088c <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e236      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	2202      	movs	r2, #2
 8001058:	4013      	ands	r3, r2
 800105a:	d1f1      	bne.n	8001040 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2204      	movs	r2, #4
 8001062:	4013      	ands	r3, r2
 8001064:	d100      	bne.n	8001068 <HAL_RCC_OscConfig+0x2a8>
 8001066:	e0b5      	b.n	80011d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001068:	201f      	movs	r0, #31
 800106a:	183b      	adds	r3, r7, r0
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8001072:	69da      	ldr	r2, [r3, #28]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	055b      	lsls	r3, r3, #21
 8001078:	4013      	ands	r3, r2
 800107a:	d110      	bne.n	800109e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 800107e:	69da      	ldr	r2, [r3, #28]
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	0549      	lsls	r1, r1, #21
 8001086:	430a      	orrs	r2, r1
 8001088:	61da      	str	r2, [r3, #28]
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 800108c:	69da      	ldr	r2, [r3, #28]
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	055b      	lsls	r3, r3, #21
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001098:	183b      	adds	r3, r7, r0
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_RCC_OscConfig+0x344>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	d11a      	bne.n	80010e0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_RCC_OscConfig+0x344>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_RCC_OscConfig+0x344>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0049      	lsls	r1, r1, #1
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b8:	f7ff fbe8 	bl	800088c <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fbe3 	bl	800088c <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1f5      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_RCC_OscConfig+0x344>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10f      	bne.n	8001108 <HAL_RCC_OscConfig+0x348>
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	430a      	orrs	r2, r1
 80010f2:	621a      	str	r2, [r3, #32]
 80010f4:	e036      	b.n	8001164 <HAL_RCC_OscConfig+0x3a4>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	40021000 	.word	0x40021000
 80010fc:	fffeffff 	.word	0xfffeffff
 8001100:	fffbffff 	.word	0xfffbffff
 8001104:	40007000 	.word	0x40007000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10c      	bne.n	800112a <HAL_RCC_OscConfig+0x36a>
 8001110:	4bca      	ldr	r3, [pc, #808]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001112:	6a1a      	ldr	r2, [r3, #32]
 8001114:	4bc9      	ldr	r3, [pc, #804]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001116:	2101      	movs	r1, #1
 8001118:	438a      	bics	r2, r1
 800111a:	621a      	str	r2, [r3, #32]
 800111c:	4bc7      	ldr	r3, [pc, #796]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800111e:	6a1a      	ldr	r2, [r3, #32]
 8001120:	4bc6      	ldr	r3, [pc, #792]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001122:	2104      	movs	r1, #4
 8001124:	438a      	bics	r2, r1
 8001126:	621a      	str	r2, [r3, #32]
 8001128:	e01c      	b.n	8001164 <HAL_RCC_OscConfig+0x3a4>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b05      	cmp	r3, #5
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x38c>
 8001132:	4bc2      	ldr	r3, [pc, #776]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001134:	6a1a      	ldr	r2, [r3, #32]
 8001136:	4bc1      	ldr	r3, [pc, #772]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001138:	2104      	movs	r1, #4
 800113a:	430a      	orrs	r2, r1
 800113c:	621a      	str	r2, [r3, #32]
 800113e:	4bbf      	ldr	r3, [pc, #764]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001140:	6a1a      	ldr	r2, [r3, #32]
 8001142:	4bbe      	ldr	r3, [pc, #760]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001144:	2101      	movs	r1, #1
 8001146:	430a      	orrs	r2, r1
 8001148:	621a      	str	r2, [r3, #32]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0x3a4>
 800114c:	4bbb      	ldr	r3, [pc, #748]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	4bba      	ldr	r3, [pc, #744]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001152:	2101      	movs	r1, #1
 8001154:	438a      	bics	r2, r1
 8001156:	621a      	str	r2, [r3, #32]
 8001158:	4bb8      	ldr	r3, [pc, #736]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	4bb7      	ldr	r3, [pc, #732]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800115e:	2104      	movs	r1, #4
 8001160:	438a      	bics	r2, r1
 8001162:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d014      	beq.n	8001196 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fb8e 	bl	800088c <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	e009      	b.n	800118a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001176:	f7ff fb89 	bl	800088c <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4aaf      	ldr	r2, [pc, #700]	; (8001440 <HAL_RCC_OscConfig+0x680>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e19a      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118a:	4bac      	ldr	r3, [pc, #688]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	2202      	movs	r2, #2
 8001190:	4013      	ands	r3, r2
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x3b6>
 8001194:	e013      	b.n	80011be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001196:	f7ff fb79 	bl	800088c <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119e:	e009      	b.n	80011b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a0:	f7ff fb74 	bl	800088c <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4aa5      	ldr	r2, [pc, #660]	; (8001440 <HAL_RCC_OscConfig+0x680>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e185      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b4:	4ba1      	ldr	r3, [pc, #644]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011be:	231f      	movs	r3, #31
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c8:	4b9c      	ldr	r3, [pc, #624]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80011ca:	69da      	ldr	r2, [r3, #28]
 80011cc:	4b9b      	ldr	r3, [pc, #620]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80011ce:	499d      	ldr	r1, [pc, #628]	; (8001444 <HAL_RCC_OscConfig+0x684>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2210      	movs	r2, #16
 80011da:	4013      	ands	r3, r2
 80011dc:	d063      	beq.n	80012a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d12a      	bne.n	800123c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011e6:	4b95      	ldr	r3, [pc, #596]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80011e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ea:	4b94      	ldr	r3, [pc, #592]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80011ec:	2104      	movs	r1, #4
 80011ee:	430a      	orrs	r2, r1
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011f2:	4b92      	ldr	r3, [pc, #584]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80011f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f6:	4b91      	ldr	r3, [pc, #580]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fb45 	bl	800088c <HAL_GetTick>
 8001202:	0003      	movs	r3, r0
 8001204:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001208:	f7ff fb40 	bl	800088c <HAL_GetTick>
 800120c:	0002      	movs	r2, r0
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e152      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800121a:	4b88      	ldr	r3, [pc, #544]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	2202      	movs	r2, #2
 8001220:	4013      	ands	r3, r2
 8001222:	d0f1      	beq.n	8001208 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001224:	4b85      	ldr	r3, [pc, #532]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001228:	22f8      	movs	r2, #248	; 0xf8
 800122a:	4393      	bics	r3, r2
 800122c:	0019      	movs	r1, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	00da      	lsls	r2, r3, #3
 8001234:	4b81      	ldr	r3, [pc, #516]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001236:	430a      	orrs	r2, r1
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
 800123a:	e034      	b.n	80012a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	3305      	adds	r3, #5
 8001242:	d111      	bne.n	8001268 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001244:	4b7d      	ldr	r3, [pc, #500]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001248:	4b7c      	ldr	r3, [pc, #496]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800124a:	2104      	movs	r1, #4
 800124c:	438a      	bics	r2, r1
 800124e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001254:	22f8      	movs	r2, #248	; 0xf8
 8001256:	4393      	bics	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	00da      	lsls	r2, r3, #3
 8001260:	4b76      	ldr	r3, [pc, #472]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001262:	430a      	orrs	r2, r1
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
 8001266:	e01e      	b.n	80012a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001268:	4b74      	ldr	r3, [pc, #464]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800126a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126c:	4b73      	ldr	r3, [pc, #460]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800126e:	2104      	movs	r1, #4
 8001270:	430a      	orrs	r2, r1
 8001272:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001274:	4b71      	ldr	r3, [pc, #452]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001278:	4b70      	ldr	r3, [pc, #448]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800127a:	2101      	movs	r1, #1
 800127c:	438a      	bics	r2, r1
 800127e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fb04 	bl	800088c <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800128a:	f7ff faff 	bl	800088c <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e111      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800129c:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f1      	bne.n	800128a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2220      	movs	r2, #32
 80012ac:	4013      	ands	r3, r2
 80012ae:	d05c      	beq.n	800136a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012b0:	4b62      	ldr	r3, [pc, #392]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	220c      	movs	r2, #12
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d00e      	beq.n	80012da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012bc:	4b5f      	ldr	r3, [pc, #380]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	220c      	movs	r2, #12
 80012c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d114      	bne.n	80012f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012c8:	4b5c      	ldr	r3, [pc, #368]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	23c0      	movs	r3, #192	; 0xc0
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	401a      	ands	r2, r3
 80012d2:	23c0      	movs	r3, #192	; 0xc0
 80012d4:	025b      	lsls	r3, r3, #9
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d10b      	bne.n	80012f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012da:	4b58      	ldr	r3, [pc, #352]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80012dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	025b      	lsls	r3, r3, #9
 80012e2:	4013      	ands	r3, r2
 80012e4:	d040      	beq.n	8001368 <HAL_RCC_OscConfig+0x5a8>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d03c      	beq.n	8001368 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0e6      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01b      	beq.n	8001332 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80012fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fe:	4b4f      	ldr	r3, [pc, #316]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0249      	lsls	r1, r1, #9
 8001304:	430a      	orrs	r2, r1
 8001306:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fac0 	bl	800088c <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001312:	f7ff fabb 	bl	800088c <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0cd      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001324:	4b45      	ldr	r3, [pc, #276]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	4013      	ands	r3, r2
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x552>
 8001330:	e01b      	b.n	800136a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001332:	4b42      	ldr	r3, [pc, #264]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001338:	4943      	ldr	r1, [pc, #268]	; (8001448 <HAL_RCC_OscConfig+0x688>)
 800133a:	400a      	ands	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff faa5 	bl	800088c <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001348:	f7ff faa0 	bl	800088c <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e0b2      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800135c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	025b      	lsls	r3, r3, #9
 8001362:	4013      	ands	r3, r2
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x588>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001368:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <HAL_RCC_OscConfig+0x5b4>
 8001372:	e0a4      	b.n	80014be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	220c      	movs	r2, #12
 800137a:	4013      	ands	r3, r2
 800137c:	2b08      	cmp	r3, #8
 800137e:	d100      	bne.n	8001382 <HAL_RCC_OscConfig+0x5c2>
 8001380:	e078      	b.n	8001474 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	2b02      	cmp	r3, #2
 8001388:	d14c      	bne.n	8001424 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001390:	492e      	ldr	r1, [pc, #184]	; (800144c <HAL_RCC_OscConfig+0x68c>)
 8001392:	400a      	ands	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fa79 	bl	800088c <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fa74 	bl	800088c <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e086      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	049b      	lsls	r3, r3, #18
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	220f      	movs	r2, #15
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80013ce:	430a      	orrs	r2, r1
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <HAL_RCC_OscConfig+0x690>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	431a      	orrs	r2, r3
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80013e8:	430a      	orrs	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0449      	lsls	r1, r1, #17
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fa47 	bl	800088c <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fa42 	bl	800088c <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e054      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	049b      	lsls	r3, r3, #18
 800141e:	4013      	ands	r3, r2
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x644>
 8001422:	e04c      	b.n	80014be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_RCC_OscConfig+0x67c>)
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <HAL_RCC_OscConfig+0x68c>)
 800142c:	400a      	ands	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fa2c 	bl	800088c <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x6a6>
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	40021000 	.word	0x40021000
 8001440:	00001388 	.word	0x00001388
 8001444:	efffffff 	.word	0xefffffff
 8001448:	fffeffff 	.word	0xfffeffff
 800144c:	feffffff 	.word	0xfeffffff
 8001450:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001454:	f7ff fa1a 	bl	800088c <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e02c      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_RCC_OscConfig+0x708>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	049b      	lsls	r3, r3, #18
 800146e:	4013      	ands	r3, r2
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x694>
 8001472:	e024      	b.n	80014be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e01f      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_RCC_OscConfig+0x708>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x708>)
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	23c0      	movs	r3, #192	; 0xc0
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	401a      	ands	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	429a      	cmp	r2, r3
 800149a:	d10e      	bne.n	80014ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	220f      	movs	r2, #15
 80014a0:	401a      	ands	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	23f0      	movs	r3, #240	; 0xf0
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	401a      	ands	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b008      	add	sp, #32
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0bf      	b.n	8001660 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e0:	4b61      	ldr	r3, [pc, #388]	; (8001668 <HAL_RCC_ClockConfig+0x19c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	4013      	ands	r3, r2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d911      	bls.n	8001512 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_RCC_ClockConfig+0x19c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_ClockConfig+0x19c>)
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_ClockConfig+0x19c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d001      	beq.n	8001512 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0a6      	b.n	8001660 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d015      	beq.n	8001548 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2204      	movs	r2, #4
 8001522:	4013      	ands	r3, r2
 8001524:	d006      	beq.n	8001534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001526:	4b51      	ldr	r3, [pc, #324]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 800152c:	21e0      	movs	r1, #224	; 0xe0
 800152e:	00c9      	lsls	r1, r1, #3
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001534:	4b4d      	ldr	r3, [pc, #308]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	22f0      	movs	r2, #240	; 0xf0
 800153a:	4393      	bics	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 8001544:	430a      	orrs	r2, r1
 8001546:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	d04c      	beq.n	80015ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	4013      	ands	r3, r2
 8001564:	d120      	bne.n	80015a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e07a      	b.n	8001660 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	049b      	lsls	r3, r3, #18
 800157a:	4013      	ands	r3, r2
 800157c:	d114      	bne.n	80015a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e06e      	b.n	8001660 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b03      	cmp	r3, #3
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 800158c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	025b      	lsls	r3, r3, #9
 8001592:	4013      	ands	r3, r2
 8001594:	d108      	bne.n	80015a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e062      	b.n	8001660 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e05b      	b.n	8001660 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2203      	movs	r2, #3
 80015ae:	4393      	bics	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 80015b8:	430a      	orrs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff f966 	bl	800088c <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c4:	e009      	b.n	80015da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c6:	f7ff f961 	bl	800088c <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <HAL_RCC_ClockConfig+0x1a4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e042      	b.n	8001660 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	220c      	movs	r2, #12
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1ec      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_RCC_ClockConfig+0x19c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d211      	bcs.n	800161e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_ClockConfig+0x19c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2201      	movs	r2, #1
 8001600:	4393      	bics	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_RCC_ClockConfig+0x19c>)
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_RCC_ClockConfig+0x19c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2201      	movs	r2, #1
 8001612:	4013      	ands	r3, r2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e020      	b.n	8001660 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2204      	movs	r2, #4
 8001624:	4013      	ands	r3, r2
 8001626:	d009      	beq.n	800163c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_RCC_ClockConfig+0x1a8>)
 800162e:	4013      	ands	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800163c:	f000 f820 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 8001640:	0001      	movs	r1, r0
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x1a0>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	220f      	movs	r2, #15
 800164a:	4013      	ands	r3, r2
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_RCC_ClockConfig+0x1ac>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	000a      	movs	r2, r1
 8001652:	40da      	lsrs	r2, r3
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_ClockConfig+0x1b0>)
 8001656:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001658:	2003      	movs	r0, #3
 800165a:	f7ff f8d1 	bl	8000800 <HAL_InitTick>
  
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b004      	add	sp, #16
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40022000 	.word	0x40022000
 800166c:	40021000 	.word	0x40021000
 8001670:	00001388 	.word	0x00001388
 8001674:	fffff8ff 	.word	0xfffff8ff
 8001678:	08002928 	.word	0x08002928
 800167c:	20000000 	.word	0x20000000

08001680 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b08f      	sub	sp, #60	; 0x3c
 8001684:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001686:	2314      	movs	r3, #20
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_RCC_GetSysClockFreq+0xec>)
 800168c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800168e:	c313      	stmia	r3!, {r0, r1, r4}
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4a36      	ldr	r2, [pc, #216]	; (8001770 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001698:	ca13      	ldmia	r2!, {r0, r1, r4}
 800169a:	c313      	stmia	r3!, {r0, r1, r4}
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016bc:	220c      	movs	r2, #12
 80016be:	4013      	ands	r3, r2
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d047      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0xd4>
 80016c4:	d849      	bhi.n	800175a <HAL_RCC_GetSysClockFreq+0xda>
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x50>
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x56>
 80016ce:	e044      	b.n	800175a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016d4:	e044      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	0c9b      	lsrs	r3, r3, #18
 80016da:	220f      	movs	r2, #15
 80016dc:	4013      	ands	r3, r2
 80016de:	2214      	movs	r2, #20
 80016e0:	18ba      	adds	r2, r7, r2
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	220f      	movs	r2, #15
 80016ec:	4013      	ands	r3, r2
 80016ee:	1d3a      	adds	r2, r7, #4
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f6:	23c0      	movs	r3, #192	; 0xc0
 80016f8:	025b      	lsls	r3, r3, #9
 80016fa:	401a      	ands	r2, r3
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	025b      	lsls	r3, r3, #9
 8001700:	429a      	cmp	r2, r3
 8001702:	d109      	bne.n	8001718 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001706:	481c      	ldr	r0, [pc, #112]	; (8001778 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001708:	f7fe fd06 	bl	8000118 <__udivsi3>
 800170c:	0003      	movs	r3, r0
 800170e:	001a      	movs	r2, r3
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	4353      	muls	r3, r2
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
 8001716:	e01a      	b.n	800174e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800171a:	23c0      	movs	r3, #192	; 0xc0
 800171c:	025b      	lsls	r3, r3, #9
 800171e:	401a      	ands	r2, r3
 8001720:	23c0      	movs	r3, #192	; 0xc0
 8001722:	025b      	lsls	r3, r3, #9
 8001724:	429a      	cmp	r2, r3
 8001726:	d109      	bne.n	800173c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <HAL_RCC_GetSysClockFreq+0xfc>)
 800172c:	f7fe fcf4 	bl	8000118 <__udivsi3>
 8001730:	0003      	movs	r3, r0
 8001732:	001a      	movs	r2, r3
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	4353      	muls	r3, r2
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
 800173a:	e008      	b.n	800174e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800173c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800173e:	480e      	ldr	r0, [pc, #56]	; (8001778 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001740:	f7fe fcea 	bl	8000118 <__udivsi3>
 8001744:	0003      	movs	r3, r0
 8001746:	001a      	movs	r2, r3
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	4353      	muls	r3, r2
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001752:	e005      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001758:	e002      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800175e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b00f      	add	sp, #60	; 0x3c
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	080028a0 	.word	0x080028a0
 8001770:	080028b0 	.word	0x080028b0
 8001774:	40021000 	.word	0x40021000
 8001778:	007a1200 	.word	0x007a1200
 800177c:	02dc6c00 	.word	0x02dc6c00

08001780 <__assert_func>:
 8001780:	b530      	push	{r4, r5, lr}
 8001782:	0014      	movs	r4, r2
 8001784:	001a      	movs	r2, r3
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <__assert_func+0x2c>)
 8001788:	0005      	movs	r5, r0
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b085      	sub	sp, #20
 800178e:	68d8      	ldr	r0, [r3, #12]
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <__assert_func+0x30>)
 8001792:	2c00      	cmp	r4, #0
 8001794:	d101      	bne.n	800179a <__assert_func+0x1a>
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <__assert_func+0x34>)
 8001798:	001c      	movs	r4, r3
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	9100      	str	r1, [sp, #0]
 800179e:	002b      	movs	r3, r5
 80017a0:	4905      	ldr	r1, [pc, #20]	; (80017b8 <__assert_func+0x38>)
 80017a2:	9402      	str	r4, [sp, #8]
 80017a4:	f000 f810 	bl	80017c8 <fiprintf>
 80017a8:	f000 fbfc 	bl	8001fa4 <abort>
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	08002938 	.word	0x08002938
 80017b4:	08002973 	.word	0x08002973
 80017b8:	08002945 	.word	0x08002945

080017bc <__errno>:
 80017bc:	4b01      	ldr	r3, [pc, #4]	; (80017c4 <__errno+0x8>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	4770      	bx	lr
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <fiprintf>:
 80017c8:	b40e      	push	{r1, r2, r3}
 80017ca:	b503      	push	{r0, r1, lr}
 80017cc:	0001      	movs	r1, r0
 80017ce:	ab03      	add	r3, sp, #12
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <fiprintf+0x1c>)
 80017d2:	cb04      	ldmia	r3!, {r2}
 80017d4:	6800      	ldr	r0, [r0, #0]
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	f000 f85a 	bl	8001890 <_vfiprintf_r>
 80017dc:	b002      	add	sp, #8
 80017de:	bc08      	pop	{r3}
 80017e0:	b003      	add	sp, #12
 80017e2:	4718      	bx	r3
 80017e4:	2000000c 	.word	0x2000000c

080017e8 <__libc_init_array>:
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	2600      	movs	r6, #0
 80017ec:	4d0c      	ldr	r5, [pc, #48]	; (8001820 <__libc_init_array+0x38>)
 80017ee:	4c0d      	ldr	r4, [pc, #52]	; (8001824 <__libc_init_array+0x3c>)
 80017f0:	1b64      	subs	r4, r4, r5
 80017f2:	10a4      	asrs	r4, r4, #2
 80017f4:	42a6      	cmp	r6, r4
 80017f6:	d109      	bne.n	800180c <__libc_init_array+0x24>
 80017f8:	2600      	movs	r6, #0
 80017fa:	f001 f831 	bl	8002860 <_init>
 80017fe:	4d0a      	ldr	r5, [pc, #40]	; (8001828 <__libc_init_array+0x40>)
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <__libc_init_array+0x44>)
 8001802:	1b64      	subs	r4, r4, r5
 8001804:	10a4      	asrs	r4, r4, #2
 8001806:	42a6      	cmp	r6, r4
 8001808:	d105      	bne.n	8001816 <__libc_init_array+0x2e>
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	00b3      	lsls	r3, r6, #2
 800180e:	58eb      	ldr	r3, [r5, r3]
 8001810:	4798      	blx	r3
 8001812:	3601      	adds	r6, #1
 8001814:	e7ee      	b.n	80017f4 <__libc_init_array+0xc>
 8001816:	00b3      	lsls	r3, r6, #2
 8001818:	58eb      	ldr	r3, [r5, r3]
 800181a:	4798      	blx	r3
 800181c:	3601      	adds	r6, #1
 800181e:	e7f2      	b.n	8001806 <__libc_init_array+0x1e>
 8001820:	08002a0c 	.word	0x08002a0c
 8001824:	08002a0c 	.word	0x08002a0c
 8001828:	08002a0c 	.word	0x08002a0c
 800182c:	08002a10 	.word	0x08002a10

08001830 <memset>:
 8001830:	0003      	movs	r3, r0
 8001832:	1882      	adds	r2, r0, r2
 8001834:	4293      	cmp	r3, r2
 8001836:	d100      	bne.n	800183a <memset+0xa>
 8001838:	4770      	bx	lr
 800183a:	7019      	strb	r1, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	e7f9      	b.n	8001834 <memset+0x4>

08001840 <__sfputc_r>:
 8001840:	6893      	ldr	r3, [r2, #8]
 8001842:	b510      	push	{r4, lr}
 8001844:	3b01      	subs	r3, #1
 8001846:	6093      	str	r3, [r2, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	da04      	bge.n	8001856 <__sfputc_r+0x16>
 800184c:	6994      	ldr	r4, [r2, #24]
 800184e:	42a3      	cmp	r3, r4
 8001850:	db07      	blt.n	8001862 <__sfputc_r+0x22>
 8001852:	290a      	cmp	r1, #10
 8001854:	d005      	beq.n	8001862 <__sfputc_r+0x22>
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	1c58      	adds	r0, r3, #1
 800185a:	6010      	str	r0, [r2, #0]
 800185c:	7019      	strb	r1, [r3, #0]
 800185e:	0008      	movs	r0, r1
 8001860:	bd10      	pop	{r4, pc}
 8001862:	f000 fad1 	bl	8001e08 <__swbuf_r>
 8001866:	0001      	movs	r1, r0
 8001868:	e7f9      	b.n	800185e <__sfputc_r+0x1e>

0800186a <__sfputs_r>:
 800186a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186c:	0006      	movs	r6, r0
 800186e:	000f      	movs	r7, r1
 8001870:	0014      	movs	r4, r2
 8001872:	18d5      	adds	r5, r2, r3
 8001874:	42ac      	cmp	r4, r5
 8001876:	d101      	bne.n	800187c <__sfputs_r+0x12>
 8001878:	2000      	movs	r0, #0
 800187a:	e007      	b.n	800188c <__sfputs_r+0x22>
 800187c:	7821      	ldrb	r1, [r4, #0]
 800187e:	003a      	movs	r2, r7
 8001880:	0030      	movs	r0, r6
 8001882:	f7ff ffdd 	bl	8001840 <__sfputc_r>
 8001886:	3401      	adds	r4, #1
 8001888:	1c43      	adds	r3, r0, #1
 800188a:	d1f3      	bne.n	8001874 <__sfputs_r+0xa>
 800188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001890 <_vfiprintf_r>:
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b0a1      	sub	sp, #132	; 0x84
 8001894:	0006      	movs	r6, r0
 8001896:	000c      	movs	r4, r1
 8001898:	001f      	movs	r7, r3
 800189a:	9203      	str	r2, [sp, #12]
 800189c:	2800      	cmp	r0, #0
 800189e:	d004      	beq.n	80018aa <_vfiprintf_r+0x1a>
 80018a0:	6983      	ldr	r3, [r0, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <_vfiprintf_r+0x1a>
 80018a6:	f000 fcb3 	bl	8002210 <__sinit>
 80018aa:	4b8e      	ldr	r3, [pc, #568]	; (8001ae4 <_vfiprintf_r+0x254>)
 80018ac:	429c      	cmp	r4, r3
 80018ae:	d11c      	bne.n	80018ea <_vfiprintf_r+0x5a>
 80018b0:	6874      	ldr	r4, [r6, #4]
 80018b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018b4:	07db      	lsls	r3, r3, #31
 80018b6:	d405      	bmi.n	80018c4 <_vfiprintf_r+0x34>
 80018b8:	89a3      	ldrh	r3, [r4, #12]
 80018ba:	059b      	lsls	r3, r3, #22
 80018bc:	d402      	bmi.n	80018c4 <_vfiprintf_r+0x34>
 80018be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018c0:	f000 fd47 	bl	8002352 <__retarget_lock_acquire_recursive>
 80018c4:	89a3      	ldrh	r3, [r4, #12]
 80018c6:	071b      	lsls	r3, r3, #28
 80018c8:	d502      	bpl.n	80018d0 <_vfiprintf_r+0x40>
 80018ca:	6923      	ldr	r3, [r4, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11d      	bne.n	800190c <_vfiprintf_r+0x7c>
 80018d0:	0021      	movs	r1, r4
 80018d2:	0030      	movs	r0, r6
 80018d4:	f000 faee 	bl	8001eb4 <__swsetup_r>
 80018d8:	2800      	cmp	r0, #0
 80018da:	d017      	beq.n	800190c <_vfiprintf_r+0x7c>
 80018dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018de:	07db      	lsls	r3, r3, #31
 80018e0:	d50d      	bpl.n	80018fe <_vfiprintf_r+0x6e>
 80018e2:	2001      	movs	r0, #1
 80018e4:	4240      	negs	r0, r0
 80018e6:	b021      	add	sp, #132	; 0x84
 80018e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ea:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <_vfiprintf_r+0x258>)
 80018ec:	429c      	cmp	r4, r3
 80018ee:	d101      	bne.n	80018f4 <_vfiprintf_r+0x64>
 80018f0:	68b4      	ldr	r4, [r6, #8]
 80018f2:	e7de      	b.n	80018b2 <_vfiprintf_r+0x22>
 80018f4:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <_vfiprintf_r+0x25c>)
 80018f6:	429c      	cmp	r4, r3
 80018f8:	d1db      	bne.n	80018b2 <_vfiprintf_r+0x22>
 80018fa:	68f4      	ldr	r4, [r6, #12]
 80018fc:	e7d9      	b.n	80018b2 <_vfiprintf_r+0x22>
 80018fe:	89a3      	ldrh	r3, [r4, #12]
 8001900:	059b      	lsls	r3, r3, #22
 8001902:	d4ee      	bmi.n	80018e2 <_vfiprintf_r+0x52>
 8001904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001906:	f000 fd25 	bl	8002354 <__retarget_lock_release_recursive>
 800190a:	e7ea      	b.n	80018e2 <_vfiprintf_r+0x52>
 800190c:	2300      	movs	r3, #0
 800190e:	ad08      	add	r5, sp, #32
 8001910:	616b      	str	r3, [r5, #20]
 8001912:	3320      	adds	r3, #32
 8001914:	766b      	strb	r3, [r5, #25]
 8001916:	3310      	adds	r3, #16
 8001918:	76ab      	strb	r3, [r5, #26]
 800191a:	9707      	str	r7, [sp, #28]
 800191c:	9f03      	ldr	r7, [sp, #12]
 800191e:	783b      	ldrb	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <_vfiprintf_r+0x98>
 8001924:	2b25      	cmp	r3, #37	; 0x25
 8001926:	d14e      	bne.n	80019c6 <_vfiprintf_r+0x136>
 8001928:	9b03      	ldr	r3, [sp, #12]
 800192a:	1afb      	subs	r3, r7, r3
 800192c:	9305      	str	r3, [sp, #20]
 800192e:	9b03      	ldr	r3, [sp, #12]
 8001930:	429f      	cmp	r7, r3
 8001932:	d00d      	beq.n	8001950 <_vfiprintf_r+0xc0>
 8001934:	9b05      	ldr	r3, [sp, #20]
 8001936:	0021      	movs	r1, r4
 8001938:	0030      	movs	r0, r6
 800193a:	9a03      	ldr	r2, [sp, #12]
 800193c:	f7ff ff95 	bl	800186a <__sfputs_r>
 8001940:	1c43      	adds	r3, r0, #1
 8001942:	d100      	bne.n	8001946 <_vfiprintf_r+0xb6>
 8001944:	e0b5      	b.n	8001ab2 <_vfiprintf_r+0x222>
 8001946:	696a      	ldr	r2, [r5, #20]
 8001948:	9b05      	ldr	r3, [sp, #20]
 800194a:	4694      	mov	ip, r2
 800194c:	4463      	add	r3, ip
 800194e:	616b      	str	r3, [r5, #20]
 8001950:	783b      	ldrb	r3, [r7, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d100      	bne.n	8001958 <_vfiprintf_r+0xc8>
 8001956:	e0ac      	b.n	8001ab2 <_vfiprintf_r+0x222>
 8001958:	2201      	movs	r2, #1
 800195a:	1c7b      	adds	r3, r7, #1
 800195c:	9303      	str	r3, [sp, #12]
 800195e:	2300      	movs	r3, #0
 8001960:	4252      	negs	r2, r2
 8001962:	606a      	str	r2, [r5, #4]
 8001964:	a904      	add	r1, sp, #16
 8001966:	3254      	adds	r2, #84	; 0x54
 8001968:	1852      	adds	r2, r2, r1
 800196a:	602b      	str	r3, [r5, #0]
 800196c:	60eb      	str	r3, [r5, #12]
 800196e:	60ab      	str	r3, [r5, #8]
 8001970:	7013      	strb	r3, [r2, #0]
 8001972:	65ab      	str	r3, [r5, #88]	; 0x58
 8001974:	9b03      	ldr	r3, [sp, #12]
 8001976:	2205      	movs	r2, #5
 8001978:	7819      	ldrb	r1, [r3, #0]
 800197a:	485d      	ldr	r0, [pc, #372]	; (8001af0 <_vfiprintf_r+0x260>)
 800197c:	f000 fd58 	bl	8002430 <memchr>
 8001980:	9b03      	ldr	r3, [sp, #12]
 8001982:	1c5f      	adds	r7, r3, #1
 8001984:	2800      	cmp	r0, #0
 8001986:	d120      	bne.n	80019ca <_vfiprintf_r+0x13a>
 8001988:	682a      	ldr	r2, [r5, #0]
 800198a:	06d3      	lsls	r3, r2, #27
 800198c:	d504      	bpl.n	8001998 <_vfiprintf_r+0x108>
 800198e:	2353      	movs	r3, #83	; 0x53
 8001990:	a904      	add	r1, sp, #16
 8001992:	185b      	adds	r3, r3, r1
 8001994:	2120      	movs	r1, #32
 8001996:	7019      	strb	r1, [r3, #0]
 8001998:	0713      	lsls	r3, r2, #28
 800199a:	d504      	bpl.n	80019a6 <_vfiprintf_r+0x116>
 800199c:	2353      	movs	r3, #83	; 0x53
 800199e:	a904      	add	r1, sp, #16
 80019a0:	185b      	adds	r3, r3, r1
 80019a2:	212b      	movs	r1, #43	; 0x2b
 80019a4:	7019      	strb	r1, [r3, #0]
 80019a6:	9b03      	ldr	r3, [sp, #12]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b2a      	cmp	r3, #42	; 0x2a
 80019ac:	d016      	beq.n	80019dc <_vfiprintf_r+0x14c>
 80019ae:	2100      	movs	r1, #0
 80019b0:	68eb      	ldr	r3, [r5, #12]
 80019b2:	9f03      	ldr	r7, [sp, #12]
 80019b4:	783a      	ldrb	r2, [r7, #0]
 80019b6:	1c78      	adds	r0, r7, #1
 80019b8:	3a30      	subs	r2, #48	; 0x30
 80019ba:	4684      	mov	ip, r0
 80019bc:	2a09      	cmp	r2, #9
 80019be:	d94f      	bls.n	8001a60 <_vfiprintf_r+0x1d0>
 80019c0:	2900      	cmp	r1, #0
 80019c2:	d111      	bne.n	80019e8 <_vfiprintf_r+0x158>
 80019c4:	e017      	b.n	80019f6 <_vfiprintf_r+0x166>
 80019c6:	3701      	adds	r7, #1
 80019c8:	e7a9      	b.n	800191e <_vfiprintf_r+0x8e>
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <_vfiprintf_r+0x260>)
 80019cc:	682a      	ldr	r2, [r5, #0]
 80019ce:	1ac0      	subs	r0, r0, r3
 80019d0:	2301      	movs	r3, #1
 80019d2:	4083      	lsls	r3, r0
 80019d4:	4313      	orrs	r3, r2
 80019d6:	602b      	str	r3, [r5, #0]
 80019d8:	9703      	str	r7, [sp, #12]
 80019da:	e7cb      	b.n	8001974 <_vfiprintf_r+0xe4>
 80019dc:	9b07      	ldr	r3, [sp, #28]
 80019de:	1d19      	adds	r1, r3, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	9107      	str	r1, [sp, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db01      	blt.n	80019ec <_vfiprintf_r+0x15c>
 80019e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80019ea:	e004      	b.n	80019f6 <_vfiprintf_r+0x166>
 80019ec:	425b      	negs	r3, r3
 80019ee:	60eb      	str	r3, [r5, #12]
 80019f0:	2302      	movs	r3, #2
 80019f2:	4313      	orrs	r3, r2
 80019f4:	602b      	str	r3, [r5, #0]
 80019f6:	783b      	ldrb	r3, [r7, #0]
 80019f8:	2b2e      	cmp	r3, #46	; 0x2e
 80019fa:	d10a      	bne.n	8001a12 <_vfiprintf_r+0x182>
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b2a      	cmp	r3, #42	; 0x2a
 8001a00:	d137      	bne.n	8001a72 <_vfiprintf_r+0x1e2>
 8001a02:	9b07      	ldr	r3, [sp, #28]
 8001a04:	3702      	adds	r7, #2
 8001a06:	1d1a      	adds	r2, r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	9207      	str	r2, [sp, #28]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db2d      	blt.n	8001a6c <_vfiprintf_r+0x1dc>
 8001a10:	9309      	str	r3, [sp, #36]	; 0x24
 8001a12:	2203      	movs	r2, #3
 8001a14:	7839      	ldrb	r1, [r7, #0]
 8001a16:	4837      	ldr	r0, [pc, #220]	; (8001af4 <_vfiprintf_r+0x264>)
 8001a18:	f000 fd0a 	bl	8002430 <memchr>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d007      	beq.n	8001a30 <_vfiprintf_r+0x1a0>
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <_vfiprintf_r+0x264>)
 8001a22:	682a      	ldr	r2, [r5, #0]
 8001a24:	1ac0      	subs	r0, r0, r3
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	4083      	lsls	r3, r0
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	3701      	adds	r7, #1
 8001a2e:	602b      	str	r3, [r5, #0]
 8001a30:	7839      	ldrb	r1, [r7, #0]
 8001a32:	1c7b      	adds	r3, r7, #1
 8001a34:	2206      	movs	r2, #6
 8001a36:	4830      	ldr	r0, [pc, #192]	; (8001af8 <_vfiprintf_r+0x268>)
 8001a38:	9303      	str	r3, [sp, #12]
 8001a3a:	7629      	strb	r1, [r5, #24]
 8001a3c:	f000 fcf8 	bl	8002430 <memchr>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d045      	beq.n	8001ad0 <_vfiprintf_r+0x240>
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <_vfiprintf_r+0x26c>)
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d127      	bne.n	8001a9a <_vfiprintf_r+0x20a>
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	9b07      	ldr	r3, [sp, #28]
 8001a4e:	3307      	adds	r3, #7
 8001a50:	4393      	bics	r3, r2
 8001a52:	3308      	adds	r3, #8
 8001a54:	9307      	str	r3, [sp, #28]
 8001a56:	696b      	ldr	r3, [r5, #20]
 8001a58:	9a04      	ldr	r2, [sp, #16]
 8001a5a:	189b      	adds	r3, r3, r2
 8001a5c:	616b      	str	r3, [r5, #20]
 8001a5e:	e75d      	b.n	800191c <_vfiprintf_r+0x8c>
 8001a60:	210a      	movs	r1, #10
 8001a62:	434b      	muls	r3, r1
 8001a64:	4667      	mov	r7, ip
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	3909      	subs	r1, #9
 8001a6a:	e7a3      	b.n	80019b4 <_vfiprintf_r+0x124>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	425b      	negs	r3, r3
 8001a70:	e7ce      	b.n	8001a10 <_vfiprintf_r+0x180>
 8001a72:	2300      	movs	r3, #0
 8001a74:	001a      	movs	r2, r3
 8001a76:	3701      	adds	r7, #1
 8001a78:	606b      	str	r3, [r5, #4]
 8001a7a:	7839      	ldrb	r1, [r7, #0]
 8001a7c:	1c78      	adds	r0, r7, #1
 8001a7e:	3930      	subs	r1, #48	; 0x30
 8001a80:	4684      	mov	ip, r0
 8001a82:	2909      	cmp	r1, #9
 8001a84:	d903      	bls.n	8001a8e <_vfiprintf_r+0x1fe>
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0c3      	beq.n	8001a12 <_vfiprintf_r+0x182>
 8001a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8001a8c:	e7c1      	b.n	8001a12 <_vfiprintf_r+0x182>
 8001a8e:	230a      	movs	r3, #10
 8001a90:	435a      	muls	r2, r3
 8001a92:	4667      	mov	r7, ip
 8001a94:	1852      	adds	r2, r2, r1
 8001a96:	3b09      	subs	r3, #9
 8001a98:	e7ef      	b.n	8001a7a <_vfiprintf_r+0x1ea>
 8001a9a:	ab07      	add	r3, sp, #28
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	0022      	movs	r2, r4
 8001aa0:	0029      	movs	r1, r5
 8001aa2:	0030      	movs	r0, r6
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <_vfiprintf_r+0x270>)
 8001aa6:	e000      	b.n	8001aaa <_vfiprintf_r+0x21a>
 8001aa8:	bf00      	nop
 8001aaa:	9004      	str	r0, [sp, #16]
 8001aac:	9b04      	ldr	r3, [sp, #16]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	d1d1      	bne.n	8001a56 <_vfiprintf_r+0x1c6>
 8001ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ab4:	07db      	lsls	r3, r3, #31
 8001ab6:	d405      	bmi.n	8001ac4 <_vfiprintf_r+0x234>
 8001ab8:	89a3      	ldrh	r3, [r4, #12]
 8001aba:	059b      	lsls	r3, r3, #22
 8001abc:	d402      	bmi.n	8001ac4 <_vfiprintf_r+0x234>
 8001abe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ac0:	f000 fc48 	bl	8002354 <__retarget_lock_release_recursive>
 8001ac4:	89a3      	ldrh	r3, [r4, #12]
 8001ac6:	065b      	lsls	r3, r3, #25
 8001ac8:	d500      	bpl.n	8001acc <_vfiprintf_r+0x23c>
 8001aca:	e70a      	b.n	80018e2 <_vfiprintf_r+0x52>
 8001acc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001ace:	e70a      	b.n	80018e6 <_vfiprintf_r+0x56>
 8001ad0:	ab07      	add	r3, sp, #28
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	0022      	movs	r2, r4
 8001ad6:	0029      	movs	r1, r5
 8001ad8:	0030      	movs	r0, r6
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <_vfiprintf_r+0x270>)
 8001adc:	f000 f882 	bl	8001be4 <_printf_i>
 8001ae0:	e7e3      	b.n	8001aaa <_vfiprintf_r+0x21a>
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	080029cc 	.word	0x080029cc
 8001ae8:	080029ec 	.word	0x080029ec
 8001aec:	080029ac 	.word	0x080029ac
 8001af0:	08002978 	.word	0x08002978
 8001af4:	0800297e 	.word	0x0800297e
 8001af8:	08002982 	.word	0x08002982
 8001afc:	00000000 	.word	0x00000000
 8001b00:	0800186b 	.word	0x0800186b

08001b04 <_printf_common>:
 8001b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b06:	0015      	movs	r5, r2
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	688a      	ldr	r2, [r1, #8]
 8001b0c:	690b      	ldr	r3, [r1, #16]
 8001b0e:	000c      	movs	r4, r1
 8001b10:	9000      	str	r0, [sp, #0]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	da00      	bge.n	8001b18 <_printf_common+0x14>
 8001b16:	0013      	movs	r3, r2
 8001b18:	0022      	movs	r2, r4
 8001b1a:	602b      	str	r3, [r5, #0]
 8001b1c:	3243      	adds	r2, #67	; 0x43
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	2a00      	cmp	r2, #0
 8001b22:	d001      	beq.n	8001b28 <_printf_common+0x24>
 8001b24:	3301      	adds	r3, #1
 8001b26:	602b      	str	r3, [r5, #0]
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	069b      	lsls	r3, r3, #26
 8001b2c:	d502      	bpl.n	8001b34 <_printf_common+0x30>
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	3302      	adds	r3, #2
 8001b32:	602b      	str	r3, [r5, #0]
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	2306      	movs	r3, #6
 8001b38:	0017      	movs	r7, r2
 8001b3a:	401f      	ands	r7, r3
 8001b3c:	421a      	tst	r2, r3
 8001b3e:	d027      	beq.n	8001b90 <_printf_common+0x8c>
 8001b40:	0023      	movs	r3, r4
 8001b42:	3343      	adds	r3, #67	; 0x43
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	1e5a      	subs	r2, r3, #1
 8001b48:	4193      	sbcs	r3, r2
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	0692      	lsls	r2, r2, #26
 8001b4e:	d430      	bmi.n	8001bb2 <_printf_common+0xae>
 8001b50:	0022      	movs	r2, r4
 8001b52:	9901      	ldr	r1, [sp, #4]
 8001b54:	9800      	ldr	r0, [sp, #0]
 8001b56:	9e08      	ldr	r6, [sp, #32]
 8001b58:	3243      	adds	r2, #67	; 0x43
 8001b5a:	47b0      	blx	r6
 8001b5c:	1c43      	adds	r3, r0, #1
 8001b5e:	d025      	beq.n	8001bac <_printf_common+0xa8>
 8001b60:	2306      	movs	r3, #6
 8001b62:	6820      	ldr	r0, [r4, #0]
 8001b64:	682a      	ldr	r2, [r5, #0]
 8001b66:	68e1      	ldr	r1, [r4, #12]
 8001b68:	2500      	movs	r5, #0
 8001b6a:	4003      	ands	r3, r0
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d103      	bne.n	8001b78 <_printf_common+0x74>
 8001b70:	1a8d      	subs	r5, r1, r2
 8001b72:	43eb      	mvns	r3, r5
 8001b74:	17db      	asrs	r3, r3, #31
 8001b76:	401d      	ands	r5, r3
 8001b78:	68a3      	ldr	r3, [r4, #8]
 8001b7a:	6922      	ldr	r2, [r4, #16]
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	dd01      	ble.n	8001b84 <_printf_common+0x80>
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	18ed      	adds	r5, r5, r3
 8001b84:	2700      	movs	r7, #0
 8001b86:	42bd      	cmp	r5, r7
 8001b88:	d120      	bne.n	8001bcc <_printf_common+0xc8>
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	e010      	b.n	8001bb0 <_printf_common+0xac>
 8001b8e:	3701      	adds	r7, #1
 8001b90:	68e3      	ldr	r3, [r4, #12]
 8001b92:	682a      	ldr	r2, [r5, #0]
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	42bb      	cmp	r3, r7
 8001b98:	ddd2      	ble.n	8001b40 <_printf_common+0x3c>
 8001b9a:	0022      	movs	r2, r4
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	9901      	ldr	r1, [sp, #4]
 8001ba0:	9800      	ldr	r0, [sp, #0]
 8001ba2:	9e08      	ldr	r6, [sp, #32]
 8001ba4:	3219      	adds	r2, #25
 8001ba6:	47b0      	blx	r6
 8001ba8:	1c43      	adds	r3, r0, #1
 8001baa:	d1f0      	bne.n	8001b8e <_printf_common+0x8a>
 8001bac:	2001      	movs	r0, #1
 8001bae:	4240      	negs	r0, r0
 8001bb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001bb2:	2030      	movs	r0, #48	; 0x30
 8001bb4:	18e1      	adds	r1, r4, r3
 8001bb6:	3143      	adds	r1, #67	; 0x43
 8001bb8:	7008      	strb	r0, [r1, #0]
 8001bba:	0021      	movs	r1, r4
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	3145      	adds	r1, #69	; 0x45
 8001bc0:	7809      	ldrb	r1, [r1, #0]
 8001bc2:	18a2      	adds	r2, r4, r2
 8001bc4:	3243      	adds	r2, #67	; 0x43
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	7011      	strb	r1, [r2, #0]
 8001bca:	e7c1      	b.n	8001b50 <_printf_common+0x4c>
 8001bcc:	0022      	movs	r2, r4
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9901      	ldr	r1, [sp, #4]
 8001bd2:	9800      	ldr	r0, [sp, #0]
 8001bd4:	9e08      	ldr	r6, [sp, #32]
 8001bd6:	321a      	adds	r2, #26
 8001bd8:	47b0      	blx	r6
 8001bda:	1c43      	adds	r3, r0, #1
 8001bdc:	d0e6      	beq.n	8001bac <_printf_common+0xa8>
 8001bde:	3701      	adds	r7, #1
 8001be0:	e7d1      	b.n	8001b86 <_printf_common+0x82>
	...

08001be4 <_printf_i>:
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	b08b      	sub	sp, #44	; 0x2c
 8001be8:	9206      	str	r2, [sp, #24]
 8001bea:	000a      	movs	r2, r1
 8001bec:	3243      	adds	r2, #67	; 0x43
 8001bee:	9307      	str	r3, [sp, #28]
 8001bf0:	9005      	str	r0, [sp, #20]
 8001bf2:	9204      	str	r2, [sp, #16]
 8001bf4:	7e0a      	ldrb	r2, [r1, #24]
 8001bf6:	000c      	movs	r4, r1
 8001bf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001bfa:	2a78      	cmp	r2, #120	; 0x78
 8001bfc:	d807      	bhi.n	8001c0e <_printf_i+0x2a>
 8001bfe:	2a62      	cmp	r2, #98	; 0x62
 8001c00:	d809      	bhi.n	8001c16 <_printf_i+0x32>
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	d100      	bne.n	8001c08 <_printf_i+0x24>
 8001c06:	e0c1      	b.n	8001d8c <_printf_i+0x1a8>
 8001c08:	2a58      	cmp	r2, #88	; 0x58
 8001c0a:	d100      	bne.n	8001c0e <_printf_i+0x2a>
 8001c0c:	e08c      	b.n	8001d28 <_printf_i+0x144>
 8001c0e:	0026      	movs	r6, r4
 8001c10:	3642      	adds	r6, #66	; 0x42
 8001c12:	7032      	strb	r2, [r6, #0]
 8001c14:	e022      	b.n	8001c5c <_printf_i+0x78>
 8001c16:	0010      	movs	r0, r2
 8001c18:	3863      	subs	r0, #99	; 0x63
 8001c1a:	2815      	cmp	r0, #21
 8001c1c:	d8f7      	bhi.n	8001c0e <_printf_i+0x2a>
 8001c1e:	f7fe fa71 	bl	8000104 <__gnu_thumb1_case_shi>
 8001c22:	0016      	.short	0x0016
 8001c24:	fff6001f 	.word	0xfff6001f
 8001c28:	fff6fff6 	.word	0xfff6fff6
 8001c2c:	001ffff6 	.word	0x001ffff6
 8001c30:	fff6fff6 	.word	0xfff6fff6
 8001c34:	fff6fff6 	.word	0xfff6fff6
 8001c38:	003600a8 	.word	0x003600a8
 8001c3c:	fff6009a 	.word	0xfff6009a
 8001c40:	00b9fff6 	.word	0x00b9fff6
 8001c44:	0036fff6 	.word	0x0036fff6
 8001c48:	fff6fff6 	.word	0xfff6fff6
 8001c4c:	009e      	.short	0x009e
 8001c4e:	0026      	movs	r6, r4
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	3642      	adds	r6, #66	; 0x42
 8001c54:	1d11      	adds	r1, r2, #4
 8001c56:	6019      	str	r1, [r3, #0]
 8001c58:	6813      	ldr	r3, [r2, #0]
 8001c5a:	7033      	strb	r3, [r6, #0]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0a7      	b.n	8001db0 <_printf_i+0x1cc>
 8001c60:	6808      	ldr	r0, [r1, #0]
 8001c62:	6819      	ldr	r1, [r3, #0]
 8001c64:	1d0a      	adds	r2, r1, #4
 8001c66:	0605      	lsls	r5, r0, #24
 8001c68:	d50b      	bpl.n	8001c82 <_printf_i+0x9e>
 8001c6a:	680d      	ldr	r5, [r1, #0]
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	da03      	bge.n	8001c7a <_printf_i+0x96>
 8001c72:	232d      	movs	r3, #45	; 0x2d
 8001c74:	9a04      	ldr	r2, [sp, #16]
 8001c76:	426d      	negs	r5, r5
 8001c78:	7013      	strb	r3, [r2, #0]
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <_printf_i+0x21c>)
 8001c7c:	270a      	movs	r7, #10
 8001c7e:	9303      	str	r3, [sp, #12]
 8001c80:	e01b      	b.n	8001cba <_printf_i+0xd6>
 8001c82:	680d      	ldr	r5, [r1, #0]
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	0641      	lsls	r1, r0, #25
 8001c88:	d5f1      	bpl.n	8001c6e <_printf_i+0x8a>
 8001c8a:	b22d      	sxth	r5, r5
 8001c8c:	e7ef      	b.n	8001c6e <_printf_i+0x8a>
 8001c8e:	680d      	ldr	r5, [r1, #0]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	1d08      	adds	r0, r1, #4
 8001c94:	6018      	str	r0, [r3, #0]
 8001c96:	062e      	lsls	r6, r5, #24
 8001c98:	d501      	bpl.n	8001c9e <_printf_i+0xba>
 8001c9a:	680d      	ldr	r5, [r1, #0]
 8001c9c:	e003      	b.n	8001ca6 <_printf_i+0xc2>
 8001c9e:	066d      	lsls	r5, r5, #25
 8001ca0:	d5fb      	bpl.n	8001c9a <_printf_i+0xb6>
 8001ca2:	680d      	ldr	r5, [r1, #0]
 8001ca4:	b2ad      	uxth	r5, r5
 8001ca6:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <_printf_i+0x21c>)
 8001ca8:	2708      	movs	r7, #8
 8001caa:	9303      	str	r3, [sp, #12]
 8001cac:	2a6f      	cmp	r2, #111	; 0x6f
 8001cae:	d000      	beq.n	8001cb2 <_printf_i+0xce>
 8001cb0:	3702      	adds	r7, #2
 8001cb2:	0023      	movs	r3, r4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	3343      	adds	r3, #67	; 0x43
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	60a3      	str	r3, [r4, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db03      	blt.n	8001cca <_printf_i+0xe6>
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	6821      	ldr	r1, [r4, #0]
 8001cc6:	4391      	bics	r1, r2
 8001cc8:	6021      	str	r1, [r4, #0]
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d102      	bne.n	8001cd4 <_printf_i+0xf0>
 8001cce:	9e04      	ldr	r6, [sp, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <_printf_i+0x10a>
 8001cd4:	9e04      	ldr	r6, [sp, #16]
 8001cd6:	0028      	movs	r0, r5
 8001cd8:	0039      	movs	r1, r7
 8001cda:	f7fe faa3 	bl	8000224 <__aeabi_uidivmod>
 8001cde:	9b03      	ldr	r3, [sp, #12]
 8001ce0:	3e01      	subs	r6, #1
 8001ce2:	5c5b      	ldrb	r3, [r3, r1]
 8001ce4:	7033      	strb	r3, [r6, #0]
 8001ce6:	002b      	movs	r3, r5
 8001ce8:	0005      	movs	r5, r0
 8001cea:	429f      	cmp	r7, r3
 8001cec:	d9f3      	bls.n	8001cd6 <_printf_i+0xf2>
 8001cee:	2f08      	cmp	r7, #8
 8001cf0:	d109      	bne.n	8001d06 <_printf_i+0x122>
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	07db      	lsls	r3, r3, #31
 8001cf6:	d506      	bpl.n	8001d06 <_printf_i+0x122>
 8001cf8:	6863      	ldr	r3, [r4, #4]
 8001cfa:	6922      	ldr	r2, [r4, #16]
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	dc02      	bgt.n	8001d06 <_printf_i+0x122>
 8001d00:	2330      	movs	r3, #48	; 0x30
 8001d02:	3e01      	subs	r6, #1
 8001d04:	7033      	strb	r3, [r6, #0]
 8001d06:	9b04      	ldr	r3, [sp, #16]
 8001d08:	1b9b      	subs	r3, r3, r6
 8001d0a:	6123      	str	r3, [r4, #16]
 8001d0c:	9b07      	ldr	r3, [sp, #28]
 8001d0e:	0021      	movs	r1, r4
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	9805      	ldr	r0, [sp, #20]
 8001d14:	9b06      	ldr	r3, [sp, #24]
 8001d16:	aa09      	add	r2, sp, #36	; 0x24
 8001d18:	f7ff fef4 	bl	8001b04 <_printf_common>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d14c      	bne.n	8001dba <_printf_i+0x1d6>
 8001d20:	2001      	movs	r0, #1
 8001d22:	4240      	negs	r0, r0
 8001d24:	b00b      	add	sp, #44	; 0x2c
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d28:	3145      	adds	r1, #69	; 0x45
 8001d2a:	700a      	strb	r2, [r1, #0]
 8001d2c:	4a34      	ldr	r2, [pc, #208]	; (8001e00 <_printf_i+0x21c>)
 8001d2e:	9203      	str	r2, [sp, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	6821      	ldr	r1, [r4, #0]
 8001d34:	ca20      	ldmia	r2!, {r5}
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	0608      	lsls	r0, r1, #24
 8001d3a:	d516      	bpl.n	8001d6a <_printf_i+0x186>
 8001d3c:	07cb      	lsls	r3, r1, #31
 8001d3e:	d502      	bpl.n	8001d46 <_printf_i+0x162>
 8001d40:	2320      	movs	r3, #32
 8001d42:	4319      	orrs	r1, r3
 8001d44:	6021      	str	r1, [r4, #0]
 8001d46:	2710      	movs	r7, #16
 8001d48:	2d00      	cmp	r5, #0
 8001d4a:	d1b2      	bne.n	8001cb2 <_printf_i+0xce>
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	6822      	ldr	r2, [r4, #0]
 8001d50:	439a      	bics	r2, r3
 8001d52:	6022      	str	r2, [r4, #0]
 8001d54:	e7ad      	b.n	8001cb2 <_printf_i+0xce>
 8001d56:	2220      	movs	r2, #32
 8001d58:	6809      	ldr	r1, [r1, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	6022      	str	r2, [r4, #0]
 8001d5e:	0022      	movs	r2, r4
 8001d60:	2178      	movs	r1, #120	; 0x78
 8001d62:	3245      	adds	r2, #69	; 0x45
 8001d64:	7011      	strb	r1, [r2, #0]
 8001d66:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <_printf_i+0x220>)
 8001d68:	e7e1      	b.n	8001d2e <_printf_i+0x14a>
 8001d6a:	0648      	lsls	r0, r1, #25
 8001d6c:	d5e6      	bpl.n	8001d3c <_printf_i+0x158>
 8001d6e:	b2ad      	uxth	r5, r5
 8001d70:	e7e4      	b.n	8001d3c <_printf_i+0x158>
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	680d      	ldr	r5, [r1, #0]
 8001d76:	1d10      	adds	r0, r2, #4
 8001d78:	6949      	ldr	r1, [r1, #20]
 8001d7a:	6018      	str	r0, [r3, #0]
 8001d7c:	6813      	ldr	r3, [r2, #0]
 8001d7e:	062e      	lsls	r6, r5, #24
 8001d80:	d501      	bpl.n	8001d86 <_printf_i+0x1a2>
 8001d82:	6019      	str	r1, [r3, #0]
 8001d84:	e002      	b.n	8001d8c <_printf_i+0x1a8>
 8001d86:	066d      	lsls	r5, r5, #25
 8001d88:	d5fb      	bpl.n	8001d82 <_printf_i+0x19e>
 8001d8a:	8019      	strh	r1, [r3, #0]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9e04      	ldr	r6, [sp, #16]
 8001d90:	6123      	str	r3, [r4, #16]
 8001d92:	e7bb      	b.n	8001d0c <_printf_i+0x128>
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	1d11      	adds	r1, r2, #4
 8001d98:	6019      	str	r1, [r3, #0]
 8001d9a:	6816      	ldr	r6, [r2, #0]
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	0030      	movs	r0, r6
 8001da0:	6862      	ldr	r2, [r4, #4]
 8001da2:	f000 fb45 	bl	8002430 <memchr>
 8001da6:	2800      	cmp	r0, #0
 8001da8:	d001      	beq.n	8001dae <_printf_i+0x1ca>
 8001daa:	1b80      	subs	r0, r0, r6
 8001dac:	6060      	str	r0, [r4, #4]
 8001dae:	6863      	ldr	r3, [r4, #4]
 8001db0:	6123      	str	r3, [r4, #16]
 8001db2:	2300      	movs	r3, #0
 8001db4:	9a04      	ldr	r2, [sp, #16]
 8001db6:	7013      	strb	r3, [r2, #0]
 8001db8:	e7a8      	b.n	8001d0c <_printf_i+0x128>
 8001dba:	6923      	ldr	r3, [r4, #16]
 8001dbc:	0032      	movs	r2, r6
 8001dbe:	9906      	ldr	r1, [sp, #24]
 8001dc0:	9805      	ldr	r0, [sp, #20]
 8001dc2:	9d07      	ldr	r5, [sp, #28]
 8001dc4:	47a8      	blx	r5
 8001dc6:	1c43      	adds	r3, r0, #1
 8001dc8:	d0aa      	beq.n	8001d20 <_printf_i+0x13c>
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	079b      	lsls	r3, r3, #30
 8001dce:	d415      	bmi.n	8001dfc <_printf_i+0x218>
 8001dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dd2:	68e0      	ldr	r0, [r4, #12]
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	daa5      	bge.n	8001d24 <_printf_i+0x140>
 8001dd8:	0018      	movs	r0, r3
 8001dda:	e7a3      	b.n	8001d24 <_printf_i+0x140>
 8001ddc:	0022      	movs	r2, r4
 8001dde:	2301      	movs	r3, #1
 8001de0:	9906      	ldr	r1, [sp, #24]
 8001de2:	9805      	ldr	r0, [sp, #20]
 8001de4:	9e07      	ldr	r6, [sp, #28]
 8001de6:	3219      	adds	r2, #25
 8001de8:	47b0      	blx	r6
 8001dea:	1c43      	adds	r3, r0, #1
 8001dec:	d098      	beq.n	8001d20 <_printf_i+0x13c>
 8001dee:	3501      	adds	r5, #1
 8001df0:	68e3      	ldr	r3, [r4, #12]
 8001df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	42ab      	cmp	r3, r5
 8001df8:	dcf0      	bgt.n	8001ddc <_printf_i+0x1f8>
 8001dfa:	e7e9      	b.n	8001dd0 <_printf_i+0x1ec>
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	e7f7      	b.n	8001df0 <_printf_i+0x20c>
 8001e00:	08002989 	.word	0x08002989
 8001e04:	0800299a 	.word	0x0800299a

08001e08 <__swbuf_r>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	0005      	movs	r5, r0
 8001e0c:	000e      	movs	r6, r1
 8001e0e:	0014      	movs	r4, r2
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d004      	beq.n	8001e1e <__swbuf_r+0x16>
 8001e14:	6983      	ldr	r3, [r0, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <__swbuf_r+0x16>
 8001e1a:	f000 f9f9 	bl	8002210 <__sinit>
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <__swbuf_r+0xa0>)
 8001e20:	429c      	cmp	r4, r3
 8001e22:	d12e      	bne.n	8001e82 <__swbuf_r+0x7a>
 8001e24:	686c      	ldr	r4, [r5, #4]
 8001e26:	69a3      	ldr	r3, [r4, #24]
 8001e28:	60a3      	str	r3, [r4, #8]
 8001e2a:	89a3      	ldrh	r3, [r4, #12]
 8001e2c:	071b      	lsls	r3, r3, #28
 8001e2e:	d532      	bpl.n	8001e96 <__swbuf_r+0x8e>
 8001e30:	6923      	ldr	r3, [r4, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d02f      	beq.n	8001e96 <__swbuf_r+0x8e>
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	6922      	ldr	r2, [r4, #16]
 8001e3a:	b2f7      	uxtb	r7, r6
 8001e3c:	1a98      	subs	r0, r3, r2
 8001e3e:	6963      	ldr	r3, [r4, #20]
 8001e40:	b2f6      	uxtb	r6, r6
 8001e42:	4283      	cmp	r3, r0
 8001e44:	dc05      	bgt.n	8001e52 <__swbuf_r+0x4a>
 8001e46:	0021      	movs	r1, r4
 8001e48:	0028      	movs	r0, r5
 8001e4a:	f000 f93f 	bl	80020cc <_fflush_r>
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	d127      	bne.n	8001ea2 <__swbuf_r+0x9a>
 8001e52:	68a3      	ldr	r3, [r4, #8]
 8001e54:	3001      	adds	r0, #1
 8001e56:	3b01      	subs	r3, #1
 8001e58:	60a3      	str	r3, [r4, #8]
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	6022      	str	r2, [r4, #0]
 8001e60:	701f      	strb	r7, [r3, #0]
 8001e62:	6963      	ldr	r3, [r4, #20]
 8001e64:	4283      	cmp	r3, r0
 8001e66:	d004      	beq.n	8001e72 <__swbuf_r+0x6a>
 8001e68:	89a3      	ldrh	r3, [r4, #12]
 8001e6a:	07db      	lsls	r3, r3, #31
 8001e6c:	d507      	bpl.n	8001e7e <__swbuf_r+0x76>
 8001e6e:	2e0a      	cmp	r6, #10
 8001e70:	d105      	bne.n	8001e7e <__swbuf_r+0x76>
 8001e72:	0021      	movs	r1, r4
 8001e74:	0028      	movs	r0, r5
 8001e76:	f000 f929 	bl	80020cc <_fflush_r>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d111      	bne.n	8001ea2 <__swbuf_r+0x9a>
 8001e7e:	0030      	movs	r0, r6
 8001e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <__swbuf_r+0xa4>)
 8001e84:	429c      	cmp	r4, r3
 8001e86:	d101      	bne.n	8001e8c <__swbuf_r+0x84>
 8001e88:	68ac      	ldr	r4, [r5, #8]
 8001e8a:	e7cc      	b.n	8001e26 <__swbuf_r+0x1e>
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <__swbuf_r+0xa8>)
 8001e8e:	429c      	cmp	r4, r3
 8001e90:	d1c9      	bne.n	8001e26 <__swbuf_r+0x1e>
 8001e92:	68ec      	ldr	r4, [r5, #12]
 8001e94:	e7c7      	b.n	8001e26 <__swbuf_r+0x1e>
 8001e96:	0021      	movs	r1, r4
 8001e98:	0028      	movs	r0, r5
 8001e9a:	f000 f80b 	bl	8001eb4 <__swsetup_r>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d0c9      	beq.n	8001e36 <__swbuf_r+0x2e>
 8001ea2:	2601      	movs	r6, #1
 8001ea4:	4276      	negs	r6, r6
 8001ea6:	e7ea      	b.n	8001e7e <__swbuf_r+0x76>
 8001ea8:	080029cc 	.word	0x080029cc
 8001eac:	080029ec 	.word	0x080029ec
 8001eb0:	080029ac 	.word	0x080029ac

08001eb4 <__swsetup_r>:
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <__swsetup_r+0xe0>)
 8001eb6:	b570      	push	{r4, r5, r6, lr}
 8001eb8:	681d      	ldr	r5, [r3, #0]
 8001eba:	0006      	movs	r6, r0
 8001ebc:	000c      	movs	r4, r1
 8001ebe:	2d00      	cmp	r5, #0
 8001ec0:	d005      	beq.n	8001ece <__swsetup_r+0x1a>
 8001ec2:	69ab      	ldr	r3, [r5, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <__swsetup_r+0x1a>
 8001ec8:	0028      	movs	r0, r5
 8001eca:	f000 f9a1 	bl	8002210 <__sinit>
 8001ece:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <__swsetup_r+0xe4>)
 8001ed0:	429c      	cmp	r4, r3
 8001ed2:	d10f      	bne.n	8001ef4 <__swsetup_r+0x40>
 8001ed4:	686c      	ldr	r4, [r5, #4]
 8001ed6:	230c      	movs	r3, #12
 8001ed8:	5ee2      	ldrsh	r2, [r4, r3]
 8001eda:	b293      	uxth	r3, r2
 8001edc:	0711      	lsls	r1, r2, #28
 8001ede:	d42d      	bmi.n	8001f3c <__swsetup_r+0x88>
 8001ee0:	06d9      	lsls	r1, r3, #27
 8001ee2:	d411      	bmi.n	8001f08 <__swsetup_r+0x54>
 8001ee4:	2309      	movs	r3, #9
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	6033      	str	r3, [r6, #0]
 8001eea:	3337      	adds	r3, #55	; 0x37
 8001eec:	4313      	orrs	r3, r2
 8001eee:	81a3      	strh	r3, [r4, #12]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <__swsetup_r+0xe8>)
 8001ef6:	429c      	cmp	r4, r3
 8001ef8:	d101      	bne.n	8001efe <__swsetup_r+0x4a>
 8001efa:	68ac      	ldr	r4, [r5, #8]
 8001efc:	e7eb      	b.n	8001ed6 <__swsetup_r+0x22>
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <__swsetup_r+0xec>)
 8001f00:	429c      	cmp	r4, r3
 8001f02:	d1e8      	bne.n	8001ed6 <__swsetup_r+0x22>
 8001f04:	68ec      	ldr	r4, [r5, #12]
 8001f06:	e7e6      	b.n	8001ed6 <__swsetup_r+0x22>
 8001f08:	075b      	lsls	r3, r3, #29
 8001f0a:	d513      	bpl.n	8001f34 <__swsetup_r+0x80>
 8001f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	d008      	beq.n	8001f24 <__swsetup_r+0x70>
 8001f12:	0023      	movs	r3, r4
 8001f14:	3344      	adds	r3, #68	; 0x44
 8001f16:	4299      	cmp	r1, r3
 8001f18:	d002      	beq.n	8001f20 <__swsetup_r+0x6c>
 8001f1a:	0030      	movs	r0, r6
 8001f1c:	f000 fa94 	bl	8002448 <_free_r>
 8001f20:	2300      	movs	r3, #0
 8001f22:	6363      	str	r3, [r4, #52]	; 0x34
 8001f24:	2224      	movs	r2, #36	; 0x24
 8001f26:	89a3      	ldrh	r3, [r4, #12]
 8001f28:	4393      	bics	r3, r2
 8001f2a:	81a3      	strh	r3, [r4, #12]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	6063      	str	r3, [r4, #4]
 8001f30:	6923      	ldr	r3, [r4, #16]
 8001f32:	6023      	str	r3, [r4, #0]
 8001f34:	2308      	movs	r3, #8
 8001f36:	89a2      	ldrh	r2, [r4, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	81a3      	strh	r3, [r4, #12]
 8001f3c:	6923      	ldr	r3, [r4, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10b      	bne.n	8001f5a <__swsetup_r+0xa6>
 8001f42:	21a0      	movs	r1, #160	; 0xa0
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	0089      	lsls	r1, r1, #2
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <__swsetup_r+0xa6>
 8001f52:	0021      	movs	r1, r4
 8001f54:	0030      	movs	r0, r6
 8001f56:	f000 fa27 	bl	80023a8 <__smakebuf_r>
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	5ea3      	ldrsh	r3, [r4, r2]
 8001f5e:	2001      	movs	r0, #1
 8001f60:	001a      	movs	r2, r3
 8001f62:	b299      	uxth	r1, r3
 8001f64:	4002      	ands	r2, r0
 8001f66:	4203      	tst	r3, r0
 8001f68:	d00f      	beq.n	8001f8a <__swsetup_r+0xd6>
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60a2      	str	r2, [r4, #8]
 8001f6e:	6962      	ldr	r2, [r4, #20]
 8001f70:	4252      	negs	r2, r2
 8001f72:	61a2      	str	r2, [r4, #24]
 8001f74:	2000      	movs	r0, #0
 8001f76:	6922      	ldr	r2, [r4, #16]
 8001f78:	4282      	cmp	r2, r0
 8001f7a:	d1ba      	bne.n	8001ef2 <__swsetup_r+0x3e>
 8001f7c:	060a      	lsls	r2, r1, #24
 8001f7e:	d5b8      	bpl.n	8001ef2 <__swsetup_r+0x3e>
 8001f80:	2240      	movs	r2, #64	; 0x40
 8001f82:	4313      	orrs	r3, r2
 8001f84:	81a3      	strh	r3, [r4, #12]
 8001f86:	3801      	subs	r0, #1
 8001f88:	e7b3      	b.n	8001ef2 <__swsetup_r+0x3e>
 8001f8a:	0788      	lsls	r0, r1, #30
 8001f8c:	d400      	bmi.n	8001f90 <__swsetup_r+0xdc>
 8001f8e:	6962      	ldr	r2, [r4, #20]
 8001f90:	60a2      	str	r2, [r4, #8]
 8001f92:	e7ef      	b.n	8001f74 <__swsetup_r+0xc0>
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	080029cc 	.word	0x080029cc
 8001f9c:	080029ec 	.word	0x080029ec
 8001fa0:	080029ac 	.word	0x080029ac

08001fa4 <abort>:
 8001fa4:	2006      	movs	r0, #6
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	f000 fb6c 	bl	8002684 <raise>
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7fe fb3c 	bl	800062a <_exit>
	...

08001fb4 <__sflush_r>:
 8001fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fb6:	898b      	ldrh	r3, [r1, #12]
 8001fb8:	0005      	movs	r5, r0
 8001fba:	000c      	movs	r4, r1
 8001fbc:	071a      	lsls	r2, r3, #28
 8001fbe:	d45f      	bmi.n	8002080 <__sflush_r+0xcc>
 8001fc0:	684a      	ldr	r2, [r1, #4]
 8001fc2:	2a00      	cmp	r2, #0
 8001fc4:	dc04      	bgt.n	8001fd0 <__sflush_r+0x1c>
 8001fc6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	dc01      	bgt.n	8001fd0 <__sflush_r+0x1c>
 8001fcc:	2000      	movs	r0, #0
 8001fce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fd0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001fd2:	2f00      	cmp	r7, #0
 8001fd4:	d0fa      	beq.n	8001fcc <__sflush_r+0x18>
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	682e      	ldr	r6, [r5, #0]
 8001fdc:	602a      	str	r2, [r5, #0]
 8001fde:	001a      	movs	r2, r3
 8001fe0:	0149      	lsls	r1, r1, #5
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	420b      	tst	r3, r1
 8001fe6:	d034      	beq.n	8002052 <__sflush_r+0x9e>
 8001fe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fea:	89a3      	ldrh	r3, [r4, #12]
 8001fec:	075b      	lsls	r3, r3, #29
 8001fee:	d506      	bpl.n	8001ffe <__sflush_r+0x4a>
 8001ff0:	6863      	ldr	r3, [r4, #4]
 8001ff2:	1ac0      	subs	r0, r0, r3
 8001ff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <__sflush_r+0x4a>
 8001ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ffc:	1ac0      	subs	r0, r0, r3
 8001ffe:	0002      	movs	r2, r0
 8002000:	6a21      	ldr	r1, [r4, #32]
 8002002:	2300      	movs	r3, #0
 8002004:	0028      	movs	r0, r5
 8002006:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002008:	47b8      	blx	r7
 800200a:	89a1      	ldrh	r1, [r4, #12]
 800200c:	1c43      	adds	r3, r0, #1
 800200e:	d106      	bne.n	800201e <__sflush_r+0x6a>
 8002010:	682b      	ldr	r3, [r5, #0]
 8002012:	2b1d      	cmp	r3, #29
 8002014:	d831      	bhi.n	800207a <__sflush_r+0xc6>
 8002016:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <__sflush_r+0x114>)
 8002018:	40da      	lsrs	r2, r3
 800201a:	07d3      	lsls	r3, r2, #31
 800201c:	d52d      	bpl.n	800207a <__sflush_r+0xc6>
 800201e:	2300      	movs	r3, #0
 8002020:	6063      	str	r3, [r4, #4]
 8002022:	6923      	ldr	r3, [r4, #16]
 8002024:	6023      	str	r3, [r4, #0]
 8002026:	04cb      	lsls	r3, r1, #19
 8002028:	d505      	bpl.n	8002036 <__sflush_r+0x82>
 800202a:	1c43      	adds	r3, r0, #1
 800202c:	d102      	bne.n	8002034 <__sflush_r+0x80>
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d100      	bne.n	8002036 <__sflush_r+0x82>
 8002034:	6560      	str	r0, [r4, #84]	; 0x54
 8002036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002038:	602e      	str	r6, [r5, #0]
 800203a:	2900      	cmp	r1, #0
 800203c:	d0c6      	beq.n	8001fcc <__sflush_r+0x18>
 800203e:	0023      	movs	r3, r4
 8002040:	3344      	adds	r3, #68	; 0x44
 8002042:	4299      	cmp	r1, r3
 8002044:	d002      	beq.n	800204c <__sflush_r+0x98>
 8002046:	0028      	movs	r0, r5
 8002048:	f000 f9fe 	bl	8002448 <_free_r>
 800204c:	2000      	movs	r0, #0
 800204e:	6360      	str	r0, [r4, #52]	; 0x34
 8002050:	e7bd      	b.n	8001fce <__sflush_r+0x1a>
 8002052:	2301      	movs	r3, #1
 8002054:	0028      	movs	r0, r5
 8002056:	6a21      	ldr	r1, [r4, #32]
 8002058:	47b8      	blx	r7
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	d1c5      	bne.n	8001fea <__sflush_r+0x36>
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0c2      	beq.n	8001fea <__sflush_r+0x36>
 8002064:	2b1d      	cmp	r3, #29
 8002066:	d001      	beq.n	800206c <__sflush_r+0xb8>
 8002068:	2b16      	cmp	r3, #22
 800206a:	d101      	bne.n	8002070 <__sflush_r+0xbc>
 800206c:	602e      	str	r6, [r5, #0]
 800206e:	e7ad      	b.n	8001fcc <__sflush_r+0x18>
 8002070:	2340      	movs	r3, #64	; 0x40
 8002072:	89a2      	ldrh	r2, [r4, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	81a3      	strh	r3, [r4, #12]
 8002078:	e7a9      	b.n	8001fce <__sflush_r+0x1a>
 800207a:	2340      	movs	r3, #64	; 0x40
 800207c:	430b      	orrs	r3, r1
 800207e:	e7fa      	b.n	8002076 <__sflush_r+0xc2>
 8002080:	690f      	ldr	r7, [r1, #16]
 8002082:	2f00      	cmp	r7, #0
 8002084:	d0a2      	beq.n	8001fcc <__sflush_r+0x18>
 8002086:	680a      	ldr	r2, [r1, #0]
 8002088:	600f      	str	r7, [r1, #0]
 800208a:	1bd2      	subs	r2, r2, r7
 800208c:	9201      	str	r2, [sp, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	079b      	lsls	r3, r3, #30
 8002092:	d100      	bne.n	8002096 <__sflush_r+0xe2>
 8002094:	694a      	ldr	r2, [r1, #20]
 8002096:	60a2      	str	r2, [r4, #8]
 8002098:	9b01      	ldr	r3, [sp, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	dc00      	bgt.n	80020a0 <__sflush_r+0xec>
 800209e:	e795      	b.n	8001fcc <__sflush_r+0x18>
 80020a0:	003a      	movs	r2, r7
 80020a2:	0028      	movs	r0, r5
 80020a4:	9b01      	ldr	r3, [sp, #4]
 80020a6:	6a21      	ldr	r1, [r4, #32]
 80020a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020aa:	47b0      	blx	r6
 80020ac:	2800      	cmp	r0, #0
 80020ae:	dc06      	bgt.n	80020be <__sflush_r+0x10a>
 80020b0:	2340      	movs	r3, #64	; 0x40
 80020b2:	2001      	movs	r0, #1
 80020b4:	89a2      	ldrh	r2, [r4, #12]
 80020b6:	4240      	negs	r0, r0
 80020b8:	4313      	orrs	r3, r2
 80020ba:	81a3      	strh	r3, [r4, #12]
 80020bc:	e787      	b.n	8001fce <__sflush_r+0x1a>
 80020be:	9b01      	ldr	r3, [sp, #4]
 80020c0:	183f      	adds	r7, r7, r0
 80020c2:	1a1b      	subs	r3, r3, r0
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	e7e7      	b.n	8002098 <__sflush_r+0xe4>
 80020c8:	20400001 	.word	0x20400001

080020cc <_fflush_r>:
 80020cc:	690b      	ldr	r3, [r1, #16]
 80020ce:	b570      	push	{r4, r5, r6, lr}
 80020d0:	0005      	movs	r5, r0
 80020d2:	000c      	movs	r4, r1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_fflush_r+0x12>
 80020d8:	2500      	movs	r5, #0
 80020da:	0028      	movs	r0, r5
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
 80020de:	2800      	cmp	r0, #0
 80020e0:	d004      	beq.n	80020ec <_fflush_r+0x20>
 80020e2:	6983      	ldr	r3, [r0, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <_fflush_r+0x20>
 80020e8:	f000 f892 	bl	8002210 <__sinit>
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <_fflush_r+0x74>)
 80020ee:	429c      	cmp	r4, r3
 80020f0:	d11b      	bne.n	800212a <_fflush_r+0x5e>
 80020f2:	686c      	ldr	r4, [r5, #4]
 80020f4:	220c      	movs	r2, #12
 80020f6:	5ea3      	ldrsh	r3, [r4, r2]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ed      	beq.n	80020d8 <_fflush_r+0xc>
 80020fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80020fe:	07d2      	lsls	r2, r2, #31
 8002100:	d404      	bmi.n	800210c <_fflush_r+0x40>
 8002102:	059b      	lsls	r3, r3, #22
 8002104:	d402      	bmi.n	800210c <_fflush_r+0x40>
 8002106:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002108:	f000 f923 	bl	8002352 <__retarget_lock_acquire_recursive>
 800210c:	0028      	movs	r0, r5
 800210e:	0021      	movs	r1, r4
 8002110:	f7ff ff50 	bl	8001fb4 <__sflush_r>
 8002114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002116:	0005      	movs	r5, r0
 8002118:	07db      	lsls	r3, r3, #31
 800211a:	d4de      	bmi.n	80020da <_fflush_r+0xe>
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	059b      	lsls	r3, r3, #22
 8002120:	d4db      	bmi.n	80020da <_fflush_r+0xe>
 8002122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002124:	f000 f916 	bl	8002354 <__retarget_lock_release_recursive>
 8002128:	e7d7      	b.n	80020da <_fflush_r+0xe>
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <_fflush_r+0x78>)
 800212c:	429c      	cmp	r4, r3
 800212e:	d101      	bne.n	8002134 <_fflush_r+0x68>
 8002130:	68ac      	ldr	r4, [r5, #8]
 8002132:	e7df      	b.n	80020f4 <_fflush_r+0x28>
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <_fflush_r+0x7c>)
 8002136:	429c      	cmp	r4, r3
 8002138:	d1dc      	bne.n	80020f4 <_fflush_r+0x28>
 800213a:	68ec      	ldr	r4, [r5, #12]
 800213c:	e7da      	b.n	80020f4 <_fflush_r+0x28>
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	080029cc 	.word	0x080029cc
 8002144:	080029ec 	.word	0x080029ec
 8002148:	080029ac 	.word	0x080029ac

0800214c <std>:
 800214c:	2300      	movs	r3, #0
 800214e:	b510      	push	{r4, lr}
 8002150:	0004      	movs	r4, r0
 8002152:	6003      	str	r3, [r0, #0]
 8002154:	6043      	str	r3, [r0, #4]
 8002156:	6083      	str	r3, [r0, #8]
 8002158:	8181      	strh	r1, [r0, #12]
 800215a:	6643      	str	r3, [r0, #100]	; 0x64
 800215c:	0019      	movs	r1, r3
 800215e:	81c2      	strh	r2, [r0, #14]
 8002160:	6103      	str	r3, [r0, #16]
 8002162:	6143      	str	r3, [r0, #20]
 8002164:	6183      	str	r3, [r0, #24]
 8002166:	2208      	movs	r2, #8
 8002168:	305c      	adds	r0, #92	; 0x5c
 800216a:	f7ff fb61 	bl	8001830 <memset>
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <std+0x38>)
 8002170:	6224      	str	r4, [r4, #32]
 8002172:	6263      	str	r3, [r4, #36]	; 0x24
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <std+0x3c>)
 8002176:	62a3      	str	r3, [r4, #40]	; 0x28
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <std+0x40>)
 800217a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <std+0x44>)
 800217e:	6323      	str	r3, [r4, #48]	; 0x30
 8002180:	bd10      	pop	{r4, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	080026c5 	.word	0x080026c5
 8002188:	080026ed 	.word	0x080026ed
 800218c:	08002725 	.word	0x08002725
 8002190:	08002751 	.word	0x08002751

08002194 <_cleanup_r>:
 8002194:	b510      	push	{r4, lr}
 8002196:	4902      	ldr	r1, [pc, #8]	; (80021a0 <_cleanup_r+0xc>)
 8002198:	f000 f8ba 	bl	8002310 <_fwalk_reent>
 800219c:	bd10      	pop	{r4, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	080020cd 	.word	0x080020cd

080021a4 <__sfmoreglue>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	2568      	movs	r5, #104	; 0x68
 80021a8:	1e4a      	subs	r2, r1, #1
 80021aa:	4355      	muls	r5, r2
 80021ac:	000e      	movs	r6, r1
 80021ae:	0029      	movs	r1, r5
 80021b0:	3174      	adds	r1, #116	; 0x74
 80021b2:	f000 f9b5 	bl	8002520 <_malloc_r>
 80021b6:	1e04      	subs	r4, r0, #0
 80021b8:	d008      	beq.n	80021cc <__sfmoreglue+0x28>
 80021ba:	2100      	movs	r1, #0
 80021bc:	002a      	movs	r2, r5
 80021be:	6001      	str	r1, [r0, #0]
 80021c0:	6046      	str	r6, [r0, #4]
 80021c2:	300c      	adds	r0, #12
 80021c4:	60a0      	str	r0, [r4, #8]
 80021c6:	3268      	adds	r2, #104	; 0x68
 80021c8:	f7ff fb32 	bl	8001830 <memset>
 80021cc:	0020      	movs	r0, r4
 80021ce:	bd70      	pop	{r4, r5, r6, pc}

080021d0 <__sfp_lock_acquire>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	4802      	ldr	r0, [pc, #8]	; (80021dc <__sfp_lock_acquire+0xc>)
 80021d4:	f000 f8bd 	bl	8002352 <__retarget_lock_acquire_recursive>
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	20000095 	.word	0x20000095

080021e0 <__sfp_lock_release>:
 80021e0:	b510      	push	{r4, lr}
 80021e2:	4802      	ldr	r0, [pc, #8]	; (80021ec <__sfp_lock_release+0xc>)
 80021e4:	f000 f8b6 	bl	8002354 <__retarget_lock_release_recursive>
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	20000095 	.word	0x20000095

080021f0 <__sinit_lock_acquire>:
 80021f0:	b510      	push	{r4, lr}
 80021f2:	4802      	ldr	r0, [pc, #8]	; (80021fc <__sinit_lock_acquire+0xc>)
 80021f4:	f000 f8ad 	bl	8002352 <__retarget_lock_acquire_recursive>
 80021f8:	bd10      	pop	{r4, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	20000096 	.word	0x20000096

08002200 <__sinit_lock_release>:
 8002200:	b510      	push	{r4, lr}
 8002202:	4802      	ldr	r0, [pc, #8]	; (800220c <__sinit_lock_release+0xc>)
 8002204:	f000 f8a6 	bl	8002354 <__retarget_lock_release_recursive>
 8002208:	bd10      	pop	{r4, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	20000096 	.word	0x20000096

08002210 <__sinit>:
 8002210:	b513      	push	{r0, r1, r4, lr}
 8002212:	0004      	movs	r4, r0
 8002214:	f7ff ffec 	bl	80021f0 <__sinit_lock_acquire>
 8002218:	69a3      	ldr	r3, [r4, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <__sinit+0x14>
 800221e:	f7ff ffef 	bl	8002200 <__sinit_lock_release>
 8002222:	bd13      	pop	{r0, r1, r4, pc}
 8002224:	64a3      	str	r3, [r4, #72]	; 0x48
 8002226:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002228:	6523      	str	r3, [r4, #80]	; 0x50
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <__sinit+0x68>)
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <__sinit+0x6c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	62a2      	str	r2, [r4, #40]	; 0x28
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	42a3      	cmp	r3, r4
 8002236:	d101      	bne.n	800223c <__sinit+0x2c>
 8002238:	2301      	movs	r3, #1
 800223a:	61a3      	str	r3, [r4, #24]
 800223c:	0020      	movs	r0, r4
 800223e:	f000 f81f 	bl	8002280 <__sfp>
 8002242:	6060      	str	r0, [r4, #4]
 8002244:	0020      	movs	r0, r4
 8002246:	f000 f81b 	bl	8002280 <__sfp>
 800224a:	60a0      	str	r0, [r4, #8]
 800224c:	0020      	movs	r0, r4
 800224e:	f000 f817 	bl	8002280 <__sfp>
 8002252:	2200      	movs	r2, #0
 8002254:	2104      	movs	r1, #4
 8002256:	60e0      	str	r0, [r4, #12]
 8002258:	6860      	ldr	r0, [r4, #4]
 800225a:	f7ff ff77 	bl	800214c <std>
 800225e:	2201      	movs	r2, #1
 8002260:	2109      	movs	r1, #9
 8002262:	68a0      	ldr	r0, [r4, #8]
 8002264:	f7ff ff72 	bl	800214c <std>
 8002268:	2202      	movs	r2, #2
 800226a:	2112      	movs	r1, #18
 800226c:	68e0      	ldr	r0, [r4, #12]
 800226e:	f7ff ff6d 	bl	800214c <std>
 8002272:	2301      	movs	r3, #1
 8002274:	61a3      	str	r3, [r4, #24]
 8002276:	e7d2      	b.n	800221e <__sinit+0xe>
 8002278:	08002974 	.word	0x08002974
 800227c:	08002195 	.word	0x08002195

08002280 <__sfp>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	0007      	movs	r7, r0
 8002284:	f7ff ffa4 	bl	80021d0 <__sfp_lock_acquire>
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <__sfp+0x88>)
 800228a:	681e      	ldr	r6, [r3, #0]
 800228c:	69b3      	ldr	r3, [r6, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <__sfp+0x18>
 8002292:	0030      	movs	r0, r6
 8002294:	f7ff ffbc 	bl	8002210 <__sinit>
 8002298:	3648      	adds	r6, #72	; 0x48
 800229a:	68b4      	ldr	r4, [r6, #8]
 800229c:	6873      	ldr	r3, [r6, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	d504      	bpl.n	80022ac <__sfp+0x2c>
 80022a2:	6833      	ldr	r3, [r6, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d022      	beq.n	80022ee <__sfp+0x6e>
 80022a8:	6836      	ldr	r6, [r6, #0]
 80022aa:	e7f6      	b.n	800229a <__sfp+0x1a>
 80022ac:	220c      	movs	r2, #12
 80022ae:	5ea5      	ldrsh	r5, [r4, r2]
 80022b0:	2d00      	cmp	r5, #0
 80022b2:	d11a      	bne.n	80022ea <__sfp+0x6a>
 80022b4:	0020      	movs	r0, r4
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <__sfp+0x8c>)
 80022b8:	3058      	adds	r0, #88	; 0x58
 80022ba:	60e3      	str	r3, [r4, #12]
 80022bc:	6665      	str	r5, [r4, #100]	; 0x64
 80022be:	f000 f847 	bl	8002350 <__retarget_lock_init_recursive>
 80022c2:	f7ff ff8d 	bl	80021e0 <__sfp_lock_release>
 80022c6:	0020      	movs	r0, r4
 80022c8:	2208      	movs	r2, #8
 80022ca:	0029      	movs	r1, r5
 80022cc:	6025      	str	r5, [r4, #0]
 80022ce:	60a5      	str	r5, [r4, #8]
 80022d0:	6065      	str	r5, [r4, #4]
 80022d2:	6125      	str	r5, [r4, #16]
 80022d4:	6165      	str	r5, [r4, #20]
 80022d6:	61a5      	str	r5, [r4, #24]
 80022d8:	305c      	adds	r0, #92	; 0x5c
 80022da:	f7ff faa9 	bl	8001830 <memset>
 80022de:	6365      	str	r5, [r4, #52]	; 0x34
 80022e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80022e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80022e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80022e6:	0020      	movs	r0, r4
 80022e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ea:	3468      	adds	r4, #104	; 0x68
 80022ec:	e7d7      	b.n	800229e <__sfp+0x1e>
 80022ee:	2104      	movs	r1, #4
 80022f0:	0038      	movs	r0, r7
 80022f2:	f7ff ff57 	bl	80021a4 <__sfmoreglue>
 80022f6:	1e04      	subs	r4, r0, #0
 80022f8:	6030      	str	r0, [r6, #0]
 80022fa:	d1d5      	bne.n	80022a8 <__sfp+0x28>
 80022fc:	f7ff ff70 	bl	80021e0 <__sfp_lock_release>
 8002300:	230c      	movs	r3, #12
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	e7ef      	b.n	80022e6 <__sfp+0x66>
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	08002974 	.word	0x08002974
 800230c:	ffff0001 	.word	0xffff0001

08002310 <_fwalk_reent>:
 8002310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002312:	0004      	movs	r4, r0
 8002314:	0006      	movs	r6, r0
 8002316:	2700      	movs	r7, #0
 8002318:	9101      	str	r1, [sp, #4]
 800231a:	3448      	adds	r4, #72	; 0x48
 800231c:	6863      	ldr	r3, [r4, #4]
 800231e:	68a5      	ldr	r5, [r4, #8]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	9b00      	ldr	r3, [sp, #0]
 8002324:	3b01      	subs	r3, #1
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	d504      	bpl.n	8002334 <_fwalk_reent+0x24>
 800232a:	6824      	ldr	r4, [r4, #0]
 800232c:	2c00      	cmp	r4, #0
 800232e:	d1f5      	bne.n	800231c <_fwalk_reent+0xc>
 8002330:	0038      	movs	r0, r7
 8002332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002334:	89ab      	ldrh	r3, [r5, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d908      	bls.n	800234c <_fwalk_reent+0x3c>
 800233a:	220e      	movs	r2, #14
 800233c:	5eab      	ldrsh	r3, [r5, r2]
 800233e:	3301      	adds	r3, #1
 8002340:	d004      	beq.n	800234c <_fwalk_reent+0x3c>
 8002342:	0029      	movs	r1, r5
 8002344:	0030      	movs	r0, r6
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	4798      	blx	r3
 800234a:	4307      	orrs	r7, r0
 800234c:	3568      	adds	r5, #104	; 0x68
 800234e:	e7e8      	b.n	8002322 <_fwalk_reent+0x12>

08002350 <__retarget_lock_init_recursive>:
 8002350:	4770      	bx	lr

08002352 <__retarget_lock_acquire_recursive>:
 8002352:	4770      	bx	lr

08002354 <__retarget_lock_release_recursive>:
 8002354:	4770      	bx	lr
	...

08002358 <__swhatbuf_r>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	000e      	movs	r6, r1
 800235c:	001d      	movs	r5, r3
 800235e:	230e      	movs	r3, #14
 8002360:	5ec9      	ldrsh	r1, [r1, r3]
 8002362:	0014      	movs	r4, r2
 8002364:	b096      	sub	sp, #88	; 0x58
 8002366:	2900      	cmp	r1, #0
 8002368:	da08      	bge.n	800237c <__swhatbuf_r+0x24>
 800236a:	220c      	movs	r2, #12
 800236c:	5eb3      	ldrsh	r3, [r6, r2]
 800236e:	2200      	movs	r2, #0
 8002370:	602a      	str	r2, [r5, #0]
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	d411      	bmi.n	800239a <__swhatbuf_r+0x42>
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	e00f      	b.n	800239c <__swhatbuf_r+0x44>
 800237c:	466a      	mov	r2, sp
 800237e:	f000 fa13 	bl	80027a8 <_fstat_r>
 8002382:	2800      	cmp	r0, #0
 8002384:	dbf1      	blt.n	800236a <__swhatbuf_r+0x12>
 8002386:	23f0      	movs	r3, #240	; 0xf0
 8002388:	9901      	ldr	r1, [sp, #4]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	4019      	ands	r1, r3
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <__swhatbuf_r+0x4c>)
 8002390:	18c9      	adds	r1, r1, r3
 8002392:	424b      	negs	r3, r1
 8002394:	4159      	adcs	r1, r3
 8002396:	6029      	str	r1, [r5, #0]
 8002398:	e7ed      	b.n	8002376 <__swhatbuf_r+0x1e>
 800239a:	2340      	movs	r3, #64	; 0x40
 800239c:	2000      	movs	r0, #0
 800239e:	6023      	str	r3, [r4, #0]
 80023a0:	b016      	add	sp, #88	; 0x58
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
 80023a4:	ffffe000 	.word	0xffffe000

080023a8 <__smakebuf_r>:
 80023a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023aa:	2602      	movs	r6, #2
 80023ac:	898b      	ldrh	r3, [r1, #12]
 80023ae:	0005      	movs	r5, r0
 80023b0:	000c      	movs	r4, r1
 80023b2:	4233      	tst	r3, r6
 80023b4:	d006      	beq.n	80023c4 <__smakebuf_r+0x1c>
 80023b6:	0023      	movs	r3, r4
 80023b8:	3347      	adds	r3, #71	; 0x47
 80023ba:	6023      	str	r3, [r4, #0]
 80023bc:	6123      	str	r3, [r4, #16]
 80023be:	2301      	movs	r3, #1
 80023c0:	6163      	str	r3, [r4, #20]
 80023c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80023c4:	466a      	mov	r2, sp
 80023c6:	ab01      	add	r3, sp, #4
 80023c8:	f7ff ffc6 	bl	8002358 <__swhatbuf_r>
 80023cc:	9900      	ldr	r1, [sp, #0]
 80023ce:	0007      	movs	r7, r0
 80023d0:	0028      	movs	r0, r5
 80023d2:	f000 f8a5 	bl	8002520 <_malloc_r>
 80023d6:	2800      	cmp	r0, #0
 80023d8:	d108      	bne.n	80023ec <__smakebuf_r+0x44>
 80023da:	220c      	movs	r2, #12
 80023dc:	5ea3      	ldrsh	r3, [r4, r2]
 80023de:	059a      	lsls	r2, r3, #22
 80023e0:	d4ef      	bmi.n	80023c2 <__smakebuf_r+0x1a>
 80023e2:	2203      	movs	r2, #3
 80023e4:	4393      	bics	r3, r2
 80023e6:	431e      	orrs	r6, r3
 80023e8:	81a6      	strh	r6, [r4, #12]
 80023ea:	e7e4      	b.n	80023b6 <__smakebuf_r+0xe>
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <__smakebuf_r+0x84>)
 80023ee:	62ab      	str	r3, [r5, #40]	; 0x28
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	89a2      	ldrh	r2, [r4, #12]
 80023f4:	6020      	str	r0, [r4, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	81a3      	strh	r3, [r4, #12]
 80023fa:	9b00      	ldr	r3, [sp, #0]
 80023fc:	6120      	str	r0, [r4, #16]
 80023fe:	6163      	str	r3, [r4, #20]
 8002400:	9b01      	ldr	r3, [sp, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00d      	beq.n	8002422 <__smakebuf_r+0x7a>
 8002406:	0028      	movs	r0, r5
 8002408:	230e      	movs	r3, #14
 800240a:	5ee1      	ldrsh	r1, [r4, r3]
 800240c:	f000 f9de 	bl	80027cc <_isatty_r>
 8002410:	2800      	cmp	r0, #0
 8002412:	d006      	beq.n	8002422 <__smakebuf_r+0x7a>
 8002414:	2203      	movs	r2, #3
 8002416:	89a3      	ldrh	r3, [r4, #12]
 8002418:	4393      	bics	r3, r2
 800241a:	001a      	movs	r2, r3
 800241c:	2301      	movs	r3, #1
 800241e:	4313      	orrs	r3, r2
 8002420:	81a3      	strh	r3, [r4, #12]
 8002422:	89a0      	ldrh	r0, [r4, #12]
 8002424:	4307      	orrs	r7, r0
 8002426:	81a7      	strh	r7, [r4, #12]
 8002428:	e7cb      	b.n	80023c2 <__smakebuf_r+0x1a>
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	08002195 	.word	0x08002195

08002430 <memchr>:
 8002430:	b2c9      	uxtb	r1, r1
 8002432:	1882      	adds	r2, r0, r2
 8002434:	4290      	cmp	r0, r2
 8002436:	d101      	bne.n	800243c <memchr+0xc>
 8002438:	2000      	movs	r0, #0
 800243a:	4770      	bx	lr
 800243c:	7803      	ldrb	r3, [r0, #0]
 800243e:	428b      	cmp	r3, r1
 8002440:	d0fb      	beq.n	800243a <memchr+0xa>
 8002442:	3001      	adds	r0, #1
 8002444:	e7f6      	b.n	8002434 <memchr+0x4>
	...

08002448 <_free_r>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	0005      	movs	r5, r0
 800244c:	2900      	cmp	r1, #0
 800244e:	d010      	beq.n	8002472 <_free_r+0x2a>
 8002450:	1f0c      	subs	r4, r1, #4
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	da00      	bge.n	800245a <_free_r+0x12>
 8002458:	18e4      	adds	r4, r4, r3
 800245a:	0028      	movs	r0, r5
 800245c:	f000 f9dc 	bl	8002818 <__malloc_lock>
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <_free_r+0x90>)
 8002462:	6813      	ldr	r3, [r2, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <_free_r+0x2c>
 8002468:	6063      	str	r3, [r4, #4]
 800246a:	6014      	str	r4, [r2, #0]
 800246c:	0028      	movs	r0, r5
 800246e:	f000 f9db 	bl	8002828 <__malloc_unlock>
 8002472:	bd70      	pop	{r4, r5, r6, pc}
 8002474:	42a3      	cmp	r3, r4
 8002476:	d908      	bls.n	800248a <_free_r+0x42>
 8002478:	6821      	ldr	r1, [r4, #0]
 800247a:	1860      	adds	r0, r4, r1
 800247c:	4283      	cmp	r3, r0
 800247e:	d1f3      	bne.n	8002468 <_free_r+0x20>
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	1841      	adds	r1, r0, r1
 8002486:	6021      	str	r1, [r4, #0]
 8002488:	e7ee      	b.n	8002468 <_free_r+0x20>
 800248a:	001a      	movs	r2, r3
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <_free_r+0x4e>
 8002492:	42a3      	cmp	r3, r4
 8002494:	d9f9      	bls.n	800248a <_free_r+0x42>
 8002496:	6811      	ldr	r1, [r2, #0]
 8002498:	1850      	adds	r0, r2, r1
 800249a:	42a0      	cmp	r0, r4
 800249c:	d10b      	bne.n	80024b6 <_free_r+0x6e>
 800249e:	6820      	ldr	r0, [r4, #0]
 80024a0:	1809      	adds	r1, r1, r0
 80024a2:	1850      	adds	r0, r2, r1
 80024a4:	6011      	str	r1, [r2, #0]
 80024a6:	4283      	cmp	r3, r0
 80024a8:	d1e0      	bne.n	800246c <_free_r+0x24>
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	1841      	adds	r1, r0, r1
 80024b0:	6011      	str	r1, [r2, #0]
 80024b2:	6053      	str	r3, [r2, #4]
 80024b4:	e7da      	b.n	800246c <_free_r+0x24>
 80024b6:	42a0      	cmp	r0, r4
 80024b8:	d902      	bls.n	80024c0 <_free_r+0x78>
 80024ba:	230c      	movs	r3, #12
 80024bc:	602b      	str	r3, [r5, #0]
 80024be:	e7d5      	b.n	800246c <_free_r+0x24>
 80024c0:	6821      	ldr	r1, [r4, #0]
 80024c2:	1860      	adds	r0, r4, r1
 80024c4:	4283      	cmp	r3, r0
 80024c6:	d103      	bne.n	80024d0 <_free_r+0x88>
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	1841      	adds	r1, r0, r1
 80024ce:	6021      	str	r1, [r4, #0]
 80024d0:	6063      	str	r3, [r4, #4]
 80024d2:	6054      	str	r4, [r2, #4]
 80024d4:	e7ca      	b.n	800246c <_free_r+0x24>
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	20000098 	.word	0x20000098

080024dc <sbrk_aligned>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	4e0f      	ldr	r6, [pc, #60]	; (800251c <sbrk_aligned+0x40>)
 80024e0:	000d      	movs	r5, r1
 80024e2:	6831      	ldr	r1, [r6, #0]
 80024e4:	0004      	movs	r4, r0
 80024e6:	2900      	cmp	r1, #0
 80024e8:	d102      	bne.n	80024f0 <sbrk_aligned+0x14>
 80024ea:	f000 f88f 	bl	800260c <_sbrk_r>
 80024ee:	6030      	str	r0, [r6, #0]
 80024f0:	0029      	movs	r1, r5
 80024f2:	0020      	movs	r0, r4
 80024f4:	f000 f88a 	bl	800260c <_sbrk_r>
 80024f8:	1c43      	adds	r3, r0, #1
 80024fa:	d00a      	beq.n	8002512 <sbrk_aligned+0x36>
 80024fc:	2303      	movs	r3, #3
 80024fe:	1cc5      	adds	r5, r0, #3
 8002500:	439d      	bics	r5, r3
 8002502:	42a8      	cmp	r0, r5
 8002504:	d007      	beq.n	8002516 <sbrk_aligned+0x3a>
 8002506:	1a29      	subs	r1, r5, r0
 8002508:	0020      	movs	r0, r4
 800250a:	f000 f87f 	bl	800260c <_sbrk_r>
 800250e:	1c43      	adds	r3, r0, #1
 8002510:	d101      	bne.n	8002516 <sbrk_aligned+0x3a>
 8002512:	2501      	movs	r5, #1
 8002514:	426d      	negs	r5, r5
 8002516:	0028      	movs	r0, r5
 8002518:	bd70      	pop	{r4, r5, r6, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	2000009c 	.word	0x2000009c

08002520 <_malloc_r>:
 8002520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002522:	2203      	movs	r2, #3
 8002524:	1ccb      	adds	r3, r1, #3
 8002526:	4393      	bics	r3, r2
 8002528:	3308      	adds	r3, #8
 800252a:	0006      	movs	r6, r0
 800252c:	001f      	movs	r7, r3
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d232      	bcs.n	8002598 <_malloc_r+0x78>
 8002532:	270c      	movs	r7, #12
 8002534:	42b9      	cmp	r1, r7
 8002536:	d831      	bhi.n	800259c <_malloc_r+0x7c>
 8002538:	0030      	movs	r0, r6
 800253a:	f000 f96d 	bl	8002818 <__malloc_lock>
 800253e:	4d32      	ldr	r5, [pc, #200]	; (8002608 <_malloc_r+0xe8>)
 8002540:	682b      	ldr	r3, [r5, #0]
 8002542:	001c      	movs	r4, r3
 8002544:	2c00      	cmp	r4, #0
 8002546:	d12e      	bne.n	80025a6 <_malloc_r+0x86>
 8002548:	0039      	movs	r1, r7
 800254a:	0030      	movs	r0, r6
 800254c:	f7ff ffc6 	bl	80024dc <sbrk_aligned>
 8002550:	0004      	movs	r4, r0
 8002552:	1c43      	adds	r3, r0, #1
 8002554:	d11e      	bne.n	8002594 <_malloc_r+0x74>
 8002556:	682c      	ldr	r4, [r5, #0]
 8002558:	0025      	movs	r5, r4
 800255a:	2d00      	cmp	r5, #0
 800255c:	d14a      	bne.n	80025f4 <_malloc_r+0xd4>
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	0029      	movs	r1, r5
 8002562:	18e3      	adds	r3, r4, r3
 8002564:	0030      	movs	r0, r6
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	f000 f850 	bl	800260c <_sbrk_r>
 800256c:	9b01      	ldr	r3, [sp, #4]
 800256e:	4283      	cmp	r3, r0
 8002570:	d143      	bne.n	80025fa <_malloc_r+0xda>
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	3703      	adds	r7, #3
 8002576:	1aff      	subs	r7, r7, r3
 8002578:	2303      	movs	r3, #3
 800257a:	439f      	bics	r7, r3
 800257c:	3708      	adds	r7, #8
 800257e:	2f0c      	cmp	r7, #12
 8002580:	d200      	bcs.n	8002584 <_malloc_r+0x64>
 8002582:	270c      	movs	r7, #12
 8002584:	0039      	movs	r1, r7
 8002586:	0030      	movs	r0, r6
 8002588:	f7ff ffa8 	bl	80024dc <sbrk_aligned>
 800258c:	1c43      	adds	r3, r0, #1
 800258e:	d034      	beq.n	80025fa <_malloc_r+0xda>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	19df      	adds	r7, r3, r7
 8002594:	6027      	str	r7, [r4, #0]
 8002596:	e013      	b.n	80025c0 <_malloc_r+0xa0>
 8002598:	2b00      	cmp	r3, #0
 800259a:	dacb      	bge.n	8002534 <_malloc_r+0x14>
 800259c:	230c      	movs	r3, #12
 800259e:	2500      	movs	r5, #0
 80025a0:	6033      	str	r3, [r6, #0]
 80025a2:	0028      	movs	r0, r5
 80025a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	1bd1      	subs	r1, r2, r7
 80025aa:	d420      	bmi.n	80025ee <_malloc_r+0xce>
 80025ac:	290b      	cmp	r1, #11
 80025ae:	d917      	bls.n	80025e0 <_malloc_r+0xc0>
 80025b0:	19e2      	adds	r2, r4, r7
 80025b2:	6027      	str	r7, [r4, #0]
 80025b4:	42a3      	cmp	r3, r4
 80025b6:	d111      	bne.n	80025dc <_malloc_r+0xbc>
 80025b8:	602a      	str	r2, [r5, #0]
 80025ba:	6863      	ldr	r3, [r4, #4]
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	6053      	str	r3, [r2, #4]
 80025c0:	0030      	movs	r0, r6
 80025c2:	0025      	movs	r5, r4
 80025c4:	f000 f930 	bl	8002828 <__malloc_unlock>
 80025c8:	2207      	movs	r2, #7
 80025ca:	350b      	adds	r5, #11
 80025cc:	1d23      	adds	r3, r4, #4
 80025ce:	4395      	bics	r5, r2
 80025d0:	1aea      	subs	r2, r5, r3
 80025d2:	429d      	cmp	r5, r3
 80025d4:	d0e5      	beq.n	80025a2 <_malloc_r+0x82>
 80025d6:	1b5b      	subs	r3, r3, r5
 80025d8:	50a3      	str	r3, [r4, r2]
 80025da:	e7e2      	b.n	80025a2 <_malloc_r+0x82>
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	e7ec      	b.n	80025ba <_malloc_r+0x9a>
 80025e0:	6862      	ldr	r2, [r4, #4]
 80025e2:	42a3      	cmp	r3, r4
 80025e4:	d101      	bne.n	80025ea <_malloc_r+0xca>
 80025e6:	602a      	str	r2, [r5, #0]
 80025e8:	e7ea      	b.n	80025c0 <_malloc_r+0xa0>
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	e7e8      	b.n	80025c0 <_malloc_r+0xa0>
 80025ee:	0023      	movs	r3, r4
 80025f0:	6864      	ldr	r4, [r4, #4]
 80025f2:	e7a7      	b.n	8002544 <_malloc_r+0x24>
 80025f4:	002c      	movs	r4, r5
 80025f6:	686d      	ldr	r5, [r5, #4]
 80025f8:	e7af      	b.n	800255a <_malloc_r+0x3a>
 80025fa:	230c      	movs	r3, #12
 80025fc:	0030      	movs	r0, r6
 80025fe:	6033      	str	r3, [r6, #0]
 8002600:	f000 f912 	bl	8002828 <__malloc_unlock>
 8002604:	e7cd      	b.n	80025a2 <_malloc_r+0x82>
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	20000098 	.word	0x20000098

0800260c <_sbrk_r>:
 800260c:	2300      	movs	r3, #0
 800260e:	b570      	push	{r4, r5, r6, lr}
 8002610:	4d06      	ldr	r5, [pc, #24]	; (800262c <_sbrk_r+0x20>)
 8002612:	0004      	movs	r4, r0
 8002614:	0008      	movs	r0, r1
 8002616:	602b      	str	r3, [r5, #0]
 8002618:	f7fe f878 	bl	800070c <_sbrk>
 800261c:	1c43      	adds	r3, r0, #1
 800261e:	d103      	bne.n	8002628 <_sbrk_r+0x1c>
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d000      	beq.n	8002628 <_sbrk_r+0x1c>
 8002626:	6023      	str	r3, [r4, #0]
 8002628:	bd70      	pop	{r4, r5, r6, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	200000a0 	.word	0x200000a0

08002630 <_raise_r>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	0004      	movs	r4, r0
 8002634:	000d      	movs	r5, r1
 8002636:	291f      	cmp	r1, #31
 8002638:	d904      	bls.n	8002644 <_raise_r+0x14>
 800263a:	2316      	movs	r3, #22
 800263c:	6003      	str	r3, [r0, #0]
 800263e:	2001      	movs	r0, #1
 8002640:	4240      	negs	r0, r0
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <_raise_r+0x24>
 800264a:	008a      	lsls	r2, r1, #2
 800264c:	189b      	adds	r3, r3, r2
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2a00      	cmp	r2, #0
 8002652:	d108      	bne.n	8002666 <_raise_r+0x36>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 f831 	bl	80026bc <_getpid_r>
 800265a:	002a      	movs	r2, r5
 800265c:	0001      	movs	r1, r0
 800265e:	0020      	movs	r0, r4
 8002660:	f000 f81a 	bl	8002698 <_kill_r>
 8002664:	e7ed      	b.n	8002642 <_raise_r+0x12>
 8002666:	2000      	movs	r0, #0
 8002668:	2a01      	cmp	r2, #1
 800266a:	d0ea      	beq.n	8002642 <_raise_r+0x12>
 800266c:	1c51      	adds	r1, r2, #1
 800266e:	d103      	bne.n	8002678 <_raise_r+0x48>
 8002670:	2316      	movs	r3, #22
 8002672:	3001      	adds	r0, #1
 8002674:	6023      	str	r3, [r4, #0]
 8002676:	e7e4      	b.n	8002642 <_raise_r+0x12>
 8002678:	2400      	movs	r4, #0
 800267a:	0028      	movs	r0, r5
 800267c:	601c      	str	r4, [r3, #0]
 800267e:	4790      	blx	r2
 8002680:	0020      	movs	r0, r4
 8002682:	e7de      	b.n	8002642 <_raise_r+0x12>

08002684 <raise>:
 8002684:	b510      	push	{r4, lr}
 8002686:	4b03      	ldr	r3, [pc, #12]	; (8002694 <raise+0x10>)
 8002688:	0001      	movs	r1, r0
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	f7ff ffd0 	bl	8002630 <_raise_r>
 8002690:	bd10      	pop	{r4, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	2000000c 	.word	0x2000000c

08002698 <_kill_r>:
 8002698:	2300      	movs	r3, #0
 800269a:	b570      	push	{r4, r5, r6, lr}
 800269c:	4d06      	ldr	r5, [pc, #24]	; (80026b8 <_kill_r+0x20>)
 800269e:	0004      	movs	r4, r0
 80026a0:	0008      	movs	r0, r1
 80026a2:	0011      	movs	r1, r2
 80026a4:	602b      	str	r3, [r5, #0]
 80026a6:	f7fd ffb0 	bl	800060a <_kill>
 80026aa:	1c43      	adds	r3, r0, #1
 80026ac:	d103      	bne.n	80026b6 <_kill_r+0x1e>
 80026ae:	682b      	ldr	r3, [r5, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d000      	beq.n	80026b6 <_kill_r+0x1e>
 80026b4:	6023      	str	r3, [r4, #0]
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	200000a0 	.word	0x200000a0

080026bc <_getpid_r>:
 80026bc:	b510      	push	{r4, lr}
 80026be:	f7fd ff9e 	bl	80005fe <_getpid>
 80026c2:	bd10      	pop	{r4, pc}

080026c4 <__sread>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	000c      	movs	r4, r1
 80026c8:	250e      	movs	r5, #14
 80026ca:	5f49      	ldrsh	r1, [r1, r5]
 80026cc:	f000 f8b4 	bl	8002838 <_read_r>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	db03      	blt.n	80026dc <__sread+0x18>
 80026d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026d6:	181b      	adds	r3, r3, r0
 80026d8:	6563      	str	r3, [r4, #84]	; 0x54
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	89a3      	ldrh	r3, [r4, #12]
 80026de:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <__sread+0x24>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	81a3      	strh	r3, [r4, #12]
 80026e4:	e7f9      	b.n	80026da <__sread+0x16>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	ffffefff 	.word	0xffffefff

080026ec <__swrite>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	001f      	movs	r7, r3
 80026f0:	898b      	ldrh	r3, [r1, #12]
 80026f2:	0005      	movs	r5, r0
 80026f4:	000c      	movs	r4, r1
 80026f6:	0016      	movs	r6, r2
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	d505      	bpl.n	8002708 <__swrite+0x1c>
 80026fc:	230e      	movs	r3, #14
 80026fe:	5ec9      	ldrsh	r1, [r1, r3]
 8002700:	2200      	movs	r2, #0
 8002702:	2302      	movs	r3, #2
 8002704:	f000 f874 	bl	80027f0 <_lseek_r>
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <__swrite+0x34>)
 800270c:	0028      	movs	r0, r5
 800270e:	4013      	ands	r3, r2
 8002710:	81a3      	strh	r3, [r4, #12]
 8002712:	0032      	movs	r2, r6
 8002714:	230e      	movs	r3, #14
 8002716:	5ee1      	ldrsh	r1, [r4, r3]
 8002718:	003b      	movs	r3, r7
 800271a:	f000 f81f 	bl	800275c <_write_r>
 800271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002720:	ffffefff 	.word	0xffffefff

08002724 <__sseek>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	000c      	movs	r4, r1
 8002728:	250e      	movs	r5, #14
 800272a:	5f49      	ldrsh	r1, [r1, r5]
 800272c:	f000 f860 	bl	80027f0 <_lseek_r>
 8002730:	89a3      	ldrh	r3, [r4, #12]
 8002732:	1c42      	adds	r2, r0, #1
 8002734:	d103      	bne.n	800273e <__sseek+0x1a>
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <__sseek+0x28>)
 8002738:	4013      	ands	r3, r2
 800273a:	81a3      	strh	r3, [r4, #12]
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	0152      	lsls	r2, r2, #5
 8002742:	4313      	orrs	r3, r2
 8002744:	81a3      	strh	r3, [r4, #12]
 8002746:	6560      	str	r0, [r4, #84]	; 0x54
 8002748:	e7f8      	b.n	800273c <__sseek+0x18>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	ffffefff 	.word	0xffffefff

08002750 <__sclose>:
 8002750:	b510      	push	{r4, lr}
 8002752:	230e      	movs	r3, #14
 8002754:	5ec9      	ldrsh	r1, [r1, r3]
 8002756:	f000 f815 	bl	8002784 <_close_r>
 800275a:	bd10      	pop	{r4, pc}

0800275c <_write_r>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	0004      	movs	r4, r0
 8002760:	0008      	movs	r0, r1
 8002762:	0011      	movs	r1, r2
 8002764:	001a      	movs	r2, r3
 8002766:	2300      	movs	r3, #0
 8002768:	4d05      	ldr	r5, [pc, #20]	; (8002780 <_write_r+0x24>)
 800276a:	602b      	str	r3, [r5, #0]
 800276c:	f7fd ff86 	bl	800067c <_write>
 8002770:	1c43      	adds	r3, r0, #1
 8002772:	d103      	bne.n	800277c <_write_r+0x20>
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d000      	beq.n	800277c <_write_r+0x20>
 800277a:	6023      	str	r3, [r4, #0]
 800277c:	bd70      	pop	{r4, r5, r6, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	200000a0 	.word	0x200000a0

08002784 <_close_r>:
 8002784:	2300      	movs	r3, #0
 8002786:	b570      	push	{r4, r5, r6, lr}
 8002788:	4d06      	ldr	r5, [pc, #24]	; (80027a4 <_close_r+0x20>)
 800278a:	0004      	movs	r4, r0
 800278c:	0008      	movs	r0, r1
 800278e:	602b      	str	r3, [r5, #0]
 8002790:	f7fd ff90 	bl	80006b4 <_close>
 8002794:	1c43      	adds	r3, r0, #1
 8002796:	d103      	bne.n	80027a0 <_close_r+0x1c>
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d000      	beq.n	80027a0 <_close_r+0x1c>
 800279e:	6023      	str	r3, [r4, #0]
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	200000a0 	.word	0x200000a0

080027a8 <_fstat_r>:
 80027a8:	2300      	movs	r3, #0
 80027aa:	b570      	push	{r4, r5, r6, lr}
 80027ac:	4d06      	ldr	r5, [pc, #24]	; (80027c8 <_fstat_r+0x20>)
 80027ae:	0004      	movs	r4, r0
 80027b0:	0008      	movs	r0, r1
 80027b2:	0011      	movs	r1, r2
 80027b4:	602b      	str	r3, [r5, #0]
 80027b6:	f7fd ff87 	bl	80006c8 <_fstat>
 80027ba:	1c43      	adds	r3, r0, #1
 80027bc:	d103      	bne.n	80027c6 <_fstat_r+0x1e>
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d000      	beq.n	80027c6 <_fstat_r+0x1e>
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 80027c8:	200000a0 	.word	0x200000a0

080027cc <_isatty_r>:
 80027cc:	2300      	movs	r3, #0
 80027ce:	b570      	push	{r4, r5, r6, lr}
 80027d0:	4d06      	ldr	r5, [pc, #24]	; (80027ec <_isatty_r+0x20>)
 80027d2:	0004      	movs	r4, r0
 80027d4:	0008      	movs	r0, r1
 80027d6:	602b      	str	r3, [r5, #0]
 80027d8:	f7fd ff84 	bl	80006e4 <_isatty>
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	d103      	bne.n	80027e8 <_isatty_r+0x1c>
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d000      	beq.n	80027e8 <_isatty_r+0x1c>
 80027e6:	6023      	str	r3, [r4, #0]
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	200000a0 	.word	0x200000a0

080027f0 <_lseek_r>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	0004      	movs	r4, r0
 80027f4:	0008      	movs	r0, r1
 80027f6:	0011      	movs	r1, r2
 80027f8:	001a      	movs	r2, r3
 80027fa:	2300      	movs	r3, #0
 80027fc:	4d05      	ldr	r5, [pc, #20]	; (8002814 <_lseek_r+0x24>)
 80027fe:	602b      	str	r3, [r5, #0]
 8002800:	f7fd ff79 	bl	80006f6 <_lseek>
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	d103      	bne.n	8002810 <_lseek_r+0x20>
 8002808:	682b      	ldr	r3, [r5, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d000      	beq.n	8002810 <_lseek_r+0x20>
 800280e:	6023      	str	r3, [r4, #0]
 8002810:	bd70      	pop	{r4, r5, r6, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	200000a0 	.word	0x200000a0

08002818 <__malloc_lock>:
 8002818:	b510      	push	{r4, lr}
 800281a:	4802      	ldr	r0, [pc, #8]	; (8002824 <__malloc_lock+0xc>)
 800281c:	f7ff fd99 	bl	8002352 <__retarget_lock_acquire_recursive>
 8002820:	bd10      	pop	{r4, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000094 	.word	0x20000094

08002828 <__malloc_unlock>:
 8002828:	b510      	push	{r4, lr}
 800282a:	4802      	ldr	r0, [pc, #8]	; (8002834 <__malloc_unlock+0xc>)
 800282c:	f7ff fd92 	bl	8002354 <__retarget_lock_release_recursive>
 8002830:	bd10      	pop	{r4, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	20000094 	.word	0x20000094

08002838 <_read_r>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	0004      	movs	r4, r0
 800283c:	0008      	movs	r0, r1
 800283e:	0011      	movs	r1, r2
 8002840:	001a      	movs	r2, r3
 8002842:	2300      	movs	r3, #0
 8002844:	4d05      	ldr	r5, [pc, #20]	; (800285c <_read_r+0x24>)
 8002846:	602b      	str	r3, [r5, #0]
 8002848:	f7fd fefb 	bl	8000642 <_read>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	d103      	bne.n	8002858 <_read_r+0x20>
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d000      	beq.n	8002858 <_read_r+0x20>
 8002856:	6023      	str	r3, [r4, #0]
 8002858:	bd70      	pop	{r4, r5, r6, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	200000a0 	.word	0x200000a0

08002860 <_init>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr

0800286c <_fini>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr
