
metaporter-mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003698  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d08  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800445c  0800445c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800445c  0800445c  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800445c  0800445c  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08004464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200000ec  08004550  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004550  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d05  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163d  00000000  00000000  00024e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  00026458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00026ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adf4  00000000  00000000  00027080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007070  00000000  00000000  00041e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ce34  00000000  00000000  00048ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5d18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002130  00000000  00000000  000e5d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000ec 	.word	0x200000ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800373c 	.word	0x0800373c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f0 	.word	0x200000f0
 8000100:	0800373c 	.word	0x0800373c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_lmul>:
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	46ce      	mov	lr, r9
 8000234:	4647      	mov	r7, r8
 8000236:	b580      	push	{r7, lr}
 8000238:	0007      	movs	r7, r0
 800023a:	4699      	mov	r9, r3
 800023c:	0c3b      	lsrs	r3, r7, #16
 800023e:	469c      	mov	ip, r3
 8000240:	0413      	lsls	r3, r2, #16
 8000242:	0c1b      	lsrs	r3, r3, #16
 8000244:	001d      	movs	r5, r3
 8000246:	000e      	movs	r6, r1
 8000248:	4661      	mov	r1, ip
 800024a:	0400      	lsls	r0, r0, #16
 800024c:	0c14      	lsrs	r4, r2, #16
 800024e:	0c00      	lsrs	r0, r0, #16
 8000250:	4345      	muls	r5, r0
 8000252:	434b      	muls	r3, r1
 8000254:	4360      	muls	r0, r4
 8000256:	4361      	muls	r1, r4
 8000258:	18c0      	adds	r0, r0, r3
 800025a:	0c2c      	lsrs	r4, r5, #16
 800025c:	1820      	adds	r0, r4, r0
 800025e:	468c      	mov	ip, r1
 8000260:	4283      	cmp	r3, r0
 8000262:	d903      	bls.n	800026c <__aeabi_lmul+0x3c>
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	025b      	lsls	r3, r3, #9
 8000268:	4698      	mov	r8, r3
 800026a:	44c4      	add	ip, r8
 800026c:	4649      	mov	r1, r9
 800026e:	4379      	muls	r1, r7
 8000270:	4372      	muls	r2, r6
 8000272:	0c03      	lsrs	r3, r0, #16
 8000274:	4463      	add	r3, ip
 8000276:	042d      	lsls	r5, r5, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	18c9      	adds	r1, r1, r3
 800027c:	0400      	lsls	r0, r0, #16
 800027e:	1940      	adds	r0, r0, r5
 8000280:	1889      	adds	r1, r1, r2
 8000282:	bcc0      	pop	{r6, r7}
 8000284:	46b9      	mov	r9, r7
 8000286:	46b0      	mov	r8, r6
 8000288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <init_spi2>:

//===========================================================================
// Initialize the SPI2 peripheral.
//===========================================================================
void init_spi2(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
    //enable ports 12,13,15 for alternate function
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <init_spi2+0x98>)
 8000292:	695a      	ldr	r2, [r3, #20]
 8000294:	4b23      	ldr	r3, [pc, #140]	; (8000324 <init_spi2+0x98>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	02c9      	lsls	r1, r1, #11
 800029a:	430a      	orrs	r2, r1
 800029c:	615a      	str	r2, [r3, #20]

    GPIOB -> MODER &= ~0xcf000000;
 800029e:	4b22      	ldr	r3, [pc, #136]	; (8000328 <init_spi2+0x9c>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b21      	ldr	r3, [pc, #132]	; (8000328 <init_spi2+0x9c>)
 80002a4:	4921      	ldr	r1, [pc, #132]	; (800032c <init_spi2+0xa0>)
 80002a6:	400a      	ands	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
    GPIOB -> MODER |= 0x8a000000;
 80002aa:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <init_spi2+0x9c>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <init_spi2+0x9c>)
 80002b0:	218a      	movs	r1, #138	; 0x8a
 80002b2:	0609      	lsls	r1, r1, #24
 80002b4:	430a      	orrs	r2, r1
 80002b6:	601a      	str	r2, [r3, #0]

    GPIOB -> AFR[1] &= ~0xf0ff0000; //set pb15, 13, 12 to AF0
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <init_spi2+0x9c>)
 80002ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <init_spi2+0x9c>)
 80002be:	491c      	ldr	r1, [pc, #112]	; (8000330 <init_spi2+0xa4>)
 80002c0:	400a      	ands	r2, r1
 80002c2:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOB -> AFR[1] |= -0x00000000;
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <init_spi2+0x9c>)
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <init_spi2+0x9c>)
 80002c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80002ca:	625a      	str	r2, [r3, #36]	; 0x24


    RCC->APB1ENR |= (1 << 14); //enable spi2
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <init_spi2+0x98>)
 80002ce:	69da      	ldr	r2, [r3, #28]
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <init_spi2+0x98>)
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	01c9      	lsls	r1, r1, #7
 80002d6:	430a      	orrs	r2, r1
 80002d8:	61da      	str	r2, [r3, #28]

    SPI2 -> CR1 &= ~(1 << 6);
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <init_spi2+0xa8>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <init_spi2+0xa8>)
 80002e0:	2140      	movs	r1, #64	; 0x40
 80002e2:	438a      	bics	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
    SPI2 -> CR1 &= ~0x38;
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <init_spi2+0xa8>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <init_spi2+0xa8>)
 80002ec:	2138      	movs	r1, #56	; 0x38
 80002ee:	438a      	bics	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]
    SPI2 -> CR1 |= 0x38; //set the baud rate as low
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <init_spi2+0xa8>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <init_spi2+0xa8>)
 80002f8:	2138      	movs	r1, #56	; 0x38
 80002fa:	430a      	orrs	r2, r1
 80002fc:	601a      	str	r2, [r3, #0]
    SPI2 -> CR1 |= (1 << 2); // Master Mode
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <init_spi2+0xa8>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <init_spi2+0xa8>)
 8000304:	2104      	movs	r1, #4
 8000306:	430a      	orrs	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
    SPI2 -> CR2 = SPI_CR2_DS_3 | SPI_CR2_DS_0 | SPI_CR2_SSOE | SPI_CR2_NSSP;
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <init_spi2+0xa8>)
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <init_spi2+0xac>)
 800030e:	605a      	str	r2, [r3, #4]
    SPI2 -> CR1 |= (1 << 6); //enable periph
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <init_spi2+0xa8>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <init_spi2+0xa8>)
 8000316:	2140      	movs	r1, #64	; 0x40
 8000318:	430a      	orrs	r2, r1
 800031a:	601a      	str	r2, [r3, #0]


}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	40021000 	.word	0x40021000
 8000328:	48000400 	.word	0x48000400
 800032c:	30ffffff 	.word	0x30ffffff
 8000330:	0f00ffff 	.word	0x0f00ffff
 8000334:	40003800 	.word	0x40003800
 8000338:	0000090c 	.word	0x0000090c

0800033c <spi2_cmd>:
void spi_cmd(unsigned int data) {
    while(!(SPI1->SR & SPI_SR_TXE)) {}
    SPI1->DR = data;
}

void spi2_cmd(unsigned int data) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    while(!(SPI2->SR & SPI_SR_TXE)) {}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <spi2_cmd+0x24>)
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	2202      	movs	r2, #2
 800034c:	4013      	ands	r3, r2
 800034e:	d0fa      	beq.n	8000346 <spi2_cmd+0xa>
    SPI2->DR = data;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <spi2_cmd+0x24>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	60da      	str	r2, [r3, #12]
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b002      	add	sp, #8
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	40003800 	.word	0x40003800

08000364 <spi2_data>:
void spi_data(unsigned int data) {
    spi_cmd(data | 0x200);
}
void spi2_data(unsigned int data) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
    spi2_cmd(data | 0x200);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	4313      	orrs	r3, r2
 8000374:	0018      	movs	r0, r3
 8000376:	f7ff ffe1 	bl	800033c <spi2_cmd>
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b002      	add	sp, #8
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <spi2_init_oled>:

void spi2_init_oled() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
    nano_wait(1000000);
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <spi2_init_oled+0x40>)
 800038a:	0018      	movs	r0, r3
 800038c:	f000 febc 	bl	8001108 <nano_wait>
    spi2_cmd(0x38);
 8000390:	2038      	movs	r0, #56	; 0x38
 8000392:	f7ff ffd3 	bl	800033c <spi2_cmd>
    spi2_cmd(0x08);
 8000396:	2008      	movs	r0, #8
 8000398:	f7ff ffd0 	bl	800033c <spi2_cmd>
    spi2_cmd(0x01);
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ffcd 	bl	800033c <spi2_cmd>
    nano_wait(2000000);
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <spi2_init_oled+0x44>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 feaf 	bl	8001108 <nano_wait>
    spi2_cmd(0x06);
 80003aa:	2006      	movs	r0, #6
 80003ac:	f7ff ffc6 	bl	800033c <spi2_cmd>
    spi2_cmd(0x02);
 80003b0:	2002      	movs	r0, #2
 80003b2:	f7ff ffc3 	bl	800033c <spi2_cmd>
    spi2_cmd(0x0c);
 80003b6:	200c      	movs	r0, #12
 80003b8:	f7ff ffc0 	bl	800033c <spi2_cmd>
}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	000f4240 	.word	0x000f4240
 80003c8:	001e8480 	.word	0x001e8480

080003cc <spi2_display1>:
        spi_data(*string);
        string++;
    }
}

void spi2_display1(const char *string) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    spi2_cmd(0x02);
 80003d4:	2002      	movs	r0, #2
 80003d6:	f7ff ffb1 	bl	800033c <spi2_cmd>
    while(*string != '\0') {
 80003da:	e007      	b.n	80003ec <spi2_display1+0x20>
        spi2_data(*string);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff ffbf 	bl	8000364 <spi2_data>
        string++;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3301      	adds	r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
    while(*string != '\0') {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f3      	bne.n	80003dc <spi2_display1+0x10>
    }
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b002      	add	sp, #8
 80003fc:	bd80      	pop	{r7, pc}

080003fe <spi2_display2>:
        spi_data(*string);
        string++;
    }
}

void spi2_display2(const char *string) {
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
    spi2_cmd(0xc0);
 8000406:	20c0      	movs	r0, #192	; 0xc0
 8000408:	f7ff ff98 	bl	800033c <spi2_cmd>
    while(*string != '\0') {
 800040c:	e007      	b.n	800041e <spi2_display2+0x20>
        spi2_data(*string);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	0018      	movs	r0, r3
 8000414:	f7ff ffa6 	bl	8000364 <spi2_data>
        string++;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3301      	adds	r3, #1
 800041c:	607b      	str	r3, [r7, #4]
    while(*string != '\0') {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1f3      	bne.n	800040e <spi2_display2+0x10>
    }
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}

08000430 <init_tim6>:

void init_tim6(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
    TIM6->CR1 &= ~TIM_CR1_CEN;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <init_tim6+0x54>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <init_tim6+0x54>)
 800043a:	2101      	movs	r1, #1
 800043c:	438a      	bics	r2, r1
 800043e:	601a      	str	r2, [r3, #0]

    time_remaining = 0;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <init_tim6+0x58>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <init_tim6+0x5c>)
 8000448:	69da      	ldr	r2, [r3, #28]
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <init_tim6+0x5c>)
 800044c:	2110      	movs	r1, #16
 800044e:	430a      	orrs	r2, r1
 8000450:	61da      	str	r2, [r3, #28]
    TIM6->PSC = 48000-1;
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <init_tim6+0x54>)
 8000454:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <init_tim6+0x60>)
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
    TIM6->ARR = 1000-1;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <init_tim6+0x54>)
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <init_tim6+0x64>)
 800045c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM6->DIER |= TIM_DIER_UIE;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <init_tim6+0x54>)
 8000460:	68da      	ldr	r2, [r3, #12]
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <init_tim6+0x54>)
 8000464:	2101      	movs	r1, #1
 8000466:	430a      	orrs	r2, r1
 8000468:	60da      	str	r2, [r3, #12]
    NVIC->ISER[0] = 1<<TIM6_DAC_IRQn;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <init_tim6+0x68>)
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	0292      	lsls	r2, r2, #10
 8000470:	601a      	str	r2, [r3, #0]
    TIM6->CR1 |= TIM_CR1_CEN;
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <init_tim6+0x54>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b03      	ldr	r3, [pc, #12]	; (8000484 <init_tim6+0x54>)
 8000478:	2101      	movs	r1, #1
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40001000 	.word	0x40001000
 8000488:	20000108 	.word	0x20000108
 800048c:	40021000 	.word	0x40021000
 8000490:	0000bb7f 	.word	0x0000bb7f
 8000494:	000003e7 	.word	0x000003e7
 8000498:	e000e100 	.word	0xe000e100

0800049c <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af04      	add	r7, sp, #16
	char stringy[20];
    TIM6->SR &= ~TIM_SR_UIF;
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <TIM6_DAC_IRQHandler+0x58>)
 80004a4:	691a      	ldr	r2, [r3, #16]
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <TIM6_DAC_IRQHandler+0x58>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	438a      	bics	r2, r1
 80004ac:	611a      	str	r2, [r3, #16]
    time_remaining+=1;
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <TIM6_DAC_IRQHandler+0x5c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	1c5a      	adds	r2, r3, #1
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <TIM6_DAC_IRQHandler+0x5c>)
 80004b6:	601a      	str	r2, [r3, #0]
    sprintf(stringy, "Time: %ds", time_remaining);
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <TIM6_DAC_IRQHandler+0x5c>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	490f      	ldr	r1, [pc, #60]	; (80004fc <TIM6_DAC_IRQHandler+0x60>)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 ff39 	bl	8002338 <siprintf>
    //sprintf(score_string, "Level: %d", level_score);
    LCD_DrawString(140, 275, BLACK, WHITE,  (stringy), 16, 0);
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <TIM6_DAC_IRQHandler+0x64>)
 80004c8:	2314      	movs	r3, #20
 80004ca:	33ff      	adds	r3, #255	; 0xff
 80004cc:	0019      	movs	r1, r3
 80004ce:	2300      	movs	r3, #0
 80004d0:	9302      	str	r3, [sp, #8]
 80004d2:	2310      	movs	r3, #16
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	0013      	movs	r3, r2
 80004dc:	2200      	movs	r2, #0
 80004de:	208c      	movs	r0, #140	; 0x8c
 80004e0:	f000 fd58 	bl	8000f94 <LCD_DrawString>




    spi2_display2(stringy);
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	0018      	movs	r0, r3
 80004e8:	f7ff ff89 	bl	80003fe <spi2_display2>




}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b006      	add	sp, #24
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40001000 	.word	0x40001000
 80004f8:	20000108 	.word	0x20000108
 80004fc:	08003754 	.word	0x08003754
 8000500:	0000ffff 	.word	0x0000ffff

08000504 <main>:
//===========================================================================
// Main function
//===========================================================================

int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    msg[0] |= font['E'];
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <main+0xd0>)
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	4b32      	ldr	r3, [pc, #200]	; (80005d8 <main+0xd4>)
 800050e:	2145      	movs	r1, #69	; 0x45
 8000510:	5c5b      	ldrb	r3, [r3, r1]
 8000512:	b29b      	uxth	r3, r3
 8000514:	4313      	orrs	r3, r2
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <main+0xd0>)
 800051a:	801a      	strh	r2, [r3, #0]
    msg[1] |= font['C'];
 800051c:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <main+0xd0>)
 800051e:	885a      	ldrh	r2, [r3, #2]
 8000520:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <main+0xd4>)
 8000522:	2143      	movs	r1, #67	; 0x43
 8000524:	5c5b      	ldrb	r3, [r3, r1]
 8000526:	b29b      	uxth	r3, r3
 8000528:	4313      	orrs	r3, r2
 800052a:	b29a      	uxth	r2, r3
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <main+0xd0>)
 800052e:	805a      	strh	r2, [r3, #2]
    msg[2] |= font['E'];
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <main+0xd0>)
 8000532:	889a      	ldrh	r2, [r3, #4]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <main+0xd4>)
 8000536:	2145      	movs	r1, #69	; 0x45
 8000538:	5c5b      	ldrb	r3, [r3, r1]
 800053a:	b29b      	uxth	r3, r3
 800053c:	4313      	orrs	r3, r2
 800053e:	b29a      	uxth	r2, r3
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <main+0xd0>)
 8000542:	809a      	strh	r2, [r3, #4]
    msg[3] |= font[' '];
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <main+0xd0>)
 8000546:	88da      	ldrh	r2, [r3, #6]
 8000548:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <main+0xd4>)
 800054a:	2120      	movs	r1, #32
 800054c:	5c5b      	ldrb	r3, [r3, r1]
 800054e:	b29b      	uxth	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b29a      	uxth	r2, r3
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <main+0xd0>)
 8000556:	80da      	strh	r2, [r3, #6]
    msg[4] |= font['3'];
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <main+0xd0>)
 800055a:	891a      	ldrh	r2, [r3, #8]
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <main+0xd4>)
 800055e:	2133      	movs	r1, #51	; 0x33
 8000560:	5c5b      	ldrb	r3, [r3, r1]
 8000562:	b29b      	uxth	r3, r3
 8000564:	4313      	orrs	r3, r2
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <main+0xd0>)
 800056a:	811a      	strh	r2, [r3, #8]
    msg[5] |= font['6'];
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <main+0xd0>)
 800056e:	895a      	ldrh	r2, [r3, #10]
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <main+0xd4>)
 8000572:	2136      	movs	r1, #54	; 0x36
 8000574:	5c5b      	ldrb	r3, [r3, r1]
 8000576:	b29b      	uxth	r3, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	b29a      	uxth	r2, r3
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <main+0xd0>)
 800057e:	815a      	strh	r2, [r3, #10]
    msg[6] |= font['2'];
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0xd0>)
 8000582:	899a      	ldrh	r2, [r3, #12]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0xd4>)
 8000586:	2132      	movs	r1, #50	; 0x32
 8000588:	5c5b      	ldrb	r3, [r3, r1]
 800058a:	b29b      	uxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <main+0xd0>)
 8000592:	819a      	strh	r2, [r3, #12]
    msg[7] |= font[' '];
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <main+0xd0>)
 8000596:	89da      	ldrh	r2, [r3, #14]
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <main+0xd4>)
 800059a:	2120      	movs	r1, #32
 800059c:	5c5b      	ldrb	r3, [r3, r1]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <main+0xd0>)
 80005a6:	81da      	strh	r2, [r3, #14]
    // This time, autotest always runs as an invisible aid to you.
    //autotest();

    // GPIO enable
    //enable_ports();
    SystemClock_Config();
 80005a8:	f000 fd56 	bl	8001058 <SystemClock_Config>
    LCD_Setup();
 80005ac:	f000 fad6 	bl	8000b5c <LCD_Setup>
    //LCD_DrawString(5, 300, BLACK, WHITE, "Time: 9 ", 16, 0);
    init_tim6();
 80005b0:	f7ff ff3e 	bl	8000430 <init_tim6>

    // SPI OLED direct drive
#define SPI_OLED
#if defined(SPI_OLED)

    init_spi2();
 80005b4:	f7ff fe6a 	bl	800028c <init_spi2>
    spi2_init_oled();
 80005b8:	f7ff fee4 	bl	8000384 <spi2_init_oled>
    spi2_display1("Metaporter");
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0xd8>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff04 	bl	80003cc <spi2_display1>
    spi2_display2("Time 0s");
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <main+0xdc>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f7ff ff19 	bl	80003fe <spi2_display2>
 80005cc:	2300      	movs	r3, #0
    spi1_enable_dma();
#endif

    // Game on!  The goal is to score 100 points.
    //game();
}
 80005ce:	0018      	movs	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000000 	.word	0x20000000
 80005d8:	08004288 	.word	0x08004288
 80005dc:	08003760 	.word	0x08003760
 80005e0:	0800376c 	.word	0x0800376c

080005e4 <tft_select>:
#define DC_LOW  do { GPIOB->BSRR = GPIO_BSRR_BR_14; } while(0)

// Set the CS pin low if val is non-zero.
// Note that when CS is being set high again, wait on SPI to not be busy.
static void tft_select(int val)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    if (val == 0) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10a      	bne.n	8000608 <tft_select+0x24>
        while(SPI1->SR & SPI_SR_BSY)
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <tft_select+0x44>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	4013      	ands	r3, r2
 80005fc:	d1fa      	bne.n	80005f4 <tft_select+0x10>
            ;
        CS_HIGH;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <tft_select+0x48>)
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	0052      	lsls	r2, r2, #1
 8000604:	619a      	str	r2, [r3, #24]
            // This is a common mistake made by students.
            // This is what catches the problem early.
        }
        CS_LOW;
    }
}
 8000606:	e00a      	b.n	800061e <tft_select+0x3a>
        while((GPIOB->ODR & (CS_BIT)) == 0) {
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <tft_select+0x48>)
 800060c:	695a      	ldr	r2, [r3, #20]
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4013      	ands	r3, r2
 8000614:	d0f9      	beq.n	800060a <tft_select+0x26>
        CS_LOW;
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <tft_select+0x48>)
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	0452      	lsls	r2, r2, #17
 800061c:	619a      	str	r2, [r3, #24]
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40013000 	.word	0x40013000
 800062c:	48000400 	.word	0x48000400

08000630 <tft_reset>:

// If val is non-zero, set nRESET low to reset the display.
static void tft_reset(int val)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    if (val) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d004      	beq.n	8000648 <tft_reset+0x18>
        RESET_LOW;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <tft_reset+0x28>)
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	0512      	lsls	r2, r2, #20
 8000644:	619a      	str	r2, [r3, #24]
    } else {
        RESET_HIGH;
    }
}
 8000646:	e003      	b.n	8000650 <tft_reset+0x20>
        RESET_HIGH;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <tft_reset+0x28>)
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	0112      	lsls	r2, r2, #4
 800064e:	619a      	str	r2, [r3, #24]
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}
 8000658:	48000400 	.word	0x48000400

0800065c <tft_reg_select>:

// If
static void tft_reg_select(int val)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    if (val == 1) { // select registers
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d104      	bne.n	8000674 <tft_reg_select+0x18>
        DC_LOW; // clear
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <tft_reg_select+0x28>)
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	05d2      	lsls	r2, r2, #23
 8000670:	619a      	str	r2, [r3, #24]
    } else { // select data
        DC_HIGH; // set
    }
}
 8000672:	e003      	b.n	800067c <tft_reg_select+0x20>
        DC_HIGH; // set
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <tft_reg_select+0x28>)
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	01d2      	lsls	r2, r2, #7
 800067a:	619a      	str	r2, [r3, #24]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	48000400 	.word	0x48000400

08000688 <nano_wait>:

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
static inline void nano_wait(unsigned int n) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	1c18      	adds	r0, r3, #0

08000694 <repeat>:
 8000694:	3853      	subs	r0, #83	; 0x53
 8000696:	dcfd      	bgt.n	8000694 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b002      	add	sp, #8
 800069e:	bd80      	pop	{r7, pc}

080006a0 <LCD_Reset>:

void LCD_Reset(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    lcddev.reset(1);      // Assert reset
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <LCD_Reset+0x2c>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	2001      	movs	r0, #1
 80006aa:	4798      	blx	r3
    nano_wait(100000000); // Wait
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <LCD_Reset+0x30>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff ffea 	bl	8000688 <nano_wait>
    lcddev.reset(0);      // De-assert reset
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <LCD_Reset+0x2c>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	2000      	movs	r0, #0
 80006ba:	4798      	blx	r3
    nano_wait(50000000);  // Wait
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <LCD_Reset+0x34>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff ffe2 	bl	8000688 <nano_wait>
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	2000010c 	.word	0x2000010c
 80006d0:	05f5e100 	.word	0x05f5e100
 80006d4:	02faf080 	.word	0x02faf080

080006d8 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	0002      	movs	r2, r0
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <LCD_WR_REG+0x30>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	4013      	ands	r3, r2
 80006ee:	d1fa      	bne.n	80006e6 <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    lcddev.reg_select(1);
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LCD_WR_REG+0x34>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	2001      	movs	r0, #1
 80006f6:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 80006f8:	4a05      	ldr	r2, [pc, #20]	; (8000710 <LCD_WR_REG+0x38>)
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	7013      	strb	r3, [r2, #0]
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40013000 	.word	0x40013000
 800070c:	2000010c 	.word	0x2000010c
 8000710:	4001300c 	.word	0x4001300c

08000714 <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <LCD_WR_DATA+0x30>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	4013      	ands	r3, r2
 800072a:	d1fa      	bne.n	8000722 <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    lcddev.reg_select(0);
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <LCD_WR_DATA+0x34>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	2000      	movs	r0, #0
 8000732:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8000734:	4a05      	ldr	r2, [pc, #20]	; (800074c <LCD_WR_DATA+0x38>)
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	7013      	strb	r3, [r2, #0]
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b002      	add	sp, #8
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40013000 	.word	0x40013000
 8000748:	2000010c 	.word	0x2000010c
 800074c:	4001300c 	.word	0x4001300c

08000750 <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    lcddev.reg_select(0);
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <LCD_WriteData16_Prepare+0x20>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	2000      	movs	r0, #0
 800075a:	4798      	blx	r3
    SPI->CR2 |= SPI_CR2_DS;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <LCD_WriteData16_Prepare+0x24>)
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <LCD_WriteData16_Prepare+0x24>)
 8000762:	21f0      	movs	r1, #240	; 0xf0
 8000764:	0109      	lsls	r1, r1, #4
 8000766:	430a      	orrs	r2, r1
 8000768:	605a      	str	r2, [r3, #4]
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000010c 	.word	0x2000010c
 8000774:	40013000 	.word	0x40013000

08000778 <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	1dbb      	adds	r3, r7, #6
 8000782:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <LCD_WriteData16+0x28>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	2202      	movs	r2, #2
 800078c:	4013      	ands	r3, r2
 800078e:	d0fa      	beq.n	8000786 <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <LCD_WriteData16+0x28>)
 8000792:	1dba      	adds	r2, r7, #6
 8000794:	8812      	ldrh	r2, [r2, #0]
 8000796:	60da      	str	r2, [r3, #12]
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40013000 	.word	0x40013000

080007a4 <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <LCD_WriteData16_End+0x18>)
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <LCD_WriteData16_End+0x18>)
 80007ae:	4904      	ldr	r1, [pc, #16]	; (80007c0 <LCD_WriteData16_End+0x1c>)
 80007b0:	400a      	ands	r2, r1
 80007b2:	605a      	str	r2, [r3, #4]
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40013000 	.word	0x40013000
 80007c0:	fffff0ff 	.word	0xfffff0ff

080007c4 <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	1c0a      	adds	r2, r1, #0
 80007d4:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff ff7c 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ff94 	bl	8000714 <LCD_WR_DATA>
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <LCD_WriteRAM_Prepare+0x18>)
 80007fa:	891b      	ldrh	r3, [r3, #8]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff ff6a 	bl	80006d8 <LCD_WR_REG>
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	2000010c 	.word	0x2000010c

08000810 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	0002      	movs	r2, r0
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <LCD_direction+0xa4>)
 800081e:	222a      	movs	r2, #42	; 0x2a
 8000820:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <LCD_direction+0xa4>)
 8000824:	222b      	movs	r2, #43	; 0x2b
 8000826:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <LCD_direction+0xa4>)
 800082a:	222c      	movs	r2, #44	; 0x2c
 800082c:	811a      	strh	r2, [r3, #8]
    switch(direction){
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b03      	cmp	r3, #3
 8000834:	d02c      	beq.n	8000890 <LCD_direction+0x80>
 8000836:	dc37      	bgt.n	80008a8 <LCD_direction+0x98>
 8000838:	2b02      	cmp	r3, #2
 800083a:	d01d      	beq.n	8000878 <LCD_direction+0x68>
 800083c:	dc34      	bgt.n	80008a8 <LCD_direction+0x98>
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <LCD_direction+0x38>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00c      	beq.n	8000860 <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 8000846:	e02f      	b.n	80008a8 <LCD_direction+0x98>
        lcddev.width=LCD_W;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <LCD_direction+0xa4>)
 800084a:	22f0      	movs	r2, #240	; 0xf0
 800084c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <LCD_direction+0xa4>)
 8000850:	22a0      	movs	r2, #160	; 0xa0
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8000856:	2108      	movs	r1, #8
 8000858:	2036      	movs	r0, #54	; 0x36
 800085a:	f7ff ffb3 	bl	80007c4 <LCD_WriteReg>
        break;
 800085e:	e024      	b.n	80008aa <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <LCD_direction+0xa4>)
 8000862:	22a0      	movs	r2, #160	; 0xa0
 8000864:	0052      	lsls	r2, r2, #1
 8000866:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <LCD_direction+0xa4>)
 800086a:	22f0      	movs	r2, #240	; 0xf0
 800086c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 800086e:	2168      	movs	r1, #104	; 0x68
 8000870:	2036      	movs	r0, #54	; 0x36
 8000872:	f7ff ffa7 	bl	80007c4 <LCD_WriteReg>
        break;
 8000876:	e018      	b.n	80008aa <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <LCD_direction+0xa4>)
 800087a:	22f0      	movs	r2, #240	; 0xf0
 800087c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <LCD_direction+0xa4>)
 8000880:	22a0      	movs	r2, #160	; 0xa0
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8000886:	21c8      	movs	r1, #200	; 0xc8
 8000888:	2036      	movs	r0, #54	; 0x36
 800088a:	f7ff ff9b 	bl	80007c4 <LCD_WriteReg>
        break;
 800088e:	e00c      	b.n	80008aa <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LCD_direction+0xa4>)
 8000892:	22a0      	movs	r2, #160	; 0xa0
 8000894:	0052      	lsls	r2, r2, #1
 8000896:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LCD_direction+0xa4>)
 800089a:	22f0      	movs	r2, #240	; 0xf0
 800089c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 800089e:	21a8      	movs	r1, #168	; 0xa8
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	f7ff ff8f 	bl	80007c4 <LCD_WriteReg>
        break;
 80008a6:	e000      	b.n	80008aa <LCD_direction+0x9a>
    default:break;
 80008a8:	46c0      	nop			; (mov r8, r8)
    }
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	2000010c 	.word	0x2000010c

080008b8 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init(void (*reset)(int), void (*select)(int), void (*reg_select)(int))
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
    lcddev.reset = tft_reset;
 80008c4:	4ba0      	ldr	r3, [pc, #640]	; (8000b48 <LCD_Init+0x290>)
 80008c6:	4aa1      	ldr	r2, [pc, #644]	; (8000b4c <LCD_Init+0x294>)
 80008c8:	611a      	str	r2, [r3, #16]
    lcddev.select = tft_select;
 80008ca:	4b9f      	ldr	r3, [pc, #636]	; (8000b48 <LCD_Init+0x290>)
 80008cc:	4aa0      	ldr	r2, [pc, #640]	; (8000b50 <LCD_Init+0x298>)
 80008ce:	615a      	str	r2, [r3, #20]
    lcddev.reg_select = tft_reg_select;
 80008d0:	4b9d      	ldr	r3, [pc, #628]	; (8000b48 <LCD_Init+0x290>)
 80008d2:	4aa0      	ldr	r2, [pc, #640]	; (8000b54 <LCD_Init+0x29c>)
 80008d4:	619a      	str	r2, [r3, #24]
    if (reset)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <LCD_Init+0x2a>
        lcddev.reset = reset;
 80008dc:	4b9a      	ldr	r3, [pc, #616]	; (8000b48 <LCD_Init+0x290>)
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	611a      	str	r2, [r3, #16]
    if (select)
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d002      	beq.n	80008ee <LCD_Init+0x36>
        lcddev.select = select;
 80008e8:	4b97      	ldr	r3, [pc, #604]	; (8000b48 <LCD_Init+0x290>)
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	615a      	str	r2, [r3, #20]
    if (reg_select)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <LCD_Init+0x42>
        lcddev.reg_select = reg_select;
 80008f4:	4b94      	ldr	r3, [pc, #592]	; (8000b48 <LCD_Init+0x290>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	619a      	str	r2, [r3, #24]
    lcddev.select(1);
 80008fa:	4b93      	ldr	r3, [pc, #588]	; (8000b48 <LCD_Init+0x290>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	2001      	movs	r0, #1
 8000900:	4798      	blx	r3
    LCD_Reset();
 8000902:	f7ff fecd 	bl	80006a0 <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8000906:	20cf      	movs	r0, #207	; 0xcf
 8000908:	f7ff fee6 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff ff01 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8000912:	20d9      	movs	r0, #217	; 0xd9
 8000914:	f7ff fefe 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8000918:	2030      	movs	r0, #48	; 0x30
 800091a:	f7ff fefb 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 800091e:	20ed      	movs	r0, #237	; 0xed
 8000920:	f7ff feda 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f7ff fef5 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 800092a:	2003      	movs	r0, #3
 800092c:	f7ff fef2 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8000930:	2012      	movs	r0, #18
 8000932:	f7ff feef 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8000936:	2081      	movs	r0, #129	; 0x81
 8000938:	f7ff feec 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 800093c:	20e8      	movs	r0, #232	; 0xe8
 800093e:	f7ff fecb 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8000942:	2085      	movs	r0, #133	; 0x85
 8000944:	f7ff fee6 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8000948:	2010      	movs	r0, #16
 800094a:	f7ff fee3 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 800094e:	207a      	movs	r0, #122	; 0x7a
 8000950:	f7ff fee0 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8000954:	20cb      	movs	r0, #203	; 0xcb
 8000956:	f7ff febf 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 800095a:	2039      	movs	r0, #57	; 0x39
 800095c:	f7ff feda 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8000960:	202c      	movs	r0, #44	; 0x2c
 8000962:	f7ff fed7 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fed4 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 800096c:	2034      	movs	r0, #52	; 0x34
 800096e:	f7ff fed1 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fece 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 8000978:	20f7      	movs	r0, #247	; 0xf7
 800097a:	f7ff fead 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 800097e:	2020      	movs	r0, #32
 8000980:	f7ff fec8 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 8000984:	20ea      	movs	r0, #234	; 0xea
 8000986:	f7ff fea7 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fec2 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff febf 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 8000996:	20c0      	movs	r0, #192	; 0xc0
 8000998:	f7ff fe9e 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 800099c:	2021      	movs	r0, #33	; 0x21
 800099e:	f7ff feb9 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 80009a2:	20c1      	movs	r0, #193	; 0xc1
 80009a4:	f7ff fe98 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 80009a8:	2012      	movs	r0, #18
 80009aa:	f7ff feb3 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 80009ae:	20c5      	movs	r0, #197	; 0xc5
 80009b0:	f7ff fe92 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 80009b4:	2039      	movs	r0, #57	; 0x39
 80009b6:	f7ff fead 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 80009ba:	2037      	movs	r0, #55	; 0x37
 80009bc:	f7ff feaa 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 80009c0:	20c7      	movs	r0, #199	; 0xc7
 80009c2:	f7ff fe89 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 80009c6:	20ab      	movs	r0, #171	; 0xab
 80009c8:	f7ff fea4 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 80009cc:	2036      	movs	r0, #54	; 0x36
 80009ce:	f7ff fe83 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 80009d2:	2048      	movs	r0, #72	; 0x48
 80009d4:	f7ff fe9e 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 80009d8:	203a      	movs	r0, #58	; 0x3a
 80009da:	f7ff fe7d 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 80009de:	2055      	movs	r0, #85	; 0x55
 80009e0:	f7ff fe98 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 80009e4:	20b1      	movs	r0, #177	; 0xb1
 80009e6:	f7ff fe77 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fe92 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 80009f0:	201b      	movs	r0, #27
 80009f2:	f7ff fe8f 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 80009f6:	20b6      	movs	r0, #182	; 0xb6
 80009f8:	f7ff fe6e 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f7ff fe89 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8000a02:	20a2      	movs	r0, #162	; 0xa2
 8000a04:	f7ff fe86 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000a08:	20f2      	movs	r0, #242	; 0xf2
 8000a0a:	f7ff fe65 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff fe80 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8000a14:	2026      	movs	r0, #38	; 0x26
 8000a16:	f7ff fe5f 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff fe7a 	bl	8000714 <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8000a20:	20e0      	movs	r0, #224	; 0xe0
 8000a22:	f7ff fe59 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8000a26:	200f      	movs	r0, #15
 8000a28:	f7ff fe74 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8000a2c:	2023      	movs	r0, #35	; 0x23
 8000a2e:	f7ff fe71 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8000a32:	201f      	movs	r0, #31
 8000a34:	f7ff fe6e 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8000a38:	200b      	movs	r0, #11
 8000a3a:	f7ff fe6b 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8000a3e:	200e      	movs	r0, #14
 8000a40:	f7ff fe68 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8000a44:	2008      	movs	r0, #8
 8000a46:	f7ff fe65 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8000a4a:	204b      	movs	r0, #75	; 0x4b
 8000a4c:	f7ff fe62 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8000a50:	20a8      	movs	r0, #168	; 0xa8
 8000a52:	f7ff fe5f 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8000a56:	203b      	movs	r0, #59	; 0x3b
 8000a58:	f7ff fe5c 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 8000a5c:	200a      	movs	r0, #10
 8000a5e:	f7ff fe59 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8000a62:	2014      	movs	r0, #20
 8000a64:	f7ff fe56 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 8000a68:	2006      	movs	r0, #6
 8000a6a:	f7ff fe53 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8000a6e:	2010      	movs	r0, #16
 8000a70:	f7ff fe50 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8000a74:	2009      	movs	r0, #9
 8000a76:	f7ff fe4d 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fe4a 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 8000a80:	20e1      	movs	r0, #225	; 0xe1
 8000a82:	f7ff fe29 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff fe44 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 8000a8c:	201c      	movs	r0, #28
 8000a8e:	f7ff fe41 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 8000a92:	2020      	movs	r0, #32
 8000a94:	f7ff fe3e 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 8000a98:	2004      	movs	r0, #4
 8000a9a:	f7ff fe3b 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8000a9e:	2010      	movs	r0, #16
 8000aa0:	f7ff fe38 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8000aa4:	2008      	movs	r0, #8
 8000aa6:	f7ff fe35 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8000aaa:	2034      	movs	r0, #52	; 0x34
 8000aac:	f7ff fe32 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 8000ab0:	2047      	movs	r0, #71	; 0x47
 8000ab2:	f7ff fe2f 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 8000ab6:	2044      	movs	r0, #68	; 0x44
 8000ab8:	f7ff fe2c 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 8000abc:	2005      	movs	r0, #5
 8000abe:	f7ff fe29 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8000ac2:	200b      	movs	r0, #11
 8000ac4:	f7ff fe26 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8000ac8:	2009      	movs	r0, #9
 8000aca:	f7ff fe23 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 8000ace:	202f      	movs	r0, #47	; 0x2f
 8000ad0:	f7ff fe20 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8000ad4:	2036      	movs	r0, #54	; 0x36
 8000ad6:	f7ff fe1d 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f7ff fe1a 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8000ae0:	202b      	movs	r0, #43	; 0x2b
 8000ae2:	f7ff fdf9 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fe14 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fe11 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fe0e 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8000af8:	203f      	movs	r0, #63	; 0x3f
 8000afa:	f7ff fe0b 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8000afe:	202a      	movs	r0, #42	; 0x2a
 8000b00:	f7ff fdea 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fe05 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff fe02 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fdff 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8000b16:	20ef      	movs	r0, #239	; 0xef
 8000b18:	f7ff fdfc 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f7ff fddb 	bl	80006d8 <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <LCD_Init+0x2a0>)
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff fdaf 	bl	8000688 <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 8000b2a:	2029      	movs	r0, #41	; 0x29
 8000b2c:	f7ff fdd4 	bl	80006d8 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fe6d 	bl	8000810 <LCD_direction>
    lcddev.select(0);
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <LCD_Init+0x290>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	4798      	blx	r3
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	2000010c 	.word	0x2000010c
 8000b4c:	08000631 	.word	0x08000631
 8000b50:	080005e5 	.word	0x080005e5
 8000b54:	0800065d 	.word	0x0800065d
 8000b58:	07270e00 	.word	0x07270e00

08000b5c <LCD_Setup>:



void LCD_Setup() {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    init_lcd_spi();
 8000b60:	f000 f818 	bl	8000b94 <init_lcd_spi>
    tft_select(0);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff fd3d 	bl	80005e4 <tft_select>
    tft_reset(0);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff fd60 	bl	8000630 <tft_reset>
    tft_reg_select(0);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fd73 	bl	800065c <tft_reg_select>
    LCD_Init(tft_reset, tft_select, tft_reg_select);
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <LCD_Setup+0x2c>)
 8000b78:	4904      	ldr	r1, [pc, #16]	; (8000b8c <LCD_Setup+0x30>)
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <LCD_Setup+0x34>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fe9b 	bl	80008b8 <LCD_Init>
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	0800065d 	.word	0x0800065d
 8000b8c:	080005e5 	.word	0x080005e5
 8000b90:	08000631 	.word	0x08000631

08000b94 <init_lcd_spi>:

void init_lcd_spi(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <init_lcd_spi+0xac>)
 8000b9a:	695a      	ldr	r2, [r3, #20]
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <init_lcd_spi+0xac>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	02c9      	lsls	r1, r1, #11
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	615a      	str	r2, [r3, #20]
    GPIOB->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER11 | GPIO_MODER_MODER14);
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <init_lcd_spi+0xb0>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <init_lcd_spi+0xb0>)
 8000bac:	4926      	ldr	r1, [pc, #152]	; (8000c48 <init_lcd_spi+0xb4>)
 8000bae:	400a      	ands	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= GPIO_MODER_MODER8_0 | GPIO_MODER_MODER11_0 | GPIO_MODER_MODER14_0;
 8000bb2:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <init_lcd_spi+0xb0>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <init_lcd_spi+0xb0>)
 8000bb8:	4924      	ldr	r1, [pc, #144]	; (8000c4c <init_lcd_spi+0xb8>)
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	601a      	str	r2, [r3, #0]
    GPIOB->ODR |= GPIO_ODR_8 | GPIO_ODR_11 | GPIO_ODR_14;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <init_lcd_spi+0xb0>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <init_lcd_spi+0xb0>)
 8000bc4:	2192      	movs	r1, #146	; 0x92
 8000bc6:	01c9      	lsls	r1, r1, #7
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	615a      	str	r2, [r3, #20]
    GPIOB->MODER |= GPIO_MODER_MODER3 | GPIO_MODER_MODER5;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <init_lcd_spi+0xb0>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <init_lcd_spi+0xb0>)
 8000bd2:	21cc      	movs	r1, #204	; 0xcc
 8000bd4:	0109      	lsls	r1, r1, #4
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~(GPIO_MODER_MODER3_0 | GPIO_MODER_MODER5_0);
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <init_lcd_spi+0xb0>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <init_lcd_spi+0xb0>)
 8000be0:	491b      	ldr	r1, [pc, #108]	; (8000c50 <init_lcd_spi+0xbc>)
 8000be2:	400a      	ands	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <init_lcd_spi+0xac>)
 8000be8:	699a      	ldr	r2, [r3, #24]
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <init_lcd_spi+0xac>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0149      	lsls	r1, r1, #5
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	619a      	str	r2, [r3, #24]
    SPI1->CR1 &= ~SPI_CR1_SPE;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <init_lcd_spi+0xc0>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <init_lcd_spi+0xc0>)
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	438a      	bics	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
    SPI1->CR1 &= ~SPI_CR1_BR;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c06:	2138      	movs	r1, #56	; 0x38
 8000c08:	438a      	bics	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_MSTR;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c12:	2104      	movs	r1, #4
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c1a:	22e0      	movs	r2, #224	; 0xe0
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	605a      	str	r2, [r3, #4]
    SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c26:	21c0      	movs	r1, #192	; 0xc0
 8000c28:	0089      	lsls	r1, r1, #2
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_SPE;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <init_lcd_spi+0xc0>)
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	cf3cffff 	.word	0xcf3cffff
 8000c4c:	10410000 	.word	0x10410000
 8000c50:	fffffbbf 	.word	0xfffffbbf
 8000c54:	40013000 	.word	0x40013000

08000c58 <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0005      	movs	r5, r0
 8000c60:	000c      	movs	r4, r1
 8000c62:	0010      	movs	r0, r2
 8000c64:	0019      	movs	r1, r3
 8000c66:	1dbb      	adds	r3, r7, #6
 8000c68:	1c2a      	adds	r2, r5, #0
 8000c6a:	801a      	strh	r2, [r3, #0]
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	1c22      	adds	r2, r4, #0
 8000c70:	801a      	strh	r2, [r3, #0]
 8000c72:	1cbb      	adds	r3, r7, #2
 8000c74:	1c02      	adds	r2, r0, #0
 8000c76:	801a      	strh	r2, [r3, #0]
 8000c78:	003b      	movs	r3, r7
 8000c7a:	1c0a      	adds	r2, r1, #0
 8000c7c:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <LCD_SetWindow+0xbc>)
 8000c80:	895b      	ldrh	r3, [r3, #10]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fd27 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8000c8a:	1dbb      	adds	r3, r7, #6
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff fd3d 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8000c9a:	1dbb      	adds	r3, r7, #6
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff fd37 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 8000ca6:	1cbb      	adds	r3, r7, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff fd2f 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 8000cb6:	1cbb      	adds	r3, r7, #2
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fd29 	bl	8000714 <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <LCD_SetWindow+0xbc>)
 8000cc4:	899b      	ldrh	r3, [r3, #12]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff fd05 	bl	80006d8 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	0a1b      	lsrs	r3, r3, #8
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff fd1b 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fd15 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8000cea:	003b      	movs	r3, r7
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	0a1b      	lsrs	r3, r3, #8
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fd0d 	bl	8000714 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8000cfa:	003b      	movs	r3, r7
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fd07 	bl	8000714 <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8000d06:	f7ff fd75 	bl	80007f4 <LCD_WriteRAM_Prepare>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	2000010c 	.word	0x2000010c

08000d18 <_LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
static void _LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0004      	movs	r4, r0
 8000d20:	0008      	movs	r0, r1
 8000d22:	0011      	movs	r1, r2
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	1c22      	adds	r2, r4, #0
 8000d28:	801a      	strh	r2, [r3, #0]
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	1c02      	adds	r2, r0, #0
 8000d2e:	801a      	strh	r2, [r3, #0]
 8000d30:	1cbb      	adds	r3, r7, #2
 8000d32:	1c0a      	adds	r2, r1, #0
 8000d34:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	881c      	ldrh	r4, [r3, #0]
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	881a      	ldrh	r2, [r3, #0]
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	8819      	ldrh	r1, [r3, #0]
 8000d42:	1dbb      	adds	r3, r7, #6
 8000d44:	8818      	ldrh	r0, [r3, #0]
 8000d46:	0023      	movs	r3, r4
 8000d48:	f7ff ff86 	bl	8000c58 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8000d4c:	f7ff fd00 	bl	8000750 <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 8000d50:	1cbb      	adds	r3, r7, #2
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fd0f 	bl	8000778 <LCD_WriteData16>
    LCD_WriteData16_End();
 8000d5a:	f7ff fd23 	bl	80007a4 <LCD_WriteData16_End>
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b003      	add	sp, #12
 8000d64:	bd90      	pop	{r4, r7, pc}
	...

08000d68 <_LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void _LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0005      	movs	r5, r0
 8000d70:	000c      	movs	r4, r1
 8000d72:	0010      	movs	r0, r2
 8000d74:	0019      	movs	r1, r3
 8000d76:	1dbb      	adds	r3, r7, #6
 8000d78:	1c2a      	adds	r2, r5, #0
 8000d7a:	801a      	strh	r2, [r3, #0]
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	1c22      	adds	r2, r4, #0
 8000d80:	801a      	strh	r2, [r3, #0]
 8000d82:	1cbb      	adds	r3, r7, #2
 8000d84:	1c02      	adds	r2, r0, #0
 8000d86:	801a      	strh	r2, [r3, #0]
 8000d88:	003b      	movs	r3, r7
 8000d8a:	1c0a      	adds	r2, r1, #0
 8000d8c:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 8000d8e:	2220      	movs	r2, #32
 8000d90:	18bb      	adds	r3, r7, r2
 8000d92:	18ba      	adds	r2, r7, r2
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	3a20      	subs	r2, #32
 8000d98:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8000d9a:	2124      	movs	r1, #36	; 0x24
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	085b      	lsrs	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	18d3      	adds	r3, r2, r3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b29c      	uxth	r4, r3
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	18d3      	adds	r3, r2, r3
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	8819      	ldrh	r1, [r3, #0]
 8000dc8:	1dbb      	adds	r3, r7, #6
 8000dca:	8818      	ldrh	r0, [r3, #0]
 8000dcc:	0013      	movs	r3, r2
 8000dce:	0022      	movs	r2, r4
 8000dd0:	f7ff ff42 	bl	8000c58 <LCD_SetWindow>
    if (!mode) {
 8000dd4:	2328      	movs	r3, #40	; 0x28
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d166      	bne.n	8000eac <_LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 8000dde:	f7ff fcb7 	bl	8000750 <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 8000de2:	230e      	movs	r3, #14
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e054      	b.n	8000e96 <_LCD_DrawChar+0x12e>
            if (size==12)
 8000dec:	2324      	movs	r3, #36	; 0x24
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b0c      	cmp	r3, #12
 8000df4:	d110      	bne.n	8000e18 <_LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 8000df6:	2320      	movs	r3, #32
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	230e      	movs	r3, #14
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	7818      	ldrb	r0, [r3, #0]
 8000e02:	230f      	movs	r3, #15
 8000e04:	18f9      	adds	r1, r7, r3
 8000e06:	4c61      	ldr	r4, [pc, #388]	; (8000f8c <_LCD_DrawChar+0x224>)
 8000e08:	0013      	movs	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	189b      	adds	r3, r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	18e3      	adds	r3, r4, r3
 8000e12:	5c1b      	ldrb	r3, [r3, r0]
 8000e14:	700b      	strb	r3, [r1, #0]
 8000e16:	e00c      	b.n	8000e32 <_LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 8000e18:	2320      	movs	r3, #32
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	7819      	ldrb	r1, [r3, #0]
 8000e1e:	230e      	movs	r3, #14
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	4859      	ldr	r0, [pc, #356]	; (8000f90 <_LCD_DrawChar+0x228>)
 8000e2a:	0109      	lsls	r1, r1, #4
 8000e2c:	1841      	adds	r1, r0, r1
 8000e2e:	5c8a      	ldrb	r2, [r1, r2]
 8000e30:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8000e32:	230d      	movs	r3, #13
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	e01c      	b.n	8000e76 <_LCD_DrawChar+0x10e>
                if (temp&0x01)
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	d005      	beq.n	8000e54 <_LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 8000e48:	1cbb      	adds	r3, r7, #2
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fc93 	bl	8000778 <LCD_WriteData16>
 8000e52:	e004      	b.n	8000e5e <_LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 8000e54:	003b      	movs	r3, r7
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fc8d 	bl	8000778 <LCD_WriteData16>
                temp>>=1;
 8000e5e:	220f      	movs	r2, #15
 8000e60:	18bb      	adds	r3, r7, r2
 8000e62:	18ba      	adds	r2, r7, r2
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	0852      	lsrs	r2, r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8000e6a:	210d      	movs	r1, #13
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	3201      	adds	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	2324      	movs	r3, #36	; 0x24
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	085b      	lsrs	r3, r3, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	220d      	movs	r2, #13
 8000e82:	18ba      	adds	r2, r7, r2
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3d8      	bcc.n	8000e3c <_LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 8000e8a:	210e      	movs	r1, #14
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	3201      	adds	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	230e      	movs	r3, #14
 8000e98:	18fa      	adds	r2, r7, r3
 8000e9a:	2324      	movs	r3, #36	; 0x24
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	7812      	ldrb	r2, [r2, #0]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d3a2      	bcc.n	8000dec <_LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 8000ea6:	f7ff fc7d 	bl	80007a4 <LCD_WriteData16_End>
                    _LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 8000eaa:	e06b      	b.n	8000f84 <_LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 8000eac:	230e      	movs	r3, #14
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	e05e      	b.n	8000f74 <_LCD_DrawChar+0x20c>
            if (size==12)
 8000eb6:	2324      	movs	r3, #36	; 0x24
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b0c      	cmp	r3, #12
 8000ebe:	d110      	bne.n	8000ee2 <_LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	230e      	movs	r3, #14
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	7818      	ldrb	r0, [r3, #0]
 8000ecc:	230f      	movs	r3, #15
 8000ece:	18f9      	adds	r1, r7, r3
 8000ed0:	4c2e      	ldr	r4, [pc, #184]	; (8000f8c <_LCD_DrawChar+0x224>)
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	189b      	adds	r3, r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	18e3      	adds	r3, r4, r3
 8000edc:	5c1b      	ldrb	r3, [r3, r0]
 8000ede:	700b      	strb	r3, [r1, #0]
 8000ee0:	e00c      	b.n	8000efc <_LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	7819      	ldrb	r1, [r3, #0]
 8000ee8:	230e      	movs	r3, #14
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	230f      	movs	r3, #15
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	4827      	ldr	r0, [pc, #156]	; (8000f90 <_LCD_DrawChar+0x228>)
 8000ef4:	0109      	lsls	r1, r1, #4
 8000ef6:	1841      	adds	r1, r0, r1
 8000ef8:	5c8a      	ldrb	r2, [r1, r2]
 8000efa:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8000efc:	230d      	movs	r3, #13
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e026      	b.n	8000f54 <_LCD_DrawChar+0x1ec>
                if(temp&0x01)
 8000f06:	230f      	movs	r3, #15
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d014      	beq.n	8000f3c <_LCD_DrawChar+0x1d4>
                    _LCD_DrawPoint(x+t,y+pos,fc);
 8000f12:	230d      	movs	r3, #13
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	1dbb      	adds	r3, r7, #6
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	18d3      	adds	r3, r2, r3
 8000f20:	b298      	uxth	r0, r3
 8000f22:	230e      	movs	r3, #14
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	18d3      	adds	r3, r2, r3
 8000f30:	b299      	uxth	r1, r3
 8000f32:	1cbb      	adds	r3, r7, #2
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	001a      	movs	r2, r3
 8000f38:	f7ff feee 	bl	8000d18 <_LCD_DrawPoint>
                temp>>=1;
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	18bb      	adds	r3, r7, r2
 8000f40:	18ba      	adds	r2, r7, r2
 8000f42:	7812      	ldrb	r2, [r2, #0]
 8000f44:	0852      	lsrs	r2, r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8000f48:	210d      	movs	r1, #13
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	3201      	adds	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	2324      	movs	r3, #36	; 0x24
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	085b      	lsrs	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	220d      	movs	r2, #13
 8000f60:	18ba      	adds	r2, r7, r2
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3ce      	bcc.n	8000f06 <_LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 8000f68:	210e      	movs	r1, #14
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	3201      	adds	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	230e      	movs	r3, #14
 8000f76:	18fa      	adds	r2, r7, r3
 8000f78:	2324      	movs	r3, #36	; 0x24
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d398      	bcc.n	8000eb6 <_LCD_DrawChar+0x14e>
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b004      	add	sp, #16
 8000f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8c:	08003824 	.word	0x08003824
 8000f90:	08003c98 	.word	0x08003c98

08000f94 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	0005      	movs	r5, r0
 8000f9c:	000c      	movs	r4, r1
 8000f9e:	0010      	movs	r0, r2
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	1c2a      	adds	r2, r5, #0
 8000fa6:	801a      	strh	r2, [r3, #0]
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	1c22      	adds	r2, r4, #0
 8000fac:	801a      	strh	r2, [r3, #0]
 8000fae:	1cbb      	adds	r3, r7, #2
 8000fb0:	1c02      	adds	r2, r0, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
 8000fb4:	003b      	movs	r3, r7
 8000fb6:	1c0a      	adds	r2, r1, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <LCD_DrawString+0xc0>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	4798      	blx	r3
    while((*p<='~')&&(*p>=' '))
 8000fc2:	e035      	b.n	8001030 <LCD_DrawString+0x9c>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <LCD_DrawString+0xc0>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	1dba      	adds	r2, r7, #6
 8000fca:	8812      	ldrh	r2, [r2, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d23c      	bcs.n	800104a <LCD_DrawString+0xb6>
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <LCD_DrawString+0xc0>)
 8000fd2:	885b      	ldrh	r3, [r3, #2]
 8000fd4:	1d3a      	adds	r2, r7, #4
 8000fd6:	8812      	ldrh	r2, [r2, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d236      	bcs.n	800104a <LCD_DrawString+0xb6>
        return;
        _LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	003a      	movs	r2, r7
 8000fe2:	8815      	ldrh	r5, [r2, #0]
 8000fe4:	1cba      	adds	r2, r7, #2
 8000fe6:	8814      	ldrh	r4, [r2, #0]
 8000fe8:	1d3a      	adds	r2, r7, #4
 8000fea:	8811      	ldrh	r1, [r2, #0]
 8000fec:	1dba      	adds	r2, r7, #6
 8000fee:	8810      	ldrh	r0, [r2, #0]
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	2608      	movs	r6, #8
 8000ff4:	1992      	adds	r2, r2, r6
 8000ff6:	19d2      	adds	r2, r2, r7
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	9202      	str	r2, [sp, #8]
 8000ffc:	261c      	movs	r6, #28
 8000ffe:	2208      	movs	r2, #8
 8001000:	18b2      	adds	r2, r6, r2
 8001002:	19d2      	adds	r2, r2, r7
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	9201      	str	r2, [sp, #4]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	002b      	movs	r3, r5
 800100c:	0022      	movs	r2, r4
 800100e:	f7ff feab 	bl	8000d68 <_LCD_DrawChar>
        x+=size/2;
 8001012:	2308      	movs	r3, #8
 8001014:	18f3      	adds	r3, r6, r3
 8001016:	19db      	adds	r3, r3, r7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	b299      	uxth	r1, r3
 8001020:	1dbb      	adds	r3, r7, #6
 8001022:	1dba      	adds	r2, r7, #6
 8001024:	8812      	ldrh	r2, [r2, #0]
 8001026:	188a      	adds	r2, r1, r2
 8001028:	801a      	strh	r2, [r3, #0]
        p++;
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	3301      	adds	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b7e      	cmp	r3, #126	; 0x7e
 8001036:	d803      	bhi.n	8001040 <LCD_DrawString+0xac>
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b1f      	cmp	r3, #31
 800103e:	d8c1      	bhi.n	8000fc4 <LCD_DrawString+0x30>
    }
    lcddev.select(0);
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <LCD_DrawString+0xc0>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	2000      	movs	r0, #0
 8001046:	4798      	blx	r3
 8001048:	e000      	b.n	800104c <LCD_DrawString+0xb8>
        return;
 800104a:	46c0      	nop			; (mov r8, r8)
}
 800104c:	46bd      	mov	sp, r7
 800104e:	b003      	add	sp, #12
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	2000010c 	.word	0x2000010c

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b093      	sub	sp, #76	; 0x4c
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	2414      	movs	r4, #20
 8001060:	193b      	adds	r3, r7, r4
 8001062:	0018      	movs	r0, r3
 8001064:	2334      	movs	r3, #52	; 0x34
 8001066:	001a      	movs	r2, r3
 8001068:	2100      	movs	r1, #0
 800106a:	f001 f8eb 	bl	8002244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	0018      	movs	r0, r3
 8001072:	2310      	movs	r3, #16
 8001074:	001a      	movs	r2, r3
 8001076:	2100      	movs	r1, #0
 8001078:	f001 f8e4 	bl	8002244 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800107c:	193b      	adds	r3, r7, r4
 800107e:	2220      	movs	r2, #32
 8001080:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	2201      	movs	r2, #1
 8001086:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	f000 fbb1 	bl	80017f8 <HAL_RCC_OscConfig>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800109a:	f000 f819 	bl	80010d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2203      	movs	r2, #3
 80010a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2101      	movs	r1, #1
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 ff22 	bl	8001f04 <HAL_RCC_ClockConfig>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80010c4:	f000 f804 	bl	80010d0 <Error_Handler>
  }
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b013      	add	sp, #76	; 0x4c
 80010ce:	bd90      	pop	{r4, r7, pc}

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <Error_Handler+0x8>

080010da <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010de:	e7fe      	b.n	80010de <NMI_Handler+0x4>

080010e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <HardFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fe:	f000 faab 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <nano_wait>:
#include "stm32f0xx.h"
#include <string.h> // for memmove()
#include <stdlib.h> // for srandom() and random()

void nano_wait(unsigned int n) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	1c18      	adds	r0, r3, #0

08001114 <repeat>:
 8001114:	3853      	subs	r0, #83	; 0x53
 8001116:	dcfd      	bgt.n	8001114 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <print>:
void set_digit_segments(int digit, char val) {
    msg[digit] = (digit << 8) | val;
}

void print(const char str[])
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    const char *p = str;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<8; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	e02c      	b.n	800118c <print+0x6c>
        if (*p == '\0') {
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d108      	bne.n	800114c <print+0x2c>
            msg[i] = (i<<8);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	b29b      	uxth	r3, r3
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b299      	uxth	r1, r3
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <print+0x7c>)
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	0052      	lsls	r2, r2, #1
 8001148:	52d1      	strh	r1, [r2, r3]
 800114a:	e01c      	b.n	8001186 <print+0x66>
        } else {
            msg[i] = (i<<8) | font[*p & 0x7f] | (*p & 0x80);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0019      	movs	r1, r3
 8001158:	237f      	movs	r3, #127	; 0x7f
 800115a:	400b      	ands	r3, r1
 800115c:	4910      	ldr	r1, [pc, #64]	; (80011a0 <print+0x80>)
 800115e:	5ccb      	ldrb	r3, [r1, r3]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b21b      	sxth	r3, r3
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	400b      	ands	r3, r1
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21b      	sxth	r3, r3
 8001176:	b299      	uxth	r1, r3
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <print+0x7c>)
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	52d1      	strh	r1, [r2, r3]
            p++;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<8; i++) {
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b07      	cmp	r3, #7
 8001190:	ddcf      	ble.n	8001132 <print+0x12>
        }
    }
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b004      	add	sp, #16
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	08004288 	.word	0x08004288

080011a4 <spi1_dma_display1>:
    msg[7] |= 0x80;
}

extern uint16_t display[34];
void spi1_dma_display1(const char *str)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    for(int i=0; i<16; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e029      	b.n	8001206 <spi1_dma_display1+0x62>
        if (str[i])
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	18d3      	adds	r3, r2, r3
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00f      	beq.n	80011de <spi1_dma_display1+0x3a>
            display[i+1] = 0x200 + str[i];
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	18d3      	adds	r3, r2, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	3201      	adds	r2, #1
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	0089      	lsls	r1, r1, #2
 80011d0:	468c      	mov	ip, r1
 80011d2:	4463      	add	r3, ip
 80011d4:	b299      	uxth	r1, r3
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <spi1_dma_display1+0x74>)
 80011d8:	0052      	lsls	r2, r2, #1
 80011da:	52d1      	strh	r1, [r2, r3]
 80011dc:	e010      	b.n	8001200 <spi1_dma_display1+0x5c>
        else {
            // End of string.  Pad with spaces.
            for(int j=i; j<16; j++)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	e009      	b.n	80011f8 <spi1_dma_display1+0x54>
                display[j+1] = 0x200 + ' ';
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <spi1_dma_display1+0x74>)
 80011ea:	0052      	lsls	r2, r2, #1
 80011ec:	2188      	movs	r1, #136	; 0x88
 80011ee:	0089      	lsls	r1, r1, #2
 80011f0:	52d1      	strh	r1, [r2, r3]
            for(int j=i; j<16; j++)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	ddf2      	ble.n	80011e4 <spi1_dma_display1+0x40>
            break;
 80011fe:	e006      	b.n	800120e <spi1_dma_display1+0x6a>
    for(int i=0; i<16; i++) {
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	ddd2      	ble.n	80011b2 <spi1_dma_display1+0xe>
        }
    }
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	20000010 	.word	0x20000010

0800121c <spi1_dma_display2>:

void spi1_dma_display2(const char *str)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    for(int i=0; i<16; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e02a      	b.n	8001280 <spi1_dma_display2+0x64>
        if (str[i])
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	18d3      	adds	r3, r2, r3
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00f      	beq.n	8001256 <spi1_dma_display2+0x3a>
            display[i+18] = 0x200 + str[i];
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	3212      	adds	r2, #18
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	0089      	lsls	r1, r1, #2
 8001248:	468c      	mov	ip, r1
 800124a:	4463      	add	r3, ip
 800124c:	b299      	uxth	r1, r3
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <spi1_dma_display2+0x74>)
 8001250:	0052      	lsls	r2, r2, #1
 8001252:	52d1      	strh	r1, [r2, r3]
 8001254:	e011      	b.n	800127a <spi1_dma_display2+0x5e>
        else {
            // End of string.  Pad with spaces.
            for(int j=i; j<16; j++)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	e00a      	b.n	8001272 <spi1_dma_display2+0x56>
                display[j+18] = 0x200 + ' ';
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3312      	adds	r3, #18
 8001260:	001a      	movs	r2, r3
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <spi1_dma_display2+0x74>)
 8001264:	0052      	lsls	r2, r2, #1
 8001266:	2188      	movs	r1, #136	; 0x88
 8001268:	0089      	lsls	r1, r1, #2
 800126a:	52d1      	strh	r1, [r2, r3]
            for(int j=i; j<16; j++)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	3301      	adds	r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	ddf1      	ble.n	800125c <spi1_dma_display2+0x40>
            break;
 8001278:	e006      	b.n	8001288 <spi1_dma_display2+0x6c>
    for(int i=0; i<16; i++) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	ddd1      	ble.n	800122a <spi1_dma_display2+0xe>
        }
    }
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000010 	.word	0x20000010

08001294 <TIM17_IRQHandler>:
int score = 0;
char disp1[17] = "                ";
char disp2[17] = "                ";
volatile int pos = 0;
void TIM17_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
    TIM17->SR &= ~TIM_SR_UIF;
 800129a:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <TIM17_IRQHandler+0x150>)
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <TIM17_IRQHandler+0x150>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	438a      	bics	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
    memmove(disp1, &disp1[1], 16);
 80012a6:	4950      	ldr	r1, [pc, #320]	; (80013e8 <TIM17_IRQHandler+0x154>)
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <TIM17_IRQHandler+0x158>)
 80012aa:	2210      	movs	r2, #16
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 ffb6 	bl	800221e <memmove>
    memmove(disp2, &disp2[1], 16);
 80012b2:	494f      	ldr	r1, [pc, #316]	; (80013f0 <TIM17_IRQHandler+0x15c>)
 80012b4:	4b4f      	ldr	r3, [pc, #316]	; (80013f4 <TIM17_IRQHandler+0x160>)
 80012b6:	2210      	movs	r2, #16
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 ffb0 	bl	800221e <memmove>
    if (pos == 0) {
 80012be:	4b4e      	ldr	r3, [pc, #312]	; (80013f8 <TIM17_IRQHandler+0x164>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d115      	bne.n	80012f2 <TIM17_IRQHandler+0x5e>
        if (disp1[0] != ' ')
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <TIM17_IRQHandler+0x158>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	d004      	beq.n	80012d8 <TIM17_IRQHandler+0x44>
            score += 1;
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <TIM17_IRQHandler+0x168>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	4b49      	ldr	r3, [pc, #292]	; (80013fc <TIM17_IRQHandler+0x168>)
 80012d6:	601a      	str	r2, [r3, #0]
        if (disp2[0] != ' ')
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <TIM17_IRQHandler+0x160>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d004      	beq.n	80012ea <TIM17_IRQHandler+0x56>
            score -= 1;
 80012e0:	4b46      	ldr	r3, [pc, #280]	; (80013fc <TIM17_IRQHandler+0x168>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	4b45      	ldr	r3, [pc, #276]	; (80013fc <TIM17_IRQHandler+0x168>)
 80012e8:	601a      	str	r2, [r3, #0]
        disp1[0] = '>';
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <TIM17_IRQHandler+0x158>)
 80012ec:	223e      	movs	r2, #62	; 0x3e
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	e014      	b.n	800131c <TIM17_IRQHandler+0x88>
    } else {
        if (disp2[0] != ' ')
 80012f2:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <TIM17_IRQHandler+0x160>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d004      	beq.n	8001304 <TIM17_IRQHandler+0x70>
            score += 1;
 80012fa:	4b40      	ldr	r3, [pc, #256]	; (80013fc <TIM17_IRQHandler+0x168>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <TIM17_IRQHandler+0x168>)
 8001302:	601a      	str	r2, [r3, #0]
        if (disp1[0] != ' ')
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <TIM17_IRQHandler+0x158>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b20      	cmp	r3, #32
 800130a:	d004      	beq.n	8001316 <TIM17_IRQHandler+0x82>
            score -= 1;
 800130c:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <TIM17_IRQHandler+0x168>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <TIM17_IRQHandler+0x168>)
 8001314:	601a      	str	r2, [r3, #0]
        disp2[0] = '>';
 8001316:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <TIM17_IRQHandler+0x160>)
 8001318:	223e      	movs	r2, #62	; 0x3e
 800131a:	701a      	strb	r2, [r3, #0]
    }
    int create = random() & 3;
 800131c:	f000 ff9a 	bl	8002254 <random>
 8001320:	0003      	movs	r3, r0
 8001322:	2203      	movs	r2, #3
 8001324:	4013      	ands	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
    if (create == 0) { // one in four chance
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <TIM17_IRQHandler+0xc8>
        int line = random() & 1;
 800132e:	f000 ff91 	bl	8002254 <random>
 8001332:	0003      	movs	r3, r0
 8001334:	2201      	movs	r2, #1
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if (line == 0) { // pick a line
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d106      	bne.n	800134e <TIM17_IRQHandler+0xba>
            disp1[15] = 'x';
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <TIM17_IRQHandler+0x158>)
 8001342:	2278      	movs	r2, #120	; 0x78
 8001344:	73da      	strb	r2, [r3, #15]
            disp2[15] = ' ';
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <TIM17_IRQHandler+0x160>)
 8001348:	2220      	movs	r2, #32
 800134a:	73da      	strb	r2, [r3, #15]
 800134c:	e00c      	b.n	8001368 <TIM17_IRQHandler+0xd4>
        } else {
            disp1[15] = ' ';
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <TIM17_IRQHandler+0x158>)
 8001350:	2220      	movs	r2, #32
 8001352:	73da      	strb	r2, [r3, #15]
            disp2[15] = 'x';
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <TIM17_IRQHandler+0x160>)
 8001356:	2278      	movs	r2, #120	; 0x78
 8001358:	73da      	strb	r2, [r3, #15]
 800135a:	e005      	b.n	8001368 <TIM17_IRQHandler+0xd4>
        }
    } else {
        disp1[15] = ' ';
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <TIM17_IRQHandler+0x158>)
 800135e:	2220      	movs	r2, #32
 8001360:	73da      	strb	r2, [r3, #15]
        disp2[15] = ' ';
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <TIM17_IRQHandler+0x160>)
 8001364:	2220      	movs	r2, #32
 8001366:	73da      	strb	r2, [r3, #15]
    }
    if (pos == 0)
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <TIM17_IRQHandler+0x164>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <TIM17_IRQHandler+0xe4>
        disp1[0] = '>';
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <TIM17_IRQHandler+0x158>)
 8001372:	223e      	movs	r2, #62	; 0x3e
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e002      	b.n	800137e <TIM17_IRQHandler+0xea>
    else
        disp2[0] = '>';
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <TIM17_IRQHandler+0x160>)
 800137a:	223e      	movs	r2, #62	; 0x3e
 800137c:	701a      	strb	r2, [r3, #0]
    if (score >= 100) {
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <TIM17_IRQHandler+0x168>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b63      	cmp	r3, #99	; 0x63
 8001384:	dd11      	ble.n	80013aa <TIM17_IRQHandler+0x116>
        print("Score100");
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <TIM17_IRQHandler+0x16c>)
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff fec9 	bl	8001120 <print>
        spi1_dma_display1("Game over");
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <TIM17_IRQHandler+0x170>)
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ff07 	bl	80011a4 <spi1_dma_display1>
        spi1_dma_display2("You win");
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <TIM17_IRQHandler+0x174>)
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ff3f 	bl	800121c <spi1_dma_display2>
        NVIC->ICER[0] = 1<<TIM17_IRQn;
 800139e:	491b      	ldr	r1, [pc, #108]	; (800140c <TIM17_IRQHandler+0x178>)
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	03db      	lsls	r3, r3, #15
 80013a6:	508b      	str	r3, [r1, r2]
 80013a8:	e019      	b.n	80013de <TIM17_IRQHandler+0x14a>
        return;
    }
    char buf[9];
    snprintf(buf, 9, "Score% 3d", score);
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <TIM17_IRQHandler+0x168>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <TIM17_IRQHandler+0x17c>)
 80013b0:	1d38      	adds	r0, r7, #4
 80013b2:	2109      	movs	r1, #9
 80013b4:	f000 ff8c 	bl	80022d0 <sniprintf>
    print(buf);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff feb0 	bl	8001120 <print>
    spi1_dma_display1(disp1);
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <TIM17_IRQHandler+0x158>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7ff feee 	bl	80011a4 <spi1_dma_display1>
    spi1_dma_display2(disp2);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <TIM17_IRQHandler+0x160>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff ff26 	bl	800121c <spi1_dma_display2>
    TIM17->ARR = 250 - 1 - 2*score;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <TIM17_IRQHandler+0x168>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	22f9      	movs	r2, #249	; 0xf9
 80013d8:	1ad2      	subs	r2, r2, r3
 80013da:	4b02      	ldr	r3, [pc, #8]	; (80013e4 <TIM17_IRQHandler+0x150>)
 80013dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013de:	46bd      	mov	sp, r7
 80013e0:	b006      	add	sp, #24
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40014800 	.word	0x40014800
 80013e8:	20000055 	.word	0x20000055
 80013ec:	20000054 	.word	0x20000054
 80013f0:	20000069 	.word	0x20000069
 80013f4:	20000068 	.word	0x20000068
 80013f8:	2000012c 	.word	0x2000012c
 80013fc:	20000128 	.word	0x20000128
 8001400:	08003784 	.word	0x08003784
 8001404:	08003790 	.word	0x08003790
 8001408:	0800379c 	.word	0x0800379c
 800140c:	e000e100 	.word	0xe000e100
 8001410:	080037a4 	.word	0x080037a4

08001414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	return 1;
 8001418:	2301      	movs	r3, #1
}
 800141a:	0018      	movs	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_kill>:

int _kill(int pid, int sig)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800142a:	f000 fec5 	bl	80021b8 <__errno>
 800142e:	0003      	movs	r3, r0
 8001430:	2216      	movs	r2, #22
 8001432:	601a      	str	r2, [r3, #0]
	return -1;
 8001434:	2301      	movs	r3, #1
 8001436:	425b      	negs	r3, r3
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}

08001440 <_exit>:

void _exit (int status)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001448:	2301      	movs	r3, #1
 800144a:	425a      	negs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff ffe5 	bl	8001420 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001456:	e7fe      	b.n	8001456 <_exit+0x16>

08001458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e00a      	b.n	8001480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800146a:	e000      	b.n	800146e <_read+0x16>
 800146c:	bf00      	nop
 800146e:	0001      	movs	r1, r0
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	b2ca      	uxtb	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbf0      	blt.n	800146a <_read+0x12>
	}

return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b006      	add	sp, #24
 8001490:	bd80      	pop	{r7, pc}

08001492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e009      	b.n	80014b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	0018      	movs	r0, r3
 80014ae:	e000      	b.n	80014b2 <_write+0x20>
 80014b0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf1      	blt.n	80014a4 <_write+0x12>
	}
	return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b006      	add	sp, #24
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_close>:

int _close(int file)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
	return -1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	425b      	negs	r3, r3
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}

080014de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	0192      	lsls	r2, r2, #6
 80014ee:	605a      	str	r2, [r3, #4]
	return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_isatty>:

int _isatty(int file)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	return 1;
 8001502:	2301      	movs	r3, #1
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b004      	add	sp, #16
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	18d3      	adds	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f000 fe30 	bl	80021b8 <__errno>
 8001558:	0003      	movs	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	2301      	movs	r3, #1
 8001560:	425b      	negs	r3, r3
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	18d2      	adds	r2, r2, r3
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b006      	add	sp, #24
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20008000 	.word	0x20008000
 8001584:	00000400 	.word	0x00000400
 8001588:	20000130 	.word	0x20000130
 800158c:	20000148 	.word	0x20000148

08001590 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800159e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a2:	490e      	ldr	r1, [pc, #56]	; (80015dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <LoopForever+0xe>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b8:	4c0b      	ldr	r4, [pc, #44]	; (80015e8 <LoopForever+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015c6:	f7ff ffe3 	bl	8001590 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80015ca:	f000 fdfb 	bl	80021c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ce:	f7fe ff99 	bl	8000504 <main>

080015d2 <LoopForever>:

LoopForever:
    b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   r0, =_estack
 80015d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80015e0:	08004464 	.word	0x08004464
  ldr r2, =_sbss
 80015e4:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80015e8:	20000148 	.word	0x20000148

080015ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_COMP_IRQHandler>
	...

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_InitTick+0x5c>)
 80015fa:	681c      	ldr	r4, [r3, #0]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_InitTick+0x60>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	0019      	movs	r1, r3
 8001602:	23fa      	movs	r3, #250	; 0xfa
 8001604:	0098      	lsls	r0, r3, #2
 8001606:	f7fe fd87 	bl	8000118 <__udivsi3>
 800160a:	0003      	movs	r3, r0
 800160c:	0019      	movs	r1, r3
 800160e:	0020      	movs	r0, r4
 8001610:	f7fe fd82 	bl	8000118 <__udivsi3>
 8001614:	0003      	movs	r3, r0
 8001616:	0018      	movs	r0, r3
 8001618:	f000 f8e1 	bl	80017de <HAL_SYSTICK_Config>
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	d001      	beq.n	8001624 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e00f      	b.n	8001644 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d80b      	bhi.n	8001642 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	2301      	movs	r3, #1
 800162e:	425b      	negs	r3, r3
 8001630:	2200      	movs	r2, #0
 8001632:	0018      	movs	r0, r3
 8001634:	f000 f8be 	bl	80017b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_InitTick+0x64>)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b003      	add	sp, #12
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	2000007c 	.word	0x2000007c
 8001650:	20000084 	.word	0x20000084
 8001654:	20000080 	.word	0x20000080

08001658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_IncTick+0x1c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	001a      	movs	r2, r3
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_IncTick+0x20>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	18d2      	adds	r2, r2, r3
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_IncTick+0x20>)
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	20000084 	.word	0x20000084
 8001678:	20000134 	.word	0x20000134

0800167c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <HAL_GetTick+0x10>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	20000134 	.word	0x20000134

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	0002      	movs	r2, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b7f      	cmp	r3, #127	; 0x7f
 80016a4:	d828      	bhi.n	80016f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a6:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <__NVIC_SetPriority+0xd4>)
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	33c0      	adds	r3, #192	; 0xc0
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	589b      	ldr	r3, [r3, r2]
 80016b6:	1dfa      	adds	r2, r7, #7
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	0011      	movs	r1, r2
 80016bc:	2203      	movs	r2, #3
 80016be:	400a      	ands	r2, r1
 80016c0:	00d2      	lsls	r2, r2, #3
 80016c2:	21ff      	movs	r1, #255	; 0xff
 80016c4:	4091      	lsls	r1, r2
 80016c6:	000a      	movs	r2, r1
 80016c8:	43d2      	mvns	r2, r2
 80016ca:	401a      	ands	r2, r3
 80016cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	22ff      	movs	r2, #255	; 0xff
 80016d4:	401a      	ands	r2, r3
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	2303      	movs	r3, #3
 80016de:	4003      	ands	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e4:	481f      	ldr	r0, [pc, #124]	; (8001764 <__NVIC_SetPriority+0xd4>)
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	430a      	orrs	r2, r1
 80016f0:	33c0      	adds	r3, #192	; 0xc0
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016f6:	e031      	b.n	800175c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <__NVIC_SetPriority+0xd8>)
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0019      	movs	r1, r3
 8001700:	230f      	movs	r3, #15
 8001702:	400b      	ands	r3, r1
 8001704:	3b08      	subs	r3, #8
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3306      	adds	r3, #6
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1dfa      	adds	r2, r7, #7
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	0011      	movs	r1, r2
 8001718:	2203      	movs	r2, #3
 800171a:	400a      	ands	r2, r1
 800171c:	00d2      	lsls	r2, r2, #3
 800171e:	21ff      	movs	r1, #255	; 0xff
 8001720:	4091      	lsls	r1, r2
 8001722:	000a      	movs	r2, r1
 8001724:	43d2      	mvns	r2, r2
 8001726:	401a      	ands	r2, r3
 8001728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	019b      	lsls	r3, r3, #6
 800172e:	22ff      	movs	r2, #255	; 0xff
 8001730:	401a      	ands	r2, r3
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	0018      	movs	r0, r3
 8001738:	2303      	movs	r3, #3
 800173a:	4003      	ands	r3, r0
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <__NVIC_SetPriority+0xd8>)
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	001c      	movs	r4, r3
 8001748:	230f      	movs	r3, #15
 800174a:	4023      	ands	r3, r4
 800174c:	3b08      	subs	r3, #8
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	430a      	orrs	r2, r1
 8001752:	3306      	adds	r3, #6
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	18c3      	adds	r3, r0, r3
 8001758:	3304      	adds	r3, #4
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b003      	add	sp, #12
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	045b      	lsls	r3, r3, #17
 800177c:	429a      	cmp	r2, r3
 800177e:	d301      	bcc.n	8001784 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001780:	2301      	movs	r3, #1
 8001782:	e010      	b.n	80017a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <SysTick_Config+0x44>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	3a01      	subs	r2, #1
 800178a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178c:	2301      	movs	r3, #1
 800178e:	425b      	negs	r3, r3
 8001790:	2103      	movs	r1, #3
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff ff7c 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x44>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x44>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	210f      	movs	r1, #15
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	0011      	movs	r1, r2
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b004      	add	sp, #16
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ffbf 	bl	800176c <SysTick_Config>
 80017ee:	0003      	movs	r3, r0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f000 fb76 	bl	8001ef8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	d100      	bne.n	8001818 <HAL_RCC_OscConfig+0x20>
 8001816:	e08e      	b.n	8001936 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001818:	4bc5      	ldr	r3, [pc, #788]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	220c      	movs	r2, #12
 800181e:	4013      	ands	r3, r2
 8001820:	2b04      	cmp	r3, #4
 8001822:	d00e      	beq.n	8001842 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001824:	4bc2      	ldr	r3, [pc, #776]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	220c      	movs	r2, #12
 800182a:	4013      	ands	r3, r2
 800182c:	2b08      	cmp	r3, #8
 800182e:	d117      	bne.n	8001860 <HAL_RCC_OscConfig+0x68>
 8001830:	4bbf      	ldr	r3, [pc, #764]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	23c0      	movs	r3, #192	; 0xc0
 8001836:	025b      	lsls	r3, r3, #9
 8001838:	401a      	ands	r2, r3
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	025b      	lsls	r3, r3, #9
 800183e:	429a      	cmp	r2, r3
 8001840:	d10e      	bne.n	8001860 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4bbb      	ldr	r3, [pc, #748]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	029b      	lsls	r3, r3, #10
 800184a:	4013      	ands	r3, r2
 800184c:	d100      	bne.n	8001850 <HAL_RCC_OscConfig+0x58>
 800184e:	e071      	b.n	8001934 <HAL_RCC_OscConfig+0x13c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d000      	beq.n	800185a <HAL_RCC_OscConfig+0x62>
 8001858:	e06c      	b.n	8001934 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	f000 fb4c 	bl	8001ef8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x80>
 8001868:	4bb1      	ldr	r3, [pc, #708]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4bb0      	ldr	r3, [pc, #704]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	0249      	lsls	r1, r1, #9
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e02f      	b.n	80018d8 <HAL_RCC_OscConfig+0xe0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10c      	bne.n	800189a <HAL_RCC_OscConfig+0xa2>
 8001880:	4bab      	ldr	r3, [pc, #684]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4baa      	ldr	r3, [pc, #680]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001886:	49ab      	ldr	r1, [pc, #684]	; (8001b34 <HAL_RCC_OscConfig+0x33c>)
 8001888:	400a      	ands	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	4ba8      	ldr	r3, [pc, #672]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4ba7      	ldr	r3, [pc, #668]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001892:	49a9      	ldr	r1, [pc, #676]	; (8001b38 <HAL_RCC_OscConfig+0x340>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e01e      	b.n	80018d8 <HAL_RCC_OscConfig+0xe0>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d10e      	bne.n	80018c0 <HAL_RCC_OscConfig+0xc8>
 80018a2:	4ba3      	ldr	r3, [pc, #652]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4ba2      	ldr	r3, [pc, #648]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	02c9      	lsls	r1, r1, #11
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	4b9f      	ldr	r3, [pc, #636]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b9e      	ldr	r3, [pc, #632]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	0249      	lsls	r1, r1, #9
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xe0>
 80018c0:	4b9b      	ldr	r3, [pc, #620]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b9a      	ldr	r3, [pc, #616]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018c6:	499b      	ldr	r1, [pc, #620]	; (8001b34 <HAL_RCC_OscConfig+0x33c>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	4b98      	ldr	r3, [pc, #608]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b97      	ldr	r3, [pc, #604]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018d2:	4999      	ldr	r1, [pc, #612]	; (8001b38 <HAL_RCC_OscConfig+0x340>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d014      	beq.n	800190a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fecc 	bl	800167c <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ea:	f7ff fec7 	bl	800167c <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e2fd      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fc:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	029b      	lsls	r3, r3, #10
 8001904:	4013      	ands	r3, r2
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0xf2>
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff feb7 	bl	800167c <HAL_GetTick>
 800190e:	0003      	movs	r3, r0
 8001910:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff feb2 	bl	800167c <HAL_GetTick>
 8001918:	0002      	movs	r2, r0
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e2e8      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	029b      	lsls	r3, r3, #10
 800192e:	4013      	ands	r3, r2
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x11c>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d100      	bne.n	8001942 <HAL_RCC_OscConfig+0x14a>
 8001940:	e06c      	b.n	8001a1c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001942:	4b7b      	ldr	r3, [pc, #492]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	220c      	movs	r2, #12
 8001948:	4013      	ands	r3, r2
 800194a:	d00e      	beq.n	800196a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800194c:	4b78      	ldr	r3, [pc, #480]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	220c      	movs	r2, #12
 8001952:	4013      	ands	r3, r2
 8001954:	2b08      	cmp	r3, #8
 8001956:	d11f      	bne.n	8001998 <HAL_RCC_OscConfig+0x1a0>
 8001958:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	23c0      	movs	r3, #192	; 0xc0
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	401a      	ands	r2, r3
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	429a      	cmp	r2, r3
 8001968:	d116      	bne.n	8001998 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	4b71      	ldr	r3, [pc, #452]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2202      	movs	r2, #2
 8001970:	4013      	ands	r3, r2
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x188>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e2bb      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b6b      	ldr	r3, [pc, #428]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	22f8      	movs	r2, #248	; 0xf8
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00da      	lsls	r2, r3, #3
 8001990:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e041      	b.n	8001a1c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d024      	beq.n	80019ea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fe66 	bl	800167c <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fe61 	bl	800167c <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e297      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f1      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	22f8      	movs	r2, #248	; 0xf8
 80019d8:	4393      	bics	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	00da      	lsls	r2, r3, #3
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e018      	b.n	8001a1c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b51      	ldr	r3, [pc, #324]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	438a      	bics	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fe41 	bl	800167c <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a00:	f7ff fe3c 	bl	800167c <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e272      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2202      	movs	r2, #2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d1f1      	bne.n	8001a00 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	4013      	ands	r3, r2
 8001a24:	d036      	beq.n	8001a94 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d019      	beq.n	8001a62 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fe1f 	bl	800167c <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff fe1a 	bl	800167c <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e250      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d0f1      	beq.n	8001a44 <HAL_RCC_OscConfig+0x24c>
 8001a60:	e018      	b.n	8001a94 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	438a      	bics	r2, r1
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fe05 	bl	800167c <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff fe00 	bl	800167c <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e236      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d1f1      	bne.n	8001a78 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2204      	movs	r2, #4
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d100      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2a8>
 8001a9e:	e0b5      	b.n	8001c0c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa0:	201f      	movs	r0, #31
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	055b      	lsls	r3, r3, #21
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d110      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	0549      	lsls	r1, r1, #21
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	61da      	str	r2, [r3, #28]
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	055b      	lsls	r3, r3, #21
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ad0:	183b      	adds	r3, r7, r0
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_OscConfig+0x344>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d11a      	bne.n	8001b18 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_RCC_OscConfig+0x344>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_RCC_OscConfig+0x344>)
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0049      	lsls	r1, r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af0:	f7ff fdc4 	bl	800167c <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afa:	f7ff fdbf 	bl	800167c <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1f5      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_OscConfig+0x344>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10f      	bne.n	8001b40 <HAL_RCC_OscConfig+0x348>
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	621a      	str	r2, [r3, #32]
 8001b2c:	e036      	b.n	8001b9c <HAL_RCC_OscConfig+0x3a4>
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	fffeffff 	.word	0xfffeffff
 8001b38:	fffbffff 	.word	0xfffbffff
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x36a>
 8001b48:	4bca      	ldr	r3, [pc, #808]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	4bc9      	ldr	r3, [pc, #804]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	438a      	bics	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
 8001b54:	4bc7      	ldr	r3, [pc, #796]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	4bc6      	ldr	r3, [pc, #792]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	621a      	str	r2, [r3, #32]
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x3a4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x38c>
 8001b6a:	4bc2      	ldr	r3, [pc, #776]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	6a1a      	ldr	r2, [r3, #32]
 8001b6e:	4bc1      	ldr	r3, [pc, #772]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b70:	2104      	movs	r1, #4
 8001b72:	430a      	orrs	r2, r1
 8001b74:	621a      	str	r2, [r3, #32]
 8001b76:	4bbf      	ldr	r3, [pc, #764]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	4bbe      	ldr	r3, [pc, #760]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	621a      	str	r2, [r3, #32]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x3a4>
 8001b84:	4bbb      	ldr	r3, [pc, #748]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	4bba      	ldr	r3, [pc, #744]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	621a      	str	r2, [r3, #32]
 8001b90:	4bb8      	ldr	r3, [pc, #736]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	4bb7      	ldr	r3, [pc, #732]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001b96:	2104      	movs	r1, #4
 8001b98:	438a      	bics	r2, r1
 8001b9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d014      	beq.n	8001bce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fd6a 	bl	800167c <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fd65 	bl	800167c <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	4aaf      	ldr	r2, [pc, #700]	; (8001e78 <HAL_RCC_OscConfig+0x680>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e19a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	4bac      	ldr	r3, [pc, #688]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x3b6>
 8001bcc:	e013      	b.n	8001bf6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fd55 	bl	800167c <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	e009      	b.n	8001bec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fd50 	bl	800167c <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4aa5      	ldr	r2, [pc, #660]	; (8001e78 <HAL_RCC_OscConfig+0x680>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e185      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	4ba1      	ldr	r3, [pc, #644]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bf6:	231f      	movs	r3, #31
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b9c      	ldr	r3, [pc, #624]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	4b9b      	ldr	r3, [pc, #620]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c06:	499d      	ldr	r1, [pc, #628]	; (8001e7c <HAL_RCC_OscConfig+0x684>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2210      	movs	r2, #16
 8001c12:	4013      	ands	r3, r2
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d12a      	bne.n	8001c74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c1e:	4b95      	ldr	r3, [pc, #596]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c22:	4b94      	ldr	r3, [pc, #592]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c24:	2104      	movs	r1, #4
 8001c26:	430a      	orrs	r2, r1
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c2a:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2e:	4b91      	ldr	r3, [pc, #580]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fd21 	bl	800167c <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c40:	f7ff fd1c 	bl	800167c <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e152      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0f1      	beq.n	8001c40 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c5c:	4b85      	ldr	r3, [pc, #532]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c60:	22f8      	movs	r2, #248	; 0xf8
 8001c62:	4393      	bics	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	00da      	lsls	r2, r3, #3
 8001c6c:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	e034      	b.n	8001cde <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	3305      	adds	r3, #5
 8001c7a:	d111      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c7c:	4b7d      	ldr	r3, [pc, #500]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c80:	4b7c      	ldr	r3, [pc, #496]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c82:	2104      	movs	r1, #4
 8001c84:	438a      	bics	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c88:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	22f8      	movs	r2, #248	; 0xf8
 8001c8e:	4393      	bics	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	00da      	lsls	r2, r3, #3
 8001c98:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9e:	e01e      	b.n	8001cde <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ca0:	4b74      	ldr	r3, [pc, #464]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca4:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cac:	4b71      	ldr	r3, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb0:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fce0 	bl	800167c <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cc2:	f7ff fcdb 	bl	800167c <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e111      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cd4:	4b67      	ldr	r3, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	2202      	movs	r2, #2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1f1      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d05c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ce8:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	220c      	movs	r2, #12
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b0c      	cmp	r3, #12
 8001cf2:	d00e      	beq.n	8001d12 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cf4:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	220c      	movs	r2, #12
 8001cfa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d114      	bne.n	8001d2a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d00:	4b5c      	ldr	r3, [pc, #368]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	23c0      	movs	r3, #192	; 0xc0
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	401a      	ands	r2, r3
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	025b      	lsls	r3, r3, #9
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d12:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	025b      	lsls	r3, r3, #9
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d040      	beq.n	8001da0 <HAL_RCC_OscConfig+0x5a8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d03c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0e6      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01b      	beq.n	8001d6a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d32:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d36:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0249      	lsls	r1, r1, #9
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fc9c 	bl	800167c <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d4a:	f7ff fc97 	bl	800167c <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0cd      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d5c:	4b45      	ldr	r3, [pc, #276]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	025b      	lsls	r3, r3, #9
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x552>
 8001d68:	e01b      	b.n	8001da2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d6a:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001d70:	4943      	ldr	r1, [pc, #268]	; (8001e80 <HAL_RCC_OscConfig+0x688>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fc81 	bl	800167c <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d80:	f7ff fc7c 	bl	800167c <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0b2      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d92:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	025b      	lsls	r3, r3, #9
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x588>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001da0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d100      	bne.n	8001dac <HAL_RCC_OscConfig+0x5b4>
 8001daa:	e0a4      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	220c      	movs	r2, #12
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d100      	bne.n	8001dba <HAL_RCC_OscConfig+0x5c2>
 8001db8:	e078      	b.n	8001eac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d14c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001dc8:	492e      	ldr	r1, [pc, #184]	; (8001e84 <HAL_RCC_OscConfig+0x68c>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fc55 	bl	800167c <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff fc50 	bl	800167c <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e086      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	049b      	lsls	r3, r3, #18
 8001df2:	4013      	ands	r3, r2
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	4393      	bics	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_RCC_OscConfig+0x690>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	0449      	lsls	r1, r1, #17
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fc23 	bl	800167c <HAL_GetTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff fc1e 	bl	800167c <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e054      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	049b      	lsls	r3, r3, #18
 8001e56:	4013      	ands	r3, r2
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x644>
 8001e5a:	e04c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <HAL_RCC_OscConfig+0x67c>)
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <HAL_RCC_OscConfig+0x68c>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fc08 	bl	800167c <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0x6a6>
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	40021000 	.word	0x40021000
 8001e78:	00001388 	.word	0x00001388
 8001e7c:	efffffff 	.word	0xefffffff
 8001e80:	fffeffff 	.word	0xfffeffff
 8001e84:	feffffff 	.word	0xfeffffff
 8001e88:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff fbf6 	bl	800167c <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e02c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_RCC_OscConfig+0x708>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	049b      	lsls	r3, r3, #18
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x694>
 8001eaa:	e024      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e01f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_RCC_OscConfig+0x708>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x708>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	23c0      	movs	r3, #192	; 0xc0
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	401a      	ands	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10e      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	401a      	ands	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	23f0      	movs	r3, #240	; 0xf0
 8001ee6:	039b      	lsls	r3, r3, #14
 8001ee8:	401a      	ands	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b008      	add	sp, #32
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0bf      	b.n	8002098 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <HAL_RCC_ClockConfig+0x19c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4013      	ands	r3, r2
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d911      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b5e      	ldr	r3, [pc, #376]	; (80020a0 <HAL_RCC_ClockConfig+0x19c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4393      	bics	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <HAL_RCC_ClockConfig+0x19c>)
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_ClockConfig+0x19c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0a6      	b.n	8002098 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4013      	ands	r3, r2
 8001f52:	d015      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d006      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f64:	21e0      	movs	r1, #224	; 0xe0
 8001f66:	00c9      	lsls	r1, r1, #3
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	22f0      	movs	r2, #240	; 0xf0
 8001f72:	4393      	bics	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d04c      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d120      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e07a      	b.n	8002098 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	049b      	lsls	r3, r3, #18
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d114      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06e      	b.n	8002098 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	025b      	lsls	r3, r3, #9
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e062      	b.n	8002098 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e05b      	b.n	8002098 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe0:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff fb42 	bl	800167c <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffc:	e009      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffe:	f7ff fb3d 	bl	800167c <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <HAL_RCC_ClockConfig+0x1a4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e042      	b.n	8002098 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	220c      	movs	r2, #12
 8002018:	401a      	ands	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1ec      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_ClockConfig+0x19c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d211      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_ClockConfig+0x19c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2201      	movs	r2, #1
 8002038:	4393      	bics	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_RCC_ClockConfig+0x19c>)
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_RCC_ClockConfig+0x19c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	4013      	ands	r3, r2
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e020      	b.n	8002098 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2204      	movs	r2, #4
 800205c:	4013      	ands	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_RCC_ClockConfig+0x1a8>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002074:	f000 f820 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002078:	0001      	movs	r1, r0
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_ClockConfig+0x1a0>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	220f      	movs	r2, #15
 8002082:	4013      	ands	r3, r2
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x1ac>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	000a      	movs	r2, r1
 800208a:	40da      	lsrs	r2, r3
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1b0>)
 800208e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002090:	2003      	movs	r0, #3
 8002092:	f7ff faad 	bl	80015f0 <HAL_InitTick>
  
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	00001388 	.word	0x00001388
 80020ac:	fffff8ff 	.word	0xfffff8ff
 80020b0:	08004304 	.word	0x08004304
 80020b4:	2000007c 	.word	0x2000007c

080020b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b08f      	sub	sp, #60	; 0x3c
 80020bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020be:	2314      	movs	r3, #20
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	4a38      	ldr	r2, [pc, #224]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xec>)
 80020c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020c6:	c313      	stmia	r3!, {r0, r1, r4}
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	4a36      	ldr	r2, [pc, #216]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80020d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020d2:	c313      	stmia	r3!, {r0, r1, r4}
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_RCC_GetSysClockFreq+0xf4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	220c      	movs	r2, #12
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d047      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0xd4>
 80020fc:	d849      	bhi.n	8002192 <HAL_RCC_GetSysClockFreq+0xda>
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d002      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x50>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x56>
 8002106:	e044      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800210c:	e044      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	220f      	movs	r2, #15
 8002114:	4013      	ands	r3, r2
 8002116:	2214      	movs	r2, #20
 8002118:	18ba      	adds	r2, r7, r2
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	220f      	movs	r2, #15
 8002124:	4013      	ands	r3, r2
 8002126:	1d3a      	adds	r2, r7, #4
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800212c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800212e:	23c0      	movs	r3, #192	; 0xc0
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	401a      	ands	r2, r3
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	429a      	cmp	r2, r3
 800213a:	d109      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800213c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213e:	481c      	ldr	r0, [pc, #112]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002140:	f7fd ffea 	bl	8000118 <__udivsi3>
 8002144:	0003      	movs	r3, r0
 8002146:	001a      	movs	r2, r3
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	4353      	muls	r3, r2
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
 800214e:	e01a      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002152:	23c0      	movs	r3, #192	; 0xc0
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	401a      	ands	r2, r3
 8002158:	23c0      	movs	r3, #192	; 0xc0
 800215a:	025b      	lsls	r3, r3, #9
 800215c:	429a      	cmp	r2, r3
 800215e:	d109      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002162:	4814      	ldr	r0, [pc, #80]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002164:	f7fd ffd8 	bl	8000118 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	001a      	movs	r2, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	4353      	muls	r3, r2
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
 8002172:	e008      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002176:	480e      	ldr	r0, [pc, #56]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002178:	f7fd ffce 	bl	8000118 <__udivsi3>
 800217c:	0003      	movs	r3, r0
 800217e:	001a      	movs	r2, r3
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	4353      	muls	r3, r2
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800218a:	e005      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800218e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002190:	e002      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002196:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b00f      	add	sp, #60	; 0x3c
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	08003804 	.word	0x08003804
 80021a8:	08003814 	.word	0x08003814
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	02dc6c00 	.word	0x02dc6c00

080021b8 <__errno>:
 80021b8:	4b01      	ldr	r3, [pc, #4]	; (80021c0 <__errno+0x8>)
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	4770      	bx	lr
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	20000088 	.word	0x20000088

080021c4 <__libc_init_array>:
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	2600      	movs	r6, #0
 80021c8:	4d0c      	ldr	r5, [pc, #48]	; (80021fc <__libc_init_array+0x38>)
 80021ca:	4c0d      	ldr	r4, [pc, #52]	; (8002200 <__libc_init_array+0x3c>)
 80021cc:	1b64      	subs	r4, r4, r5
 80021ce:	10a4      	asrs	r4, r4, #2
 80021d0:	42a6      	cmp	r6, r4
 80021d2:	d109      	bne.n	80021e8 <__libc_init_array+0x24>
 80021d4:	2600      	movs	r6, #0
 80021d6:	f001 fab1 	bl	800373c <_init>
 80021da:	4d0a      	ldr	r5, [pc, #40]	; (8002204 <__libc_init_array+0x40>)
 80021dc:	4c0a      	ldr	r4, [pc, #40]	; (8002208 <__libc_init_array+0x44>)
 80021de:	1b64      	subs	r4, r4, r5
 80021e0:	10a4      	asrs	r4, r4, #2
 80021e2:	42a6      	cmp	r6, r4
 80021e4:	d105      	bne.n	80021f2 <__libc_init_array+0x2e>
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	00b3      	lsls	r3, r6, #2
 80021ea:	58eb      	ldr	r3, [r5, r3]
 80021ec:	4798      	blx	r3
 80021ee:	3601      	adds	r6, #1
 80021f0:	e7ee      	b.n	80021d0 <__libc_init_array+0xc>
 80021f2:	00b3      	lsls	r3, r6, #2
 80021f4:	58eb      	ldr	r3, [r5, r3]
 80021f6:	4798      	blx	r3
 80021f8:	3601      	adds	r6, #1
 80021fa:	e7f2      	b.n	80021e2 <__libc_init_array+0x1e>
 80021fc:	0800445c 	.word	0x0800445c
 8002200:	0800445c 	.word	0x0800445c
 8002204:	0800445c 	.word	0x0800445c
 8002208:	08004460 	.word	0x08004460

0800220c <memcpy>:
 800220c:	2300      	movs	r3, #0
 800220e:	b510      	push	{r4, lr}
 8002210:	429a      	cmp	r2, r3
 8002212:	d100      	bne.n	8002216 <memcpy+0xa>
 8002214:	bd10      	pop	{r4, pc}
 8002216:	5ccc      	ldrb	r4, [r1, r3]
 8002218:	54c4      	strb	r4, [r0, r3]
 800221a:	3301      	adds	r3, #1
 800221c:	e7f8      	b.n	8002210 <memcpy+0x4>

0800221e <memmove>:
 800221e:	b510      	push	{r4, lr}
 8002220:	4288      	cmp	r0, r1
 8002222:	d902      	bls.n	800222a <memmove+0xc>
 8002224:	188b      	adds	r3, r1, r2
 8002226:	4298      	cmp	r0, r3
 8002228:	d303      	bcc.n	8002232 <memmove+0x14>
 800222a:	2300      	movs	r3, #0
 800222c:	e007      	b.n	800223e <memmove+0x20>
 800222e:	5c8b      	ldrb	r3, [r1, r2]
 8002230:	5483      	strb	r3, [r0, r2]
 8002232:	3a01      	subs	r2, #1
 8002234:	d2fb      	bcs.n	800222e <memmove+0x10>
 8002236:	bd10      	pop	{r4, pc}
 8002238:	5ccc      	ldrb	r4, [r1, r3]
 800223a:	54c4      	strb	r4, [r0, r3]
 800223c:	3301      	adds	r3, #1
 800223e:	429a      	cmp	r2, r3
 8002240:	d1fa      	bne.n	8002238 <memmove+0x1a>
 8002242:	e7f8      	b.n	8002236 <memmove+0x18>

08002244 <memset>:
 8002244:	0003      	movs	r3, r0
 8002246:	1882      	adds	r2, r0, r2
 8002248:	4293      	cmp	r3, r2
 800224a:	d100      	bne.n	800224e <memset+0xa>
 800224c:	4770      	bx	lr
 800224e:	7019      	strb	r1, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	e7f9      	b.n	8002248 <memset+0x4>

08002254 <random>:
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <random+0x5c>)
 8002256:	b510      	push	{r4, lr}
 8002258:	681c      	ldr	r4, [r3, #0]
 800225a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800225c:	2b00      	cmp	r3, #0
 800225e:	d116      	bne.n	800228e <random+0x3a>
 8002260:	2018      	movs	r0, #24
 8002262:	f000 f8b7 	bl	80023d4 <malloc>
 8002266:	1e02      	subs	r2, r0, #0
 8002268:	63a0      	str	r0, [r4, #56]	; 0x38
 800226a:	d104      	bne.n	8002276 <random+0x22>
 800226c:	214c      	movs	r1, #76	; 0x4c
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <random+0x60>)
 8002270:	4811      	ldr	r0, [pc, #68]	; (80022b8 <random+0x64>)
 8002272:	f000 f881 	bl	8002378 <__assert_func>
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <random+0x68>)
 8002278:	2100      	movs	r1, #0
 800227a:	6003      	str	r3, [r0, #0]
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <random+0x6c>)
 800227e:	6043      	str	r3, [r0, #4]
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <random+0x70>)
 8002282:	6083      	str	r3, [r0, #8]
 8002284:	230b      	movs	r3, #11
 8002286:	8183      	strh	r3, [r0, #12]
 8002288:	2001      	movs	r0, #1
 800228a:	6110      	str	r0, [r2, #16]
 800228c:	6151      	str	r1, [r2, #20]
 800228e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <random+0x74>)
 8002292:	6920      	ldr	r0, [r4, #16]
 8002294:	6961      	ldr	r1, [r4, #20]
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <random+0x78>)
 8002298:	f7fd ffca 	bl	8000230 <__aeabi_lmul>
 800229c:	2201      	movs	r2, #1
 800229e:	2300      	movs	r3, #0
 80022a0:	1880      	adds	r0, r0, r2
 80022a2:	4159      	adcs	r1, r3
 80022a4:	6120      	str	r0, [r4, #16]
 80022a6:	6161      	str	r1, [r4, #20]
 80022a8:	0048      	lsls	r0, r1, #1
 80022aa:	0840      	lsrs	r0, r0, #1
 80022ac:	bd10      	pop	{r4, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	20000088 	.word	0x20000088
 80022b4:	08004318 	.word	0x08004318
 80022b8:	0800432f 	.word	0x0800432f
 80022bc:	abcd330e 	.word	0xabcd330e
 80022c0:	e66d1234 	.word	0xe66d1234
 80022c4:	0005deec 	.word	0x0005deec
 80022c8:	4c957f2d 	.word	0x4c957f2d
 80022cc:	5851f42d 	.word	0x5851f42d

080022d0 <sniprintf>:
 80022d0:	b40c      	push	{r2, r3}
 80022d2:	b530      	push	{r4, r5, lr}
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <sniprintf+0x64>)
 80022d6:	000c      	movs	r4, r1
 80022d8:	681d      	ldr	r5, [r3, #0]
 80022da:	b09d      	sub	sp, #116	; 0x74
 80022dc:	2900      	cmp	r1, #0
 80022de:	da08      	bge.n	80022f2 <sniprintf+0x22>
 80022e0:	238b      	movs	r3, #139	; 0x8b
 80022e2:	2001      	movs	r0, #1
 80022e4:	602b      	str	r3, [r5, #0]
 80022e6:	4240      	negs	r0, r0
 80022e8:	b01d      	add	sp, #116	; 0x74
 80022ea:	bc30      	pop	{r4, r5}
 80022ec:	bc08      	pop	{r3}
 80022ee:	b002      	add	sp, #8
 80022f0:	4718      	bx	r3
 80022f2:	2382      	movs	r3, #130	; 0x82
 80022f4:	466a      	mov	r2, sp
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	8293      	strh	r3, [r2, #20]
 80022fa:	2300      	movs	r3, #0
 80022fc:	9002      	str	r0, [sp, #8]
 80022fe:	9006      	str	r0, [sp, #24]
 8002300:	4299      	cmp	r1, r3
 8002302:	d000      	beq.n	8002306 <sniprintf+0x36>
 8002304:	1e4b      	subs	r3, r1, #1
 8002306:	9304      	str	r3, [sp, #16]
 8002308:	9307      	str	r3, [sp, #28]
 800230a:	2301      	movs	r3, #1
 800230c:	466a      	mov	r2, sp
 800230e:	425b      	negs	r3, r3
 8002310:	82d3      	strh	r3, [r2, #22]
 8002312:	0028      	movs	r0, r5
 8002314:	ab21      	add	r3, sp, #132	; 0x84
 8002316:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002318:	a902      	add	r1, sp, #8
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	f000 f9a8 	bl	8002670 <_svfiprintf_r>
 8002320:	1c43      	adds	r3, r0, #1
 8002322:	da01      	bge.n	8002328 <sniprintf+0x58>
 8002324:	238b      	movs	r3, #139	; 0x8b
 8002326:	602b      	str	r3, [r5, #0]
 8002328:	2c00      	cmp	r4, #0
 800232a:	d0dd      	beq.n	80022e8 <sniprintf+0x18>
 800232c:	2300      	movs	r3, #0
 800232e:	9a02      	ldr	r2, [sp, #8]
 8002330:	7013      	strb	r3, [r2, #0]
 8002332:	e7d9      	b.n	80022e8 <sniprintf+0x18>
 8002334:	20000088 	.word	0x20000088

08002338 <siprintf>:
 8002338:	b40e      	push	{r1, r2, r3}
 800233a:	b500      	push	{lr}
 800233c:	490b      	ldr	r1, [pc, #44]	; (800236c <siprintf+0x34>)
 800233e:	b09c      	sub	sp, #112	; 0x70
 8002340:	ab1d      	add	r3, sp, #116	; 0x74
 8002342:	9002      	str	r0, [sp, #8]
 8002344:	9006      	str	r0, [sp, #24]
 8002346:	9107      	str	r1, [sp, #28]
 8002348:	9104      	str	r1, [sp, #16]
 800234a:	4809      	ldr	r0, [pc, #36]	; (8002370 <siprintf+0x38>)
 800234c:	4909      	ldr	r1, [pc, #36]	; (8002374 <siprintf+0x3c>)
 800234e:	cb04      	ldmia	r3!, {r2}
 8002350:	9105      	str	r1, [sp, #20]
 8002352:	6800      	ldr	r0, [r0, #0]
 8002354:	a902      	add	r1, sp, #8
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	f000 f98a 	bl	8002670 <_svfiprintf_r>
 800235c:	2300      	movs	r3, #0
 800235e:	9a02      	ldr	r2, [sp, #8]
 8002360:	7013      	strb	r3, [r2, #0]
 8002362:	b01c      	add	sp, #112	; 0x70
 8002364:	bc08      	pop	{r3}
 8002366:	b003      	add	sp, #12
 8002368:	4718      	bx	r3
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	7fffffff 	.word	0x7fffffff
 8002370:	20000088 	.word	0x20000088
 8002374:	ffff0208 	.word	0xffff0208

08002378 <__assert_func>:
 8002378:	b530      	push	{r4, r5, lr}
 800237a:	0014      	movs	r4, r2
 800237c:	001a      	movs	r2, r3
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <__assert_func+0x2c>)
 8002380:	0005      	movs	r5, r0
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b085      	sub	sp, #20
 8002386:	68d8      	ldr	r0, [r3, #12]
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <__assert_func+0x30>)
 800238a:	2c00      	cmp	r4, #0
 800238c:	d101      	bne.n	8002392 <__assert_func+0x1a>
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <__assert_func+0x34>)
 8002390:	001c      	movs	r4, r3
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	9100      	str	r1, [sp, #0]
 8002396:	002b      	movs	r3, r5
 8002398:	4905      	ldr	r1, [pc, #20]	; (80023b0 <__assert_func+0x38>)
 800239a:	9402      	str	r4, [sp, #8]
 800239c:	f000 f80a 	bl	80023b4 <fiprintf>
 80023a0:	f000 fe2a 	bl	8002ff8 <abort>
 80023a4:	20000088 	.word	0x20000088
 80023a8:	0800438c 	.word	0x0800438c
 80023ac:	080043c7 	.word	0x080043c7
 80023b0:	08004399 	.word	0x08004399

080023b4 <fiprintf>:
 80023b4:	b40e      	push	{r1, r2, r3}
 80023b6:	b503      	push	{r0, r1, lr}
 80023b8:	0001      	movs	r1, r0
 80023ba:	ab03      	add	r3, sp, #12
 80023bc:	4804      	ldr	r0, [pc, #16]	; (80023d0 <fiprintf+0x1c>)
 80023be:	cb04      	ldmia	r3!, {r2}
 80023c0:	6800      	ldr	r0, [r0, #0]
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	f000 fa7c 	bl	80028c0 <_vfiprintf_r>
 80023c8:	b002      	add	sp, #8
 80023ca:	bc08      	pop	{r3}
 80023cc:	b003      	add	sp, #12
 80023ce:	4718      	bx	r3
 80023d0:	20000088 	.word	0x20000088

080023d4 <malloc>:
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <malloc+0x10>)
 80023d8:	0001      	movs	r1, r0
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	f000 f870 	bl	80024c0 <_malloc_r>
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	20000088 	.word	0x20000088

080023e8 <_free_r>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	0005      	movs	r5, r0
 80023ec:	2900      	cmp	r1, #0
 80023ee:	d010      	beq.n	8002412 <_free_r+0x2a>
 80023f0:	1f0c      	subs	r4, r1, #4
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da00      	bge.n	80023fa <_free_r+0x12>
 80023f8:	18e4      	adds	r4, r4, r3
 80023fa:	0028      	movs	r0, r5
 80023fc:	f001 f84e 	bl	800349c <__malloc_lock>
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <_free_r+0x90>)
 8002402:	6813      	ldr	r3, [r2, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <_free_r+0x2c>
 8002408:	6063      	str	r3, [r4, #4]
 800240a:	6014      	str	r4, [r2, #0]
 800240c:	0028      	movs	r0, r5
 800240e:	f001 f84d 	bl	80034ac <__malloc_unlock>
 8002412:	bd70      	pop	{r4, r5, r6, pc}
 8002414:	42a3      	cmp	r3, r4
 8002416:	d908      	bls.n	800242a <_free_r+0x42>
 8002418:	6821      	ldr	r1, [r4, #0]
 800241a:	1860      	adds	r0, r4, r1
 800241c:	4283      	cmp	r3, r0
 800241e:	d1f3      	bne.n	8002408 <_free_r+0x20>
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	1841      	adds	r1, r0, r1
 8002426:	6021      	str	r1, [r4, #0]
 8002428:	e7ee      	b.n	8002408 <_free_r+0x20>
 800242a:	001a      	movs	r2, r3
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <_free_r+0x4e>
 8002432:	42a3      	cmp	r3, r4
 8002434:	d9f9      	bls.n	800242a <_free_r+0x42>
 8002436:	6811      	ldr	r1, [r2, #0]
 8002438:	1850      	adds	r0, r2, r1
 800243a:	42a0      	cmp	r0, r4
 800243c:	d10b      	bne.n	8002456 <_free_r+0x6e>
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	1809      	adds	r1, r1, r0
 8002442:	1850      	adds	r0, r2, r1
 8002444:	6011      	str	r1, [r2, #0]
 8002446:	4283      	cmp	r3, r0
 8002448:	d1e0      	bne.n	800240c <_free_r+0x24>
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	1841      	adds	r1, r0, r1
 8002450:	6011      	str	r1, [r2, #0]
 8002452:	6053      	str	r3, [r2, #4]
 8002454:	e7da      	b.n	800240c <_free_r+0x24>
 8002456:	42a0      	cmp	r0, r4
 8002458:	d902      	bls.n	8002460 <_free_r+0x78>
 800245a:	230c      	movs	r3, #12
 800245c:	602b      	str	r3, [r5, #0]
 800245e:	e7d5      	b.n	800240c <_free_r+0x24>
 8002460:	6821      	ldr	r1, [r4, #0]
 8002462:	1860      	adds	r0, r4, r1
 8002464:	4283      	cmp	r3, r0
 8002466:	d103      	bne.n	8002470 <_free_r+0x88>
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	1841      	adds	r1, r0, r1
 800246e:	6021      	str	r1, [r4, #0]
 8002470:	6063      	str	r3, [r4, #4]
 8002472:	6054      	str	r4, [r2, #4]
 8002474:	e7ca      	b.n	800240c <_free_r+0x24>
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	20000138 	.word	0x20000138

0800247c <sbrk_aligned>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	4e0f      	ldr	r6, [pc, #60]	; (80024bc <sbrk_aligned+0x40>)
 8002480:	000d      	movs	r5, r1
 8002482:	6831      	ldr	r1, [r6, #0]
 8002484:	0004      	movs	r4, r0
 8002486:	2900      	cmp	r1, #0
 8002488:	d102      	bne.n	8002490 <sbrk_aligned+0x14>
 800248a:	f000 fcd5 	bl	8002e38 <_sbrk_r>
 800248e:	6030      	str	r0, [r6, #0]
 8002490:	0029      	movs	r1, r5
 8002492:	0020      	movs	r0, r4
 8002494:	f000 fcd0 	bl	8002e38 <_sbrk_r>
 8002498:	1c43      	adds	r3, r0, #1
 800249a:	d00a      	beq.n	80024b2 <sbrk_aligned+0x36>
 800249c:	2303      	movs	r3, #3
 800249e:	1cc5      	adds	r5, r0, #3
 80024a0:	439d      	bics	r5, r3
 80024a2:	42a8      	cmp	r0, r5
 80024a4:	d007      	beq.n	80024b6 <sbrk_aligned+0x3a>
 80024a6:	1a29      	subs	r1, r5, r0
 80024a8:	0020      	movs	r0, r4
 80024aa:	f000 fcc5 	bl	8002e38 <_sbrk_r>
 80024ae:	1c43      	adds	r3, r0, #1
 80024b0:	d101      	bne.n	80024b6 <sbrk_aligned+0x3a>
 80024b2:	2501      	movs	r5, #1
 80024b4:	426d      	negs	r5, r5
 80024b6:	0028      	movs	r0, r5
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	2000013c 	.word	0x2000013c

080024c0 <_malloc_r>:
 80024c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024c2:	2203      	movs	r2, #3
 80024c4:	1ccb      	adds	r3, r1, #3
 80024c6:	4393      	bics	r3, r2
 80024c8:	3308      	adds	r3, #8
 80024ca:	0006      	movs	r6, r0
 80024cc:	001f      	movs	r7, r3
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d232      	bcs.n	8002538 <_malloc_r+0x78>
 80024d2:	270c      	movs	r7, #12
 80024d4:	42b9      	cmp	r1, r7
 80024d6:	d831      	bhi.n	800253c <_malloc_r+0x7c>
 80024d8:	0030      	movs	r0, r6
 80024da:	f000 ffdf 	bl	800349c <__malloc_lock>
 80024de:	4d32      	ldr	r5, [pc, #200]	; (80025a8 <_malloc_r+0xe8>)
 80024e0:	682b      	ldr	r3, [r5, #0]
 80024e2:	001c      	movs	r4, r3
 80024e4:	2c00      	cmp	r4, #0
 80024e6:	d12e      	bne.n	8002546 <_malloc_r+0x86>
 80024e8:	0039      	movs	r1, r7
 80024ea:	0030      	movs	r0, r6
 80024ec:	f7ff ffc6 	bl	800247c <sbrk_aligned>
 80024f0:	0004      	movs	r4, r0
 80024f2:	1c43      	adds	r3, r0, #1
 80024f4:	d11e      	bne.n	8002534 <_malloc_r+0x74>
 80024f6:	682c      	ldr	r4, [r5, #0]
 80024f8:	0025      	movs	r5, r4
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	d14a      	bne.n	8002594 <_malloc_r+0xd4>
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	0029      	movs	r1, r5
 8002502:	18e3      	adds	r3, r4, r3
 8002504:	0030      	movs	r0, r6
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	f000 fc96 	bl	8002e38 <_sbrk_r>
 800250c:	9b01      	ldr	r3, [sp, #4]
 800250e:	4283      	cmp	r3, r0
 8002510:	d143      	bne.n	800259a <_malloc_r+0xda>
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	3703      	adds	r7, #3
 8002516:	1aff      	subs	r7, r7, r3
 8002518:	2303      	movs	r3, #3
 800251a:	439f      	bics	r7, r3
 800251c:	3708      	adds	r7, #8
 800251e:	2f0c      	cmp	r7, #12
 8002520:	d200      	bcs.n	8002524 <_malloc_r+0x64>
 8002522:	270c      	movs	r7, #12
 8002524:	0039      	movs	r1, r7
 8002526:	0030      	movs	r0, r6
 8002528:	f7ff ffa8 	bl	800247c <sbrk_aligned>
 800252c:	1c43      	adds	r3, r0, #1
 800252e:	d034      	beq.n	800259a <_malloc_r+0xda>
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	19df      	adds	r7, r3, r7
 8002534:	6027      	str	r7, [r4, #0]
 8002536:	e013      	b.n	8002560 <_malloc_r+0xa0>
 8002538:	2b00      	cmp	r3, #0
 800253a:	dacb      	bge.n	80024d4 <_malloc_r+0x14>
 800253c:	230c      	movs	r3, #12
 800253e:	2500      	movs	r5, #0
 8002540:	6033      	str	r3, [r6, #0]
 8002542:	0028      	movs	r0, r5
 8002544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002546:	6822      	ldr	r2, [r4, #0]
 8002548:	1bd1      	subs	r1, r2, r7
 800254a:	d420      	bmi.n	800258e <_malloc_r+0xce>
 800254c:	290b      	cmp	r1, #11
 800254e:	d917      	bls.n	8002580 <_malloc_r+0xc0>
 8002550:	19e2      	adds	r2, r4, r7
 8002552:	6027      	str	r7, [r4, #0]
 8002554:	42a3      	cmp	r3, r4
 8002556:	d111      	bne.n	800257c <_malloc_r+0xbc>
 8002558:	602a      	str	r2, [r5, #0]
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	6011      	str	r1, [r2, #0]
 800255e:	6053      	str	r3, [r2, #4]
 8002560:	0030      	movs	r0, r6
 8002562:	0025      	movs	r5, r4
 8002564:	f000 ffa2 	bl	80034ac <__malloc_unlock>
 8002568:	2207      	movs	r2, #7
 800256a:	350b      	adds	r5, #11
 800256c:	1d23      	adds	r3, r4, #4
 800256e:	4395      	bics	r5, r2
 8002570:	1aea      	subs	r2, r5, r3
 8002572:	429d      	cmp	r5, r3
 8002574:	d0e5      	beq.n	8002542 <_malloc_r+0x82>
 8002576:	1b5b      	subs	r3, r3, r5
 8002578:	50a3      	str	r3, [r4, r2]
 800257a:	e7e2      	b.n	8002542 <_malloc_r+0x82>
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	e7ec      	b.n	800255a <_malloc_r+0x9a>
 8002580:	6862      	ldr	r2, [r4, #4]
 8002582:	42a3      	cmp	r3, r4
 8002584:	d101      	bne.n	800258a <_malloc_r+0xca>
 8002586:	602a      	str	r2, [r5, #0]
 8002588:	e7ea      	b.n	8002560 <_malloc_r+0xa0>
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	e7e8      	b.n	8002560 <_malloc_r+0xa0>
 800258e:	0023      	movs	r3, r4
 8002590:	6864      	ldr	r4, [r4, #4]
 8002592:	e7a7      	b.n	80024e4 <_malloc_r+0x24>
 8002594:	002c      	movs	r4, r5
 8002596:	686d      	ldr	r5, [r5, #4]
 8002598:	e7af      	b.n	80024fa <_malloc_r+0x3a>
 800259a:	230c      	movs	r3, #12
 800259c:	0030      	movs	r0, r6
 800259e:	6033      	str	r3, [r6, #0]
 80025a0:	f000 ff84 	bl	80034ac <__malloc_unlock>
 80025a4:	e7cd      	b.n	8002542 <_malloc_r+0x82>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	20000138 	.word	0x20000138

080025ac <__ssputs_r>:
 80025ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ae:	688e      	ldr	r6, [r1, #8]
 80025b0:	b085      	sub	sp, #20
 80025b2:	0007      	movs	r7, r0
 80025b4:	000c      	movs	r4, r1
 80025b6:	9203      	str	r2, [sp, #12]
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	429e      	cmp	r6, r3
 80025bc:	d83c      	bhi.n	8002638 <__ssputs_r+0x8c>
 80025be:	2390      	movs	r3, #144	; 0x90
 80025c0:	898a      	ldrh	r2, [r1, #12]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	421a      	tst	r2, r3
 80025c6:	d034      	beq.n	8002632 <__ssputs_r+0x86>
 80025c8:	6909      	ldr	r1, [r1, #16]
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	6960      	ldr	r0, [r4, #20]
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	2303      	movs	r3, #3
 80025d4:	4343      	muls	r3, r0
 80025d6:	0fdd      	lsrs	r5, r3, #31
 80025d8:	18ed      	adds	r5, r5, r3
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	9802      	ldr	r0, [sp, #8]
 80025de:	3301      	adds	r3, #1
 80025e0:	181b      	adds	r3, r3, r0
 80025e2:	106d      	asrs	r5, r5, #1
 80025e4:	42ab      	cmp	r3, r5
 80025e6:	d900      	bls.n	80025ea <__ssputs_r+0x3e>
 80025e8:	001d      	movs	r5, r3
 80025ea:	0553      	lsls	r3, r2, #21
 80025ec:	d532      	bpl.n	8002654 <__ssputs_r+0xa8>
 80025ee:	0029      	movs	r1, r5
 80025f0:	0038      	movs	r0, r7
 80025f2:	f7ff ff65 	bl	80024c0 <_malloc_r>
 80025f6:	1e06      	subs	r6, r0, #0
 80025f8:	d109      	bne.n	800260e <__ssputs_r+0x62>
 80025fa:	230c      	movs	r3, #12
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	2340      	movs	r3, #64	; 0x40
 8002600:	2001      	movs	r0, #1
 8002602:	89a2      	ldrh	r2, [r4, #12]
 8002604:	4240      	negs	r0, r0
 8002606:	4313      	orrs	r3, r2
 8002608:	81a3      	strh	r3, [r4, #12]
 800260a:	b005      	add	sp, #20
 800260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260e:	9a02      	ldr	r2, [sp, #8]
 8002610:	6921      	ldr	r1, [r4, #16]
 8002612:	f7ff fdfb 	bl	800220c <memcpy>
 8002616:	89a3      	ldrh	r3, [r4, #12]
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <__ssputs_r+0xc0>)
 800261a:	401a      	ands	r2, r3
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	4313      	orrs	r3, r2
 8002620:	81a3      	strh	r3, [r4, #12]
 8002622:	9b02      	ldr	r3, [sp, #8]
 8002624:	6126      	str	r6, [r4, #16]
 8002626:	18f6      	adds	r6, r6, r3
 8002628:	6026      	str	r6, [r4, #0]
 800262a:	6165      	str	r5, [r4, #20]
 800262c:	9e01      	ldr	r6, [sp, #4]
 800262e:	1aed      	subs	r5, r5, r3
 8002630:	60a5      	str	r5, [r4, #8]
 8002632:	9b01      	ldr	r3, [sp, #4]
 8002634:	429e      	cmp	r6, r3
 8002636:	d900      	bls.n	800263a <__ssputs_r+0x8e>
 8002638:	9e01      	ldr	r6, [sp, #4]
 800263a:	0032      	movs	r2, r6
 800263c:	9903      	ldr	r1, [sp, #12]
 800263e:	6820      	ldr	r0, [r4, #0]
 8002640:	f7ff fded 	bl	800221e <memmove>
 8002644:	68a3      	ldr	r3, [r4, #8]
 8002646:	2000      	movs	r0, #0
 8002648:	1b9b      	subs	r3, r3, r6
 800264a:	60a3      	str	r3, [r4, #8]
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	199e      	adds	r6, r3, r6
 8002650:	6026      	str	r6, [r4, #0]
 8002652:	e7da      	b.n	800260a <__ssputs_r+0x5e>
 8002654:	002a      	movs	r2, r5
 8002656:	0038      	movs	r0, r7
 8002658:	f000 ff30 	bl	80034bc <_realloc_r>
 800265c:	1e06      	subs	r6, r0, #0
 800265e:	d1e0      	bne.n	8002622 <__ssputs_r+0x76>
 8002660:	0038      	movs	r0, r7
 8002662:	6921      	ldr	r1, [r4, #16]
 8002664:	f7ff fec0 	bl	80023e8 <_free_r>
 8002668:	e7c7      	b.n	80025fa <__ssputs_r+0x4e>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	fffffb7f 	.word	0xfffffb7f

08002670 <_svfiprintf_r>:
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002672:	b0a1      	sub	sp, #132	; 0x84
 8002674:	9003      	str	r0, [sp, #12]
 8002676:	001d      	movs	r5, r3
 8002678:	898b      	ldrh	r3, [r1, #12]
 800267a:	000f      	movs	r7, r1
 800267c:	0016      	movs	r6, r2
 800267e:	061b      	lsls	r3, r3, #24
 8002680:	d511      	bpl.n	80026a6 <_svfiprintf_r+0x36>
 8002682:	690b      	ldr	r3, [r1, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10e      	bne.n	80026a6 <_svfiprintf_r+0x36>
 8002688:	2140      	movs	r1, #64	; 0x40
 800268a:	f7ff ff19 	bl	80024c0 <_malloc_r>
 800268e:	6038      	str	r0, [r7, #0]
 8002690:	6138      	str	r0, [r7, #16]
 8002692:	2800      	cmp	r0, #0
 8002694:	d105      	bne.n	80026a2 <_svfiprintf_r+0x32>
 8002696:	230c      	movs	r3, #12
 8002698:	9a03      	ldr	r2, [sp, #12]
 800269a:	3801      	subs	r0, #1
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	b021      	add	sp, #132	; 0x84
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	2300      	movs	r3, #0
 80026a8:	ac08      	add	r4, sp, #32
 80026aa:	6163      	str	r3, [r4, #20]
 80026ac:	3320      	adds	r3, #32
 80026ae:	7663      	strb	r3, [r4, #25]
 80026b0:	3310      	adds	r3, #16
 80026b2:	76a3      	strb	r3, [r4, #26]
 80026b4:	9507      	str	r5, [sp, #28]
 80026b6:	0035      	movs	r5, r6
 80026b8:	782b      	ldrb	r3, [r5, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <_svfiprintf_r+0x52>
 80026be:	2b25      	cmp	r3, #37	; 0x25
 80026c0:	d147      	bne.n	8002752 <_svfiprintf_r+0xe2>
 80026c2:	1bab      	subs	r3, r5, r6
 80026c4:	9305      	str	r3, [sp, #20]
 80026c6:	42b5      	cmp	r5, r6
 80026c8:	d00c      	beq.n	80026e4 <_svfiprintf_r+0x74>
 80026ca:	0032      	movs	r2, r6
 80026cc:	0039      	movs	r1, r7
 80026ce:	9803      	ldr	r0, [sp, #12]
 80026d0:	f7ff ff6c 	bl	80025ac <__ssputs_r>
 80026d4:	1c43      	adds	r3, r0, #1
 80026d6:	d100      	bne.n	80026da <_svfiprintf_r+0x6a>
 80026d8:	e0ae      	b.n	8002838 <_svfiprintf_r+0x1c8>
 80026da:	6962      	ldr	r2, [r4, #20]
 80026dc:	9b05      	ldr	r3, [sp, #20]
 80026de:	4694      	mov	ip, r2
 80026e0:	4463      	add	r3, ip
 80026e2:	6163      	str	r3, [r4, #20]
 80026e4:	782b      	ldrb	r3, [r5, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d100      	bne.n	80026ec <_svfiprintf_r+0x7c>
 80026ea:	e0a5      	b.n	8002838 <_svfiprintf_r+0x1c8>
 80026ec:	2201      	movs	r2, #1
 80026ee:	2300      	movs	r3, #0
 80026f0:	4252      	negs	r2, r2
 80026f2:	6062      	str	r2, [r4, #4]
 80026f4:	a904      	add	r1, sp, #16
 80026f6:	3254      	adds	r2, #84	; 0x54
 80026f8:	1852      	adds	r2, r2, r1
 80026fa:	1c6e      	adds	r6, r5, #1
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	60e3      	str	r3, [r4, #12]
 8002700:	60a3      	str	r3, [r4, #8]
 8002702:	7013      	strb	r3, [r2, #0]
 8002704:	65a3      	str	r3, [r4, #88]	; 0x58
 8002706:	2205      	movs	r2, #5
 8002708:	7831      	ldrb	r1, [r6, #0]
 800270a:	4854      	ldr	r0, [pc, #336]	; (800285c <_svfiprintf_r+0x1ec>)
 800270c:	f000 feba 	bl	8003484 <memchr>
 8002710:	1c75      	adds	r5, r6, #1
 8002712:	2800      	cmp	r0, #0
 8002714:	d11f      	bne.n	8002756 <_svfiprintf_r+0xe6>
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	06d3      	lsls	r3, r2, #27
 800271a:	d504      	bpl.n	8002726 <_svfiprintf_r+0xb6>
 800271c:	2353      	movs	r3, #83	; 0x53
 800271e:	a904      	add	r1, sp, #16
 8002720:	185b      	adds	r3, r3, r1
 8002722:	2120      	movs	r1, #32
 8002724:	7019      	strb	r1, [r3, #0]
 8002726:	0713      	lsls	r3, r2, #28
 8002728:	d504      	bpl.n	8002734 <_svfiprintf_r+0xc4>
 800272a:	2353      	movs	r3, #83	; 0x53
 800272c:	a904      	add	r1, sp, #16
 800272e:	185b      	adds	r3, r3, r1
 8002730:	212b      	movs	r1, #43	; 0x2b
 8002732:	7019      	strb	r1, [r3, #0]
 8002734:	7833      	ldrb	r3, [r6, #0]
 8002736:	2b2a      	cmp	r3, #42	; 0x2a
 8002738:	d016      	beq.n	8002768 <_svfiprintf_r+0xf8>
 800273a:	0035      	movs	r5, r6
 800273c:	2100      	movs	r1, #0
 800273e:	200a      	movs	r0, #10
 8002740:	68e3      	ldr	r3, [r4, #12]
 8002742:	782a      	ldrb	r2, [r5, #0]
 8002744:	1c6e      	adds	r6, r5, #1
 8002746:	3a30      	subs	r2, #48	; 0x30
 8002748:	2a09      	cmp	r2, #9
 800274a:	d94e      	bls.n	80027ea <_svfiprintf_r+0x17a>
 800274c:	2900      	cmp	r1, #0
 800274e:	d111      	bne.n	8002774 <_svfiprintf_r+0x104>
 8002750:	e017      	b.n	8002782 <_svfiprintf_r+0x112>
 8002752:	3501      	adds	r5, #1
 8002754:	e7b0      	b.n	80026b8 <_svfiprintf_r+0x48>
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <_svfiprintf_r+0x1ec>)
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	1ac0      	subs	r0, r0, r3
 800275c:	2301      	movs	r3, #1
 800275e:	4083      	lsls	r3, r0
 8002760:	4313      	orrs	r3, r2
 8002762:	002e      	movs	r6, r5
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	e7ce      	b.n	8002706 <_svfiprintf_r+0x96>
 8002768:	9b07      	ldr	r3, [sp, #28]
 800276a:	1d19      	adds	r1, r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	9107      	str	r1, [sp, #28]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db01      	blt.n	8002778 <_svfiprintf_r+0x108>
 8002774:	930b      	str	r3, [sp, #44]	; 0x2c
 8002776:	e004      	b.n	8002782 <_svfiprintf_r+0x112>
 8002778:	425b      	negs	r3, r3
 800277a:	60e3      	str	r3, [r4, #12]
 800277c:	2302      	movs	r3, #2
 800277e:	4313      	orrs	r3, r2
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	782b      	ldrb	r3, [r5, #0]
 8002784:	2b2e      	cmp	r3, #46	; 0x2e
 8002786:	d10a      	bne.n	800279e <_svfiprintf_r+0x12e>
 8002788:	786b      	ldrb	r3, [r5, #1]
 800278a:	2b2a      	cmp	r3, #42	; 0x2a
 800278c:	d135      	bne.n	80027fa <_svfiprintf_r+0x18a>
 800278e:	9b07      	ldr	r3, [sp, #28]
 8002790:	3502      	adds	r5, #2
 8002792:	1d1a      	adds	r2, r3, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	9207      	str	r2, [sp, #28]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db2b      	blt.n	80027f4 <_svfiprintf_r+0x184>
 800279c:	9309      	str	r3, [sp, #36]	; 0x24
 800279e:	4e30      	ldr	r6, [pc, #192]	; (8002860 <_svfiprintf_r+0x1f0>)
 80027a0:	2203      	movs	r2, #3
 80027a2:	0030      	movs	r0, r6
 80027a4:	7829      	ldrb	r1, [r5, #0]
 80027a6:	f000 fe6d 	bl	8003484 <memchr>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d006      	beq.n	80027bc <_svfiprintf_r+0x14c>
 80027ae:	2340      	movs	r3, #64	; 0x40
 80027b0:	1b80      	subs	r0, r0, r6
 80027b2:	4083      	lsls	r3, r0
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	3501      	adds	r5, #1
 80027b8:	4313      	orrs	r3, r2
 80027ba:	6023      	str	r3, [r4, #0]
 80027bc:	7829      	ldrb	r1, [r5, #0]
 80027be:	2206      	movs	r2, #6
 80027c0:	4828      	ldr	r0, [pc, #160]	; (8002864 <_svfiprintf_r+0x1f4>)
 80027c2:	1c6e      	adds	r6, r5, #1
 80027c4:	7621      	strb	r1, [r4, #24]
 80027c6:	f000 fe5d 	bl	8003484 <memchr>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d03c      	beq.n	8002848 <_svfiprintf_r+0x1d8>
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <_svfiprintf_r+0x1f8>)
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d125      	bne.n	8002820 <_svfiprintf_r+0x1b0>
 80027d4:	2207      	movs	r2, #7
 80027d6:	9b07      	ldr	r3, [sp, #28]
 80027d8:	3307      	adds	r3, #7
 80027da:	4393      	bics	r3, r2
 80027dc:	3308      	adds	r3, #8
 80027de:	9307      	str	r3, [sp, #28]
 80027e0:	6963      	ldr	r3, [r4, #20]
 80027e2:	9a04      	ldr	r2, [sp, #16]
 80027e4:	189b      	adds	r3, r3, r2
 80027e6:	6163      	str	r3, [r4, #20]
 80027e8:	e765      	b.n	80026b6 <_svfiprintf_r+0x46>
 80027ea:	4343      	muls	r3, r0
 80027ec:	0035      	movs	r5, r6
 80027ee:	2101      	movs	r1, #1
 80027f0:	189b      	adds	r3, r3, r2
 80027f2:	e7a6      	b.n	8002742 <_svfiprintf_r+0xd2>
 80027f4:	2301      	movs	r3, #1
 80027f6:	425b      	negs	r3, r3
 80027f8:	e7d0      	b.n	800279c <_svfiprintf_r+0x12c>
 80027fa:	2300      	movs	r3, #0
 80027fc:	200a      	movs	r0, #10
 80027fe:	001a      	movs	r2, r3
 8002800:	3501      	adds	r5, #1
 8002802:	6063      	str	r3, [r4, #4]
 8002804:	7829      	ldrb	r1, [r5, #0]
 8002806:	1c6e      	adds	r6, r5, #1
 8002808:	3930      	subs	r1, #48	; 0x30
 800280a:	2909      	cmp	r1, #9
 800280c:	d903      	bls.n	8002816 <_svfiprintf_r+0x1a6>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0c5      	beq.n	800279e <_svfiprintf_r+0x12e>
 8002812:	9209      	str	r2, [sp, #36]	; 0x24
 8002814:	e7c3      	b.n	800279e <_svfiprintf_r+0x12e>
 8002816:	4342      	muls	r2, r0
 8002818:	0035      	movs	r5, r6
 800281a:	2301      	movs	r3, #1
 800281c:	1852      	adds	r2, r2, r1
 800281e:	e7f1      	b.n	8002804 <_svfiprintf_r+0x194>
 8002820:	ab07      	add	r3, sp, #28
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	003a      	movs	r2, r7
 8002826:	0021      	movs	r1, r4
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <_svfiprintf_r+0x1fc>)
 800282a:	9803      	ldr	r0, [sp, #12]
 800282c:	e000      	b.n	8002830 <_svfiprintf_r+0x1c0>
 800282e:	bf00      	nop
 8002830:	9004      	str	r0, [sp, #16]
 8002832:	9b04      	ldr	r3, [sp, #16]
 8002834:	3301      	adds	r3, #1
 8002836:	d1d3      	bne.n	80027e0 <_svfiprintf_r+0x170>
 8002838:	89bb      	ldrh	r3, [r7, #12]
 800283a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800283c:	065b      	lsls	r3, r3, #25
 800283e:	d400      	bmi.n	8002842 <_svfiprintf_r+0x1d2>
 8002840:	e72d      	b.n	800269e <_svfiprintf_r+0x2e>
 8002842:	2001      	movs	r0, #1
 8002844:	4240      	negs	r0, r0
 8002846:	e72a      	b.n	800269e <_svfiprintf_r+0x2e>
 8002848:	ab07      	add	r3, sp, #28
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	003a      	movs	r2, r7
 800284e:	0021      	movs	r1, r4
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <_svfiprintf_r+0x1fc>)
 8002852:	9803      	ldr	r0, [sp, #12]
 8002854:	f000 f9de 	bl	8002c14 <_printf_i>
 8002858:	e7ea      	b.n	8002830 <_svfiprintf_r+0x1c0>
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	080043c8 	.word	0x080043c8
 8002860:	080043ce 	.word	0x080043ce
 8002864:	080043d2 	.word	0x080043d2
 8002868:	00000000 	.word	0x00000000
 800286c:	080025ad 	.word	0x080025ad

08002870 <__sfputc_r>:
 8002870:	6893      	ldr	r3, [r2, #8]
 8002872:	b510      	push	{r4, lr}
 8002874:	3b01      	subs	r3, #1
 8002876:	6093      	str	r3, [r2, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	da04      	bge.n	8002886 <__sfputc_r+0x16>
 800287c:	6994      	ldr	r4, [r2, #24]
 800287e:	42a3      	cmp	r3, r4
 8002880:	db07      	blt.n	8002892 <__sfputc_r+0x22>
 8002882:	290a      	cmp	r1, #10
 8002884:	d005      	beq.n	8002892 <__sfputc_r+0x22>
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	1c58      	adds	r0, r3, #1
 800288a:	6010      	str	r0, [r2, #0]
 800288c:	7019      	strb	r1, [r3, #0]
 800288e:	0008      	movs	r0, r1
 8002890:	bd10      	pop	{r4, pc}
 8002892:	f000 fae3 	bl	8002e5c <__swbuf_r>
 8002896:	0001      	movs	r1, r0
 8002898:	e7f9      	b.n	800288e <__sfputc_r+0x1e>

0800289a <__sfputs_r>:
 800289a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289c:	0006      	movs	r6, r0
 800289e:	000f      	movs	r7, r1
 80028a0:	0014      	movs	r4, r2
 80028a2:	18d5      	adds	r5, r2, r3
 80028a4:	42ac      	cmp	r4, r5
 80028a6:	d101      	bne.n	80028ac <__sfputs_r+0x12>
 80028a8:	2000      	movs	r0, #0
 80028aa:	e007      	b.n	80028bc <__sfputs_r+0x22>
 80028ac:	7821      	ldrb	r1, [r4, #0]
 80028ae:	003a      	movs	r2, r7
 80028b0:	0030      	movs	r0, r6
 80028b2:	f7ff ffdd 	bl	8002870 <__sfputc_r>
 80028b6:	3401      	adds	r4, #1
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d1f3      	bne.n	80028a4 <__sfputs_r+0xa>
 80028bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028c0 <_vfiprintf_r>:
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	b0a1      	sub	sp, #132	; 0x84
 80028c4:	0006      	movs	r6, r0
 80028c6:	000c      	movs	r4, r1
 80028c8:	001f      	movs	r7, r3
 80028ca:	9203      	str	r2, [sp, #12]
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d004      	beq.n	80028da <_vfiprintf_r+0x1a>
 80028d0:	6983      	ldr	r3, [r0, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <_vfiprintf_r+0x1a>
 80028d6:	f000 fcc5 	bl	8003264 <__sinit>
 80028da:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <_vfiprintf_r+0x254>)
 80028dc:	429c      	cmp	r4, r3
 80028de:	d11c      	bne.n	800291a <_vfiprintf_r+0x5a>
 80028e0:	6874      	ldr	r4, [r6, #4]
 80028e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028e4:	07db      	lsls	r3, r3, #31
 80028e6:	d405      	bmi.n	80028f4 <_vfiprintf_r+0x34>
 80028e8:	89a3      	ldrh	r3, [r4, #12]
 80028ea:	059b      	lsls	r3, r3, #22
 80028ec:	d402      	bmi.n	80028f4 <_vfiprintf_r+0x34>
 80028ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028f0:	f000 fd59 	bl	80033a6 <__retarget_lock_acquire_recursive>
 80028f4:	89a3      	ldrh	r3, [r4, #12]
 80028f6:	071b      	lsls	r3, r3, #28
 80028f8:	d502      	bpl.n	8002900 <_vfiprintf_r+0x40>
 80028fa:	6923      	ldr	r3, [r4, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11d      	bne.n	800293c <_vfiprintf_r+0x7c>
 8002900:	0021      	movs	r1, r4
 8002902:	0030      	movs	r0, r6
 8002904:	f000 fb00 	bl	8002f08 <__swsetup_r>
 8002908:	2800      	cmp	r0, #0
 800290a:	d017      	beq.n	800293c <_vfiprintf_r+0x7c>
 800290c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800290e:	07db      	lsls	r3, r3, #31
 8002910:	d50d      	bpl.n	800292e <_vfiprintf_r+0x6e>
 8002912:	2001      	movs	r0, #1
 8002914:	4240      	negs	r0, r0
 8002916:	b021      	add	sp, #132	; 0x84
 8002918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800291a:	4b7f      	ldr	r3, [pc, #508]	; (8002b18 <_vfiprintf_r+0x258>)
 800291c:	429c      	cmp	r4, r3
 800291e:	d101      	bne.n	8002924 <_vfiprintf_r+0x64>
 8002920:	68b4      	ldr	r4, [r6, #8]
 8002922:	e7de      	b.n	80028e2 <_vfiprintf_r+0x22>
 8002924:	4b7d      	ldr	r3, [pc, #500]	; (8002b1c <_vfiprintf_r+0x25c>)
 8002926:	429c      	cmp	r4, r3
 8002928:	d1db      	bne.n	80028e2 <_vfiprintf_r+0x22>
 800292a:	68f4      	ldr	r4, [r6, #12]
 800292c:	e7d9      	b.n	80028e2 <_vfiprintf_r+0x22>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	059b      	lsls	r3, r3, #22
 8002932:	d4ee      	bmi.n	8002912 <_vfiprintf_r+0x52>
 8002934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002936:	f000 fd37 	bl	80033a8 <__retarget_lock_release_recursive>
 800293a:	e7ea      	b.n	8002912 <_vfiprintf_r+0x52>
 800293c:	2300      	movs	r3, #0
 800293e:	ad08      	add	r5, sp, #32
 8002940:	616b      	str	r3, [r5, #20]
 8002942:	3320      	adds	r3, #32
 8002944:	766b      	strb	r3, [r5, #25]
 8002946:	3310      	adds	r3, #16
 8002948:	76ab      	strb	r3, [r5, #26]
 800294a:	9707      	str	r7, [sp, #28]
 800294c:	9f03      	ldr	r7, [sp, #12]
 800294e:	783b      	ldrb	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <_vfiprintf_r+0x98>
 8002954:	2b25      	cmp	r3, #37	; 0x25
 8002956:	d14e      	bne.n	80029f6 <_vfiprintf_r+0x136>
 8002958:	9b03      	ldr	r3, [sp, #12]
 800295a:	1afb      	subs	r3, r7, r3
 800295c:	9305      	str	r3, [sp, #20]
 800295e:	9b03      	ldr	r3, [sp, #12]
 8002960:	429f      	cmp	r7, r3
 8002962:	d00d      	beq.n	8002980 <_vfiprintf_r+0xc0>
 8002964:	9b05      	ldr	r3, [sp, #20]
 8002966:	0021      	movs	r1, r4
 8002968:	0030      	movs	r0, r6
 800296a:	9a03      	ldr	r2, [sp, #12]
 800296c:	f7ff ff95 	bl	800289a <__sfputs_r>
 8002970:	1c43      	adds	r3, r0, #1
 8002972:	d100      	bne.n	8002976 <_vfiprintf_r+0xb6>
 8002974:	e0b5      	b.n	8002ae2 <_vfiprintf_r+0x222>
 8002976:	696a      	ldr	r2, [r5, #20]
 8002978:	9b05      	ldr	r3, [sp, #20]
 800297a:	4694      	mov	ip, r2
 800297c:	4463      	add	r3, ip
 800297e:	616b      	str	r3, [r5, #20]
 8002980:	783b      	ldrb	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d100      	bne.n	8002988 <_vfiprintf_r+0xc8>
 8002986:	e0ac      	b.n	8002ae2 <_vfiprintf_r+0x222>
 8002988:	2201      	movs	r2, #1
 800298a:	1c7b      	adds	r3, r7, #1
 800298c:	9303      	str	r3, [sp, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	4252      	negs	r2, r2
 8002992:	606a      	str	r2, [r5, #4]
 8002994:	a904      	add	r1, sp, #16
 8002996:	3254      	adds	r2, #84	; 0x54
 8002998:	1852      	adds	r2, r2, r1
 800299a:	602b      	str	r3, [r5, #0]
 800299c:	60eb      	str	r3, [r5, #12]
 800299e:	60ab      	str	r3, [r5, #8]
 80029a0:	7013      	strb	r3, [r2, #0]
 80029a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80029a4:	9b03      	ldr	r3, [sp, #12]
 80029a6:	2205      	movs	r2, #5
 80029a8:	7819      	ldrb	r1, [r3, #0]
 80029aa:	485d      	ldr	r0, [pc, #372]	; (8002b20 <_vfiprintf_r+0x260>)
 80029ac:	f000 fd6a 	bl	8003484 <memchr>
 80029b0:	9b03      	ldr	r3, [sp, #12]
 80029b2:	1c5f      	adds	r7, r3, #1
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d120      	bne.n	80029fa <_vfiprintf_r+0x13a>
 80029b8:	682a      	ldr	r2, [r5, #0]
 80029ba:	06d3      	lsls	r3, r2, #27
 80029bc:	d504      	bpl.n	80029c8 <_vfiprintf_r+0x108>
 80029be:	2353      	movs	r3, #83	; 0x53
 80029c0:	a904      	add	r1, sp, #16
 80029c2:	185b      	adds	r3, r3, r1
 80029c4:	2120      	movs	r1, #32
 80029c6:	7019      	strb	r1, [r3, #0]
 80029c8:	0713      	lsls	r3, r2, #28
 80029ca:	d504      	bpl.n	80029d6 <_vfiprintf_r+0x116>
 80029cc:	2353      	movs	r3, #83	; 0x53
 80029ce:	a904      	add	r1, sp, #16
 80029d0:	185b      	adds	r3, r3, r1
 80029d2:	212b      	movs	r1, #43	; 0x2b
 80029d4:	7019      	strb	r1, [r3, #0]
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b2a      	cmp	r3, #42	; 0x2a
 80029dc:	d016      	beq.n	8002a0c <_vfiprintf_r+0x14c>
 80029de:	2100      	movs	r1, #0
 80029e0:	68eb      	ldr	r3, [r5, #12]
 80029e2:	9f03      	ldr	r7, [sp, #12]
 80029e4:	783a      	ldrb	r2, [r7, #0]
 80029e6:	1c78      	adds	r0, r7, #1
 80029e8:	3a30      	subs	r2, #48	; 0x30
 80029ea:	4684      	mov	ip, r0
 80029ec:	2a09      	cmp	r2, #9
 80029ee:	d94f      	bls.n	8002a90 <_vfiprintf_r+0x1d0>
 80029f0:	2900      	cmp	r1, #0
 80029f2:	d111      	bne.n	8002a18 <_vfiprintf_r+0x158>
 80029f4:	e017      	b.n	8002a26 <_vfiprintf_r+0x166>
 80029f6:	3701      	adds	r7, #1
 80029f8:	e7a9      	b.n	800294e <_vfiprintf_r+0x8e>
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <_vfiprintf_r+0x260>)
 80029fc:	682a      	ldr	r2, [r5, #0]
 80029fe:	1ac0      	subs	r0, r0, r3
 8002a00:	2301      	movs	r3, #1
 8002a02:	4083      	lsls	r3, r0
 8002a04:	4313      	orrs	r3, r2
 8002a06:	602b      	str	r3, [r5, #0]
 8002a08:	9703      	str	r7, [sp, #12]
 8002a0a:	e7cb      	b.n	80029a4 <_vfiprintf_r+0xe4>
 8002a0c:	9b07      	ldr	r3, [sp, #28]
 8002a0e:	1d19      	adds	r1, r3, #4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	9107      	str	r1, [sp, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db01      	blt.n	8002a1c <_vfiprintf_r+0x15c>
 8002a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a1a:	e004      	b.n	8002a26 <_vfiprintf_r+0x166>
 8002a1c:	425b      	negs	r3, r3
 8002a1e:	60eb      	str	r3, [r5, #12]
 8002a20:	2302      	movs	r3, #2
 8002a22:	4313      	orrs	r3, r2
 8002a24:	602b      	str	r3, [r5, #0]
 8002a26:	783b      	ldrb	r3, [r7, #0]
 8002a28:	2b2e      	cmp	r3, #46	; 0x2e
 8002a2a:	d10a      	bne.n	8002a42 <_vfiprintf_r+0x182>
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a30:	d137      	bne.n	8002aa2 <_vfiprintf_r+0x1e2>
 8002a32:	9b07      	ldr	r3, [sp, #28]
 8002a34:	3702      	adds	r7, #2
 8002a36:	1d1a      	adds	r2, r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	9207      	str	r2, [sp, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db2d      	blt.n	8002a9c <_vfiprintf_r+0x1dc>
 8002a40:	9309      	str	r3, [sp, #36]	; 0x24
 8002a42:	2203      	movs	r2, #3
 8002a44:	7839      	ldrb	r1, [r7, #0]
 8002a46:	4837      	ldr	r0, [pc, #220]	; (8002b24 <_vfiprintf_r+0x264>)
 8002a48:	f000 fd1c 	bl	8003484 <memchr>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d007      	beq.n	8002a60 <_vfiprintf_r+0x1a0>
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <_vfiprintf_r+0x264>)
 8002a52:	682a      	ldr	r2, [r5, #0]
 8002a54:	1ac0      	subs	r0, r0, r3
 8002a56:	2340      	movs	r3, #64	; 0x40
 8002a58:	4083      	lsls	r3, r0
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	3701      	adds	r7, #1
 8002a5e:	602b      	str	r3, [r5, #0]
 8002a60:	7839      	ldrb	r1, [r7, #0]
 8002a62:	1c7b      	adds	r3, r7, #1
 8002a64:	2206      	movs	r2, #6
 8002a66:	4830      	ldr	r0, [pc, #192]	; (8002b28 <_vfiprintf_r+0x268>)
 8002a68:	9303      	str	r3, [sp, #12]
 8002a6a:	7629      	strb	r1, [r5, #24]
 8002a6c:	f000 fd0a 	bl	8003484 <memchr>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d045      	beq.n	8002b00 <_vfiprintf_r+0x240>
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <_vfiprintf_r+0x26c>)
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d127      	bne.n	8002aca <_vfiprintf_r+0x20a>
 8002a7a:	2207      	movs	r2, #7
 8002a7c:	9b07      	ldr	r3, [sp, #28]
 8002a7e:	3307      	adds	r3, #7
 8002a80:	4393      	bics	r3, r2
 8002a82:	3308      	adds	r3, #8
 8002a84:	9307      	str	r3, [sp, #28]
 8002a86:	696b      	ldr	r3, [r5, #20]
 8002a88:	9a04      	ldr	r2, [sp, #16]
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	616b      	str	r3, [r5, #20]
 8002a8e:	e75d      	b.n	800294c <_vfiprintf_r+0x8c>
 8002a90:	210a      	movs	r1, #10
 8002a92:	434b      	muls	r3, r1
 8002a94:	4667      	mov	r7, ip
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	3909      	subs	r1, #9
 8002a9a:	e7a3      	b.n	80029e4 <_vfiprintf_r+0x124>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	425b      	negs	r3, r3
 8002aa0:	e7ce      	b.n	8002a40 <_vfiprintf_r+0x180>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	3701      	adds	r7, #1
 8002aa8:	606b      	str	r3, [r5, #4]
 8002aaa:	7839      	ldrb	r1, [r7, #0]
 8002aac:	1c78      	adds	r0, r7, #1
 8002aae:	3930      	subs	r1, #48	; 0x30
 8002ab0:	4684      	mov	ip, r0
 8002ab2:	2909      	cmp	r1, #9
 8002ab4:	d903      	bls.n	8002abe <_vfiprintf_r+0x1fe>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0c3      	beq.n	8002a42 <_vfiprintf_r+0x182>
 8002aba:	9209      	str	r2, [sp, #36]	; 0x24
 8002abc:	e7c1      	b.n	8002a42 <_vfiprintf_r+0x182>
 8002abe:	230a      	movs	r3, #10
 8002ac0:	435a      	muls	r2, r3
 8002ac2:	4667      	mov	r7, ip
 8002ac4:	1852      	adds	r2, r2, r1
 8002ac6:	3b09      	subs	r3, #9
 8002ac8:	e7ef      	b.n	8002aaa <_vfiprintf_r+0x1ea>
 8002aca:	ab07      	add	r3, sp, #28
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	0022      	movs	r2, r4
 8002ad0:	0029      	movs	r1, r5
 8002ad2:	0030      	movs	r0, r6
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <_vfiprintf_r+0x270>)
 8002ad6:	e000      	b.n	8002ada <_vfiprintf_r+0x21a>
 8002ad8:	bf00      	nop
 8002ada:	9004      	str	r0, [sp, #16]
 8002adc:	9b04      	ldr	r3, [sp, #16]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	d1d1      	bne.n	8002a86 <_vfiprintf_r+0x1c6>
 8002ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ae4:	07db      	lsls	r3, r3, #31
 8002ae6:	d405      	bmi.n	8002af4 <_vfiprintf_r+0x234>
 8002ae8:	89a3      	ldrh	r3, [r4, #12]
 8002aea:	059b      	lsls	r3, r3, #22
 8002aec:	d402      	bmi.n	8002af4 <_vfiprintf_r+0x234>
 8002aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002af0:	f000 fc5a 	bl	80033a8 <__retarget_lock_release_recursive>
 8002af4:	89a3      	ldrh	r3, [r4, #12]
 8002af6:	065b      	lsls	r3, r3, #25
 8002af8:	d500      	bpl.n	8002afc <_vfiprintf_r+0x23c>
 8002afa:	e70a      	b.n	8002912 <_vfiprintf_r+0x52>
 8002afc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002afe:	e70a      	b.n	8002916 <_vfiprintf_r+0x56>
 8002b00:	ab07      	add	r3, sp, #28
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	0022      	movs	r2, r4
 8002b06:	0029      	movs	r1, r5
 8002b08:	0030      	movs	r0, r6
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <_vfiprintf_r+0x270>)
 8002b0c:	f000 f882 	bl	8002c14 <_printf_i>
 8002b10:	e7e3      	b.n	8002ada <_vfiprintf_r+0x21a>
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	0800441c 	.word	0x0800441c
 8002b18:	0800443c 	.word	0x0800443c
 8002b1c:	080043fc 	.word	0x080043fc
 8002b20:	080043c8 	.word	0x080043c8
 8002b24:	080043ce 	.word	0x080043ce
 8002b28:	080043d2 	.word	0x080043d2
 8002b2c:	00000000 	.word	0x00000000
 8002b30:	0800289b 	.word	0x0800289b

08002b34 <_printf_common>:
 8002b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b36:	0015      	movs	r5, r2
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	688a      	ldr	r2, [r1, #8]
 8002b3c:	690b      	ldr	r3, [r1, #16]
 8002b3e:	000c      	movs	r4, r1
 8002b40:	9000      	str	r0, [sp, #0]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	da00      	bge.n	8002b48 <_printf_common+0x14>
 8002b46:	0013      	movs	r3, r2
 8002b48:	0022      	movs	r2, r4
 8002b4a:	602b      	str	r3, [r5, #0]
 8002b4c:	3243      	adds	r2, #67	; 0x43
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	2a00      	cmp	r2, #0
 8002b52:	d001      	beq.n	8002b58 <_printf_common+0x24>
 8002b54:	3301      	adds	r3, #1
 8002b56:	602b      	str	r3, [r5, #0]
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	069b      	lsls	r3, r3, #26
 8002b5c:	d502      	bpl.n	8002b64 <_printf_common+0x30>
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	3302      	adds	r3, #2
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	6822      	ldr	r2, [r4, #0]
 8002b66:	2306      	movs	r3, #6
 8002b68:	0017      	movs	r7, r2
 8002b6a:	401f      	ands	r7, r3
 8002b6c:	421a      	tst	r2, r3
 8002b6e:	d027      	beq.n	8002bc0 <_printf_common+0x8c>
 8002b70:	0023      	movs	r3, r4
 8002b72:	3343      	adds	r3, #67	; 0x43
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	4193      	sbcs	r3, r2
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	0692      	lsls	r2, r2, #26
 8002b7e:	d430      	bmi.n	8002be2 <_printf_common+0xae>
 8002b80:	0022      	movs	r2, r4
 8002b82:	9901      	ldr	r1, [sp, #4]
 8002b84:	9800      	ldr	r0, [sp, #0]
 8002b86:	9e08      	ldr	r6, [sp, #32]
 8002b88:	3243      	adds	r2, #67	; 0x43
 8002b8a:	47b0      	blx	r6
 8002b8c:	1c43      	adds	r3, r0, #1
 8002b8e:	d025      	beq.n	8002bdc <_printf_common+0xa8>
 8002b90:	2306      	movs	r3, #6
 8002b92:	6820      	ldr	r0, [r4, #0]
 8002b94:	682a      	ldr	r2, [r5, #0]
 8002b96:	68e1      	ldr	r1, [r4, #12]
 8002b98:	2500      	movs	r5, #0
 8002b9a:	4003      	ands	r3, r0
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d103      	bne.n	8002ba8 <_printf_common+0x74>
 8002ba0:	1a8d      	subs	r5, r1, r2
 8002ba2:	43eb      	mvns	r3, r5
 8002ba4:	17db      	asrs	r3, r3, #31
 8002ba6:	401d      	ands	r5, r3
 8002ba8:	68a3      	ldr	r3, [r4, #8]
 8002baa:	6922      	ldr	r2, [r4, #16]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	dd01      	ble.n	8002bb4 <_printf_common+0x80>
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	18ed      	adds	r5, r5, r3
 8002bb4:	2700      	movs	r7, #0
 8002bb6:	42bd      	cmp	r5, r7
 8002bb8:	d120      	bne.n	8002bfc <_printf_common+0xc8>
 8002bba:	2000      	movs	r0, #0
 8002bbc:	e010      	b.n	8002be0 <_printf_common+0xac>
 8002bbe:	3701      	adds	r7, #1
 8002bc0:	68e3      	ldr	r3, [r4, #12]
 8002bc2:	682a      	ldr	r2, [r5, #0]
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	42bb      	cmp	r3, r7
 8002bc8:	ddd2      	ble.n	8002b70 <_printf_common+0x3c>
 8002bca:	0022      	movs	r2, r4
 8002bcc:	2301      	movs	r3, #1
 8002bce:	9901      	ldr	r1, [sp, #4]
 8002bd0:	9800      	ldr	r0, [sp, #0]
 8002bd2:	9e08      	ldr	r6, [sp, #32]
 8002bd4:	3219      	adds	r2, #25
 8002bd6:	47b0      	blx	r6
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	d1f0      	bne.n	8002bbe <_printf_common+0x8a>
 8002bdc:	2001      	movs	r0, #1
 8002bde:	4240      	negs	r0, r0
 8002be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002be2:	2030      	movs	r0, #48	; 0x30
 8002be4:	18e1      	adds	r1, r4, r3
 8002be6:	3143      	adds	r1, #67	; 0x43
 8002be8:	7008      	strb	r0, [r1, #0]
 8002bea:	0021      	movs	r1, r4
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	3145      	adds	r1, #69	; 0x45
 8002bf0:	7809      	ldrb	r1, [r1, #0]
 8002bf2:	18a2      	adds	r2, r4, r2
 8002bf4:	3243      	adds	r2, #67	; 0x43
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	7011      	strb	r1, [r2, #0]
 8002bfa:	e7c1      	b.n	8002b80 <_printf_common+0x4c>
 8002bfc:	0022      	movs	r2, r4
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9901      	ldr	r1, [sp, #4]
 8002c02:	9800      	ldr	r0, [sp, #0]
 8002c04:	9e08      	ldr	r6, [sp, #32]
 8002c06:	321a      	adds	r2, #26
 8002c08:	47b0      	blx	r6
 8002c0a:	1c43      	adds	r3, r0, #1
 8002c0c:	d0e6      	beq.n	8002bdc <_printf_common+0xa8>
 8002c0e:	3701      	adds	r7, #1
 8002c10:	e7d1      	b.n	8002bb6 <_printf_common+0x82>
	...

08002c14 <_printf_i>:
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	b08b      	sub	sp, #44	; 0x2c
 8002c18:	9206      	str	r2, [sp, #24]
 8002c1a:	000a      	movs	r2, r1
 8002c1c:	3243      	adds	r2, #67	; 0x43
 8002c1e:	9307      	str	r3, [sp, #28]
 8002c20:	9005      	str	r0, [sp, #20]
 8002c22:	9204      	str	r2, [sp, #16]
 8002c24:	7e0a      	ldrb	r2, [r1, #24]
 8002c26:	000c      	movs	r4, r1
 8002c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c2a:	2a78      	cmp	r2, #120	; 0x78
 8002c2c:	d807      	bhi.n	8002c3e <_printf_i+0x2a>
 8002c2e:	2a62      	cmp	r2, #98	; 0x62
 8002c30:	d809      	bhi.n	8002c46 <_printf_i+0x32>
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d100      	bne.n	8002c38 <_printf_i+0x24>
 8002c36:	e0c1      	b.n	8002dbc <_printf_i+0x1a8>
 8002c38:	2a58      	cmp	r2, #88	; 0x58
 8002c3a:	d100      	bne.n	8002c3e <_printf_i+0x2a>
 8002c3c:	e08c      	b.n	8002d58 <_printf_i+0x144>
 8002c3e:	0026      	movs	r6, r4
 8002c40:	3642      	adds	r6, #66	; 0x42
 8002c42:	7032      	strb	r2, [r6, #0]
 8002c44:	e022      	b.n	8002c8c <_printf_i+0x78>
 8002c46:	0010      	movs	r0, r2
 8002c48:	3863      	subs	r0, #99	; 0x63
 8002c4a:	2815      	cmp	r0, #21
 8002c4c:	d8f7      	bhi.n	8002c3e <_printf_i+0x2a>
 8002c4e:	f7fd fa59 	bl	8000104 <__gnu_thumb1_case_shi>
 8002c52:	0016      	.short	0x0016
 8002c54:	fff6001f 	.word	0xfff6001f
 8002c58:	fff6fff6 	.word	0xfff6fff6
 8002c5c:	001ffff6 	.word	0x001ffff6
 8002c60:	fff6fff6 	.word	0xfff6fff6
 8002c64:	fff6fff6 	.word	0xfff6fff6
 8002c68:	003600a8 	.word	0x003600a8
 8002c6c:	fff6009a 	.word	0xfff6009a
 8002c70:	00b9fff6 	.word	0x00b9fff6
 8002c74:	0036fff6 	.word	0x0036fff6
 8002c78:	fff6fff6 	.word	0xfff6fff6
 8002c7c:	009e      	.short	0x009e
 8002c7e:	0026      	movs	r6, r4
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	3642      	adds	r6, #66	; 0x42
 8002c84:	1d11      	adds	r1, r2, #4
 8002c86:	6019      	str	r1, [r3, #0]
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	7033      	strb	r3, [r6, #0]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0a7      	b.n	8002de0 <_printf_i+0x1cc>
 8002c90:	6808      	ldr	r0, [r1, #0]
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	1d0a      	adds	r2, r1, #4
 8002c96:	0605      	lsls	r5, r0, #24
 8002c98:	d50b      	bpl.n	8002cb2 <_printf_i+0x9e>
 8002c9a:	680d      	ldr	r5, [r1, #0]
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	2d00      	cmp	r5, #0
 8002ca0:	da03      	bge.n	8002caa <_printf_i+0x96>
 8002ca2:	232d      	movs	r3, #45	; 0x2d
 8002ca4:	9a04      	ldr	r2, [sp, #16]
 8002ca6:	426d      	negs	r5, r5
 8002ca8:	7013      	strb	r3, [r2, #0]
 8002caa:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <_printf_i+0x21c>)
 8002cac:	270a      	movs	r7, #10
 8002cae:	9303      	str	r3, [sp, #12]
 8002cb0:	e01b      	b.n	8002cea <_printf_i+0xd6>
 8002cb2:	680d      	ldr	r5, [r1, #0]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	0641      	lsls	r1, r0, #25
 8002cb8:	d5f1      	bpl.n	8002c9e <_printf_i+0x8a>
 8002cba:	b22d      	sxth	r5, r5
 8002cbc:	e7ef      	b.n	8002c9e <_printf_i+0x8a>
 8002cbe:	680d      	ldr	r5, [r1, #0]
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	1d08      	adds	r0, r1, #4
 8002cc4:	6018      	str	r0, [r3, #0]
 8002cc6:	062e      	lsls	r6, r5, #24
 8002cc8:	d501      	bpl.n	8002cce <_printf_i+0xba>
 8002cca:	680d      	ldr	r5, [r1, #0]
 8002ccc:	e003      	b.n	8002cd6 <_printf_i+0xc2>
 8002cce:	066d      	lsls	r5, r5, #25
 8002cd0:	d5fb      	bpl.n	8002cca <_printf_i+0xb6>
 8002cd2:	680d      	ldr	r5, [r1, #0]
 8002cd4:	b2ad      	uxth	r5, r5
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <_printf_i+0x21c>)
 8002cd8:	2708      	movs	r7, #8
 8002cda:	9303      	str	r3, [sp, #12]
 8002cdc:	2a6f      	cmp	r2, #111	; 0x6f
 8002cde:	d000      	beq.n	8002ce2 <_printf_i+0xce>
 8002ce0:	3702      	adds	r7, #2
 8002ce2:	0023      	movs	r3, r4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	3343      	adds	r3, #67	; 0x43
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	6863      	ldr	r3, [r4, #4]
 8002cec:	60a3      	str	r3, [r4, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db03      	blt.n	8002cfa <_printf_i+0xe6>
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	6821      	ldr	r1, [r4, #0]
 8002cf6:	4391      	bics	r1, r2
 8002cf8:	6021      	str	r1, [r4, #0]
 8002cfa:	2d00      	cmp	r5, #0
 8002cfc:	d102      	bne.n	8002d04 <_printf_i+0xf0>
 8002cfe:	9e04      	ldr	r6, [sp, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <_printf_i+0x10a>
 8002d04:	9e04      	ldr	r6, [sp, #16]
 8002d06:	0028      	movs	r0, r5
 8002d08:	0039      	movs	r1, r7
 8002d0a:	f7fd fa8b 	bl	8000224 <__aeabi_uidivmod>
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	3e01      	subs	r6, #1
 8002d12:	5c5b      	ldrb	r3, [r3, r1]
 8002d14:	7033      	strb	r3, [r6, #0]
 8002d16:	002b      	movs	r3, r5
 8002d18:	0005      	movs	r5, r0
 8002d1a:	429f      	cmp	r7, r3
 8002d1c:	d9f3      	bls.n	8002d06 <_printf_i+0xf2>
 8002d1e:	2f08      	cmp	r7, #8
 8002d20:	d109      	bne.n	8002d36 <_printf_i+0x122>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	07db      	lsls	r3, r3, #31
 8002d26:	d506      	bpl.n	8002d36 <_printf_i+0x122>
 8002d28:	6863      	ldr	r3, [r4, #4]
 8002d2a:	6922      	ldr	r2, [r4, #16]
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	dc02      	bgt.n	8002d36 <_printf_i+0x122>
 8002d30:	2330      	movs	r3, #48	; 0x30
 8002d32:	3e01      	subs	r6, #1
 8002d34:	7033      	strb	r3, [r6, #0]
 8002d36:	9b04      	ldr	r3, [sp, #16]
 8002d38:	1b9b      	subs	r3, r3, r6
 8002d3a:	6123      	str	r3, [r4, #16]
 8002d3c:	9b07      	ldr	r3, [sp, #28]
 8002d3e:	0021      	movs	r1, r4
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	9805      	ldr	r0, [sp, #20]
 8002d44:	9b06      	ldr	r3, [sp, #24]
 8002d46:	aa09      	add	r2, sp, #36	; 0x24
 8002d48:	f7ff fef4 	bl	8002b34 <_printf_common>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d14c      	bne.n	8002dea <_printf_i+0x1d6>
 8002d50:	2001      	movs	r0, #1
 8002d52:	4240      	negs	r0, r0
 8002d54:	b00b      	add	sp, #44	; 0x2c
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d58:	3145      	adds	r1, #69	; 0x45
 8002d5a:	700a      	strb	r2, [r1, #0]
 8002d5c:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <_printf_i+0x21c>)
 8002d5e:	9203      	str	r2, [sp, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	6821      	ldr	r1, [r4, #0]
 8002d64:	ca20      	ldmia	r2!, {r5}
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	0608      	lsls	r0, r1, #24
 8002d6a:	d516      	bpl.n	8002d9a <_printf_i+0x186>
 8002d6c:	07cb      	lsls	r3, r1, #31
 8002d6e:	d502      	bpl.n	8002d76 <_printf_i+0x162>
 8002d70:	2320      	movs	r3, #32
 8002d72:	4319      	orrs	r1, r3
 8002d74:	6021      	str	r1, [r4, #0]
 8002d76:	2710      	movs	r7, #16
 8002d78:	2d00      	cmp	r5, #0
 8002d7a:	d1b2      	bne.n	8002ce2 <_printf_i+0xce>
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	439a      	bics	r2, r3
 8002d82:	6022      	str	r2, [r4, #0]
 8002d84:	e7ad      	b.n	8002ce2 <_printf_i+0xce>
 8002d86:	2220      	movs	r2, #32
 8002d88:	6809      	ldr	r1, [r1, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	6022      	str	r2, [r4, #0]
 8002d8e:	0022      	movs	r2, r4
 8002d90:	2178      	movs	r1, #120	; 0x78
 8002d92:	3245      	adds	r2, #69	; 0x45
 8002d94:	7011      	strb	r1, [r2, #0]
 8002d96:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <_printf_i+0x220>)
 8002d98:	e7e1      	b.n	8002d5e <_printf_i+0x14a>
 8002d9a:	0648      	lsls	r0, r1, #25
 8002d9c:	d5e6      	bpl.n	8002d6c <_printf_i+0x158>
 8002d9e:	b2ad      	uxth	r5, r5
 8002da0:	e7e4      	b.n	8002d6c <_printf_i+0x158>
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	680d      	ldr	r5, [r1, #0]
 8002da6:	1d10      	adds	r0, r2, #4
 8002da8:	6949      	ldr	r1, [r1, #20]
 8002daa:	6018      	str	r0, [r3, #0]
 8002dac:	6813      	ldr	r3, [r2, #0]
 8002dae:	062e      	lsls	r6, r5, #24
 8002db0:	d501      	bpl.n	8002db6 <_printf_i+0x1a2>
 8002db2:	6019      	str	r1, [r3, #0]
 8002db4:	e002      	b.n	8002dbc <_printf_i+0x1a8>
 8002db6:	066d      	lsls	r5, r5, #25
 8002db8:	d5fb      	bpl.n	8002db2 <_printf_i+0x19e>
 8002dba:	8019      	strh	r1, [r3, #0]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9e04      	ldr	r6, [sp, #16]
 8002dc0:	6123      	str	r3, [r4, #16]
 8002dc2:	e7bb      	b.n	8002d3c <_printf_i+0x128>
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	1d11      	adds	r1, r2, #4
 8002dc8:	6019      	str	r1, [r3, #0]
 8002dca:	6816      	ldr	r6, [r2, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	0030      	movs	r0, r6
 8002dd0:	6862      	ldr	r2, [r4, #4]
 8002dd2:	f000 fb57 	bl	8003484 <memchr>
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	d001      	beq.n	8002dde <_printf_i+0x1ca>
 8002dda:	1b80      	subs	r0, r0, r6
 8002ddc:	6060      	str	r0, [r4, #4]
 8002dde:	6863      	ldr	r3, [r4, #4]
 8002de0:	6123      	str	r3, [r4, #16]
 8002de2:	2300      	movs	r3, #0
 8002de4:	9a04      	ldr	r2, [sp, #16]
 8002de6:	7013      	strb	r3, [r2, #0]
 8002de8:	e7a8      	b.n	8002d3c <_printf_i+0x128>
 8002dea:	6923      	ldr	r3, [r4, #16]
 8002dec:	0032      	movs	r2, r6
 8002dee:	9906      	ldr	r1, [sp, #24]
 8002df0:	9805      	ldr	r0, [sp, #20]
 8002df2:	9d07      	ldr	r5, [sp, #28]
 8002df4:	47a8      	blx	r5
 8002df6:	1c43      	adds	r3, r0, #1
 8002df8:	d0aa      	beq.n	8002d50 <_printf_i+0x13c>
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	079b      	lsls	r3, r3, #30
 8002dfe:	d415      	bmi.n	8002e2c <_printf_i+0x218>
 8002e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e02:	68e0      	ldr	r0, [r4, #12]
 8002e04:	4298      	cmp	r0, r3
 8002e06:	daa5      	bge.n	8002d54 <_printf_i+0x140>
 8002e08:	0018      	movs	r0, r3
 8002e0a:	e7a3      	b.n	8002d54 <_printf_i+0x140>
 8002e0c:	0022      	movs	r2, r4
 8002e0e:	2301      	movs	r3, #1
 8002e10:	9906      	ldr	r1, [sp, #24]
 8002e12:	9805      	ldr	r0, [sp, #20]
 8002e14:	9e07      	ldr	r6, [sp, #28]
 8002e16:	3219      	adds	r2, #25
 8002e18:	47b0      	blx	r6
 8002e1a:	1c43      	adds	r3, r0, #1
 8002e1c:	d098      	beq.n	8002d50 <_printf_i+0x13c>
 8002e1e:	3501      	adds	r5, #1
 8002e20:	68e3      	ldr	r3, [r4, #12]
 8002e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	42ab      	cmp	r3, r5
 8002e28:	dcf0      	bgt.n	8002e0c <_printf_i+0x1f8>
 8002e2a:	e7e9      	b.n	8002e00 <_printf_i+0x1ec>
 8002e2c:	2500      	movs	r5, #0
 8002e2e:	e7f7      	b.n	8002e20 <_printf_i+0x20c>
 8002e30:	080043d9 	.word	0x080043d9
 8002e34:	080043ea 	.word	0x080043ea

08002e38 <_sbrk_r>:
 8002e38:	2300      	movs	r3, #0
 8002e3a:	b570      	push	{r4, r5, r6, lr}
 8002e3c:	4d06      	ldr	r5, [pc, #24]	; (8002e58 <_sbrk_r+0x20>)
 8002e3e:	0004      	movs	r4, r0
 8002e40:	0008      	movs	r0, r1
 8002e42:	602b      	str	r3, [r5, #0]
 8002e44:	f7fe fb6e 	bl	8001524 <_sbrk>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	d103      	bne.n	8002e54 <_sbrk_r+0x1c>
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d000      	beq.n	8002e54 <_sbrk_r+0x1c>
 8002e52:	6023      	str	r3, [r4, #0]
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	20000144 	.word	0x20000144

08002e5c <__swbuf_r>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	0005      	movs	r5, r0
 8002e60:	000e      	movs	r6, r1
 8002e62:	0014      	movs	r4, r2
 8002e64:	2800      	cmp	r0, #0
 8002e66:	d004      	beq.n	8002e72 <__swbuf_r+0x16>
 8002e68:	6983      	ldr	r3, [r0, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <__swbuf_r+0x16>
 8002e6e:	f000 f9f9 	bl	8003264 <__sinit>
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <__swbuf_r+0xa0>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d12e      	bne.n	8002ed6 <__swbuf_r+0x7a>
 8002e78:	686c      	ldr	r4, [r5, #4]
 8002e7a:	69a3      	ldr	r3, [r4, #24]
 8002e7c:	60a3      	str	r3, [r4, #8]
 8002e7e:	89a3      	ldrh	r3, [r4, #12]
 8002e80:	071b      	lsls	r3, r3, #28
 8002e82:	d532      	bpl.n	8002eea <__swbuf_r+0x8e>
 8002e84:	6923      	ldr	r3, [r4, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d02f      	beq.n	8002eea <__swbuf_r+0x8e>
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	6922      	ldr	r2, [r4, #16]
 8002e8e:	b2f7      	uxtb	r7, r6
 8002e90:	1a98      	subs	r0, r3, r2
 8002e92:	6963      	ldr	r3, [r4, #20]
 8002e94:	b2f6      	uxtb	r6, r6
 8002e96:	4283      	cmp	r3, r0
 8002e98:	dc05      	bgt.n	8002ea6 <__swbuf_r+0x4a>
 8002e9a:	0021      	movs	r1, r4
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	f000 f93f 	bl	8003120 <_fflush_r>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d127      	bne.n	8002ef6 <__swbuf_r+0x9a>
 8002ea6:	68a3      	ldr	r3, [r4, #8]
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	60a3      	str	r3, [r4, #8]
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	6022      	str	r2, [r4, #0]
 8002eb4:	701f      	strb	r7, [r3, #0]
 8002eb6:	6963      	ldr	r3, [r4, #20]
 8002eb8:	4283      	cmp	r3, r0
 8002eba:	d004      	beq.n	8002ec6 <__swbuf_r+0x6a>
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	07db      	lsls	r3, r3, #31
 8002ec0:	d507      	bpl.n	8002ed2 <__swbuf_r+0x76>
 8002ec2:	2e0a      	cmp	r6, #10
 8002ec4:	d105      	bne.n	8002ed2 <__swbuf_r+0x76>
 8002ec6:	0021      	movs	r1, r4
 8002ec8:	0028      	movs	r0, r5
 8002eca:	f000 f929 	bl	8003120 <_fflush_r>
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d111      	bne.n	8002ef6 <__swbuf_r+0x9a>
 8002ed2:	0030      	movs	r0, r6
 8002ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <__swbuf_r+0xa4>)
 8002ed8:	429c      	cmp	r4, r3
 8002eda:	d101      	bne.n	8002ee0 <__swbuf_r+0x84>
 8002edc:	68ac      	ldr	r4, [r5, #8]
 8002ede:	e7cc      	b.n	8002e7a <__swbuf_r+0x1e>
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <__swbuf_r+0xa8>)
 8002ee2:	429c      	cmp	r4, r3
 8002ee4:	d1c9      	bne.n	8002e7a <__swbuf_r+0x1e>
 8002ee6:	68ec      	ldr	r4, [r5, #12]
 8002ee8:	e7c7      	b.n	8002e7a <__swbuf_r+0x1e>
 8002eea:	0021      	movs	r1, r4
 8002eec:	0028      	movs	r0, r5
 8002eee:	f000 f80b 	bl	8002f08 <__swsetup_r>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d0c9      	beq.n	8002e8a <__swbuf_r+0x2e>
 8002ef6:	2601      	movs	r6, #1
 8002ef8:	4276      	negs	r6, r6
 8002efa:	e7ea      	b.n	8002ed2 <__swbuf_r+0x76>
 8002efc:	0800441c 	.word	0x0800441c
 8002f00:	0800443c 	.word	0x0800443c
 8002f04:	080043fc 	.word	0x080043fc

08002f08 <__swsetup_r>:
 8002f08:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <__swsetup_r+0xe0>)
 8002f0a:	b570      	push	{r4, r5, r6, lr}
 8002f0c:	681d      	ldr	r5, [r3, #0]
 8002f0e:	0006      	movs	r6, r0
 8002f10:	000c      	movs	r4, r1
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	d005      	beq.n	8002f22 <__swsetup_r+0x1a>
 8002f16:	69ab      	ldr	r3, [r5, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <__swsetup_r+0x1a>
 8002f1c:	0028      	movs	r0, r5
 8002f1e:	f000 f9a1 	bl	8003264 <__sinit>
 8002f22:	4b32      	ldr	r3, [pc, #200]	; (8002fec <__swsetup_r+0xe4>)
 8002f24:	429c      	cmp	r4, r3
 8002f26:	d10f      	bne.n	8002f48 <__swsetup_r+0x40>
 8002f28:	686c      	ldr	r4, [r5, #4]
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	5ee2      	ldrsh	r2, [r4, r3]
 8002f2e:	b293      	uxth	r3, r2
 8002f30:	0711      	lsls	r1, r2, #28
 8002f32:	d42d      	bmi.n	8002f90 <__swsetup_r+0x88>
 8002f34:	06d9      	lsls	r1, r3, #27
 8002f36:	d411      	bmi.n	8002f5c <__swsetup_r+0x54>
 8002f38:	2309      	movs	r3, #9
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	6033      	str	r3, [r6, #0]
 8002f3e:	3337      	adds	r3, #55	; 0x37
 8002f40:	4313      	orrs	r3, r2
 8002f42:	81a3      	strh	r3, [r4, #12]
 8002f44:	4240      	negs	r0, r0
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	4b29      	ldr	r3, [pc, #164]	; (8002ff0 <__swsetup_r+0xe8>)
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	d101      	bne.n	8002f52 <__swsetup_r+0x4a>
 8002f4e:	68ac      	ldr	r4, [r5, #8]
 8002f50:	e7eb      	b.n	8002f2a <__swsetup_r+0x22>
 8002f52:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <__swsetup_r+0xec>)
 8002f54:	429c      	cmp	r4, r3
 8002f56:	d1e8      	bne.n	8002f2a <__swsetup_r+0x22>
 8002f58:	68ec      	ldr	r4, [r5, #12]
 8002f5a:	e7e6      	b.n	8002f2a <__swsetup_r+0x22>
 8002f5c:	075b      	lsls	r3, r3, #29
 8002f5e:	d513      	bpl.n	8002f88 <__swsetup_r+0x80>
 8002f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f62:	2900      	cmp	r1, #0
 8002f64:	d008      	beq.n	8002f78 <__swsetup_r+0x70>
 8002f66:	0023      	movs	r3, r4
 8002f68:	3344      	adds	r3, #68	; 0x44
 8002f6a:	4299      	cmp	r1, r3
 8002f6c:	d002      	beq.n	8002f74 <__swsetup_r+0x6c>
 8002f6e:	0030      	movs	r0, r6
 8002f70:	f7ff fa3a 	bl	80023e8 <_free_r>
 8002f74:	2300      	movs	r3, #0
 8002f76:	6363      	str	r3, [r4, #52]	; 0x34
 8002f78:	2224      	movs	r2, #36	; 0x24
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	81a3      	strh	r3, [r4, #12]
 8002f80:	2300      	movs	r3, #0
 8002f82:	6063      	str	r3, [r4, #4]
 8002f84:	6923      	ldr	r3, [r4, #16]
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	2308      	movs	r3, #8
 8002f8a:	89a2      	ldrh	r2, [r4, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	81a3      	strh	r3, [r4, #12]
 8002f90:	6923      	ldr	r3, [r4, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <__swsetup_r+0xa6>
 8002f96:	21a0      	movs	r1, #160	; 0xa0
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	89a3      	ldrh	r3, [r4, #12]
 8002f9c:	0089      	lsls	r1, r1, #2
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d003      	beq.n	8002fae <__swsetup_r+0xa6>
 8002fa6:	0021      	movs	r1, r4
 8002fa8:	0030      	movs	r0, r6
 8002faa:	f000 fa27 	bl	80033fc <__smakebuf_r>
 8002fae:	220c      	movs	r2, #12
 8002fb0:	5ea3      	ldrsh	r3, [r4, r2]
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	b299      	uxth	r1, r3
 8002fb8:	4002      	ands	r2, r0
 8002fba:	4203      	tst	r3, r0
 8002fbc:	d00f      	beq.n	8002fde <__swsetup_r+0xd6>
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60a2      	str	r2, [r4, #8]
 8002fc2:	6962      	ldr	r2, [r4, #20]
 8002fc4:	4252      	negs	r2, r2
 8002fc6:	61a2      	str	r2, [r4, #24]
 8002fc8:	2000      	movs	r0, #0
 8002fca:	6922      	ldr	r2, [r4, #16]
 8002fcc:	4282      	cmp	r2, r0
 8002fce:	d1ba      	bne.n	8002f46 <__swsetup_r+0x3e>
 8002fd0:	060a      	lsls	r2, r1, #24
 8002fd2:	d5b8      	bpl.n	8002f46 <__swsetup_r+0x3e>
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	81a3      	strh	r3, [r4, #12]
 8002fda:	3801      	subs	r0, #1
 8002fdc:	e7b3      	b.n	8002f46 <__swsetup_r+0x3e>
 8002fde:	0788      	lsls	r0, r1, #30
 8002fe0:	d400      	bmi.n	8002fe4 <__swsetup_r+0xdc>
 8002fe2:	6962      	ldr	r2, [r4, #20]
 8002fe4:	60a2      	str	r2, [r4, #8]
 8002fe6:	e7ef      	b.n	8002fc8 <__swsetup_r+0xc0>
 8002fe8:	20000088 	.word	0x20000088
 8002fec:	0800441c 	.word	0x0800441c
 8002ff0:	0800443c 	.word	0x0800443c
 8002ff4:	080043fc 	.word	0x080043fc

08002ff8 <abort>:
 8002ff8:	2006      	movs	r0, #6
 8002ffa:	b510      	push	{r4, lr}
 8002ffc:	f000 fab8 	bl	8003570 <raise>
 8003000:	2001      	movs	r0, #1
 8003002:	f7fe fa1d 	bl	8001440 <_exit>
	...

08003008 <__sflush_r>:
 8003008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800300a:	898b      	ldrh	r3, [r1, #12]
 800300c:	0005      	movs	r5, r0
 800300e:	000c      	movs	r4, r1
 8003010:	071a      	lsls	r2, r3, #28
 8003012:	d45f      	bmi.n	80030d4 <__sflush_r+0xcc>
 8003014:	684a      	ldr	r2, [r1, #4]
 8003016:	2a00      	cmp	r2, #0
 8003018:	dc04      	bgt.n	8003024 <__sflush_r+0x1c>
 800301a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800301c:	2a00      	cmp	r2, #0
 800301e:	dc01      	bgt.n	8003024 <__sflush_r+0x1c>
 8003020:	2000      	movs	r0, #0
 8003022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003024:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003026:	2f00      	cmp	r7, #0
 8003028:	d0fa      	beq.n	8003020 <__sflush_r+0x18>
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	682e      	ldr	r6, [r5, #0]
 8003030:	602a      	str	r2, [r5, #0]
 8003032:	001a      	movs	r2, r3
 8003034:	0149      	lsls	r1, r1, #5
 8003036:	400a      	ands	r2, r1
 8003038:	420b      	tst	r3, r1
 800303a:	d034      	beq.n	80030a6 <__sflush_r+0x9e>
 800303c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	075b      	lsls	r3, r3, #29
 8003042:	d506      	bpl.n	8003052 <__sflush_r+0x4a>
 8003044:	6863      	ldr	r3, [r4, #4]
 8003046:	1ac0      	subs	r0, r0, r3
 8003048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <__sflush_r+0x4a>
 800304e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003050:	1ac0      	subs	r0, r0, r3
 8003052:	0002      	movs	r2, r0
 8003054:	6a21      	ldr	r1, [r4, #32]
 8003056:	2300      	movs	r3, #0
 8003058:	0028      	movs	r0, r5
 800305a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800305c:	47b8      	blx	r7
 800305e:	89a1      	ldrh	r1, [r4, #12]
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	d106      	bne.n	8003072 <__sflush_r+0x6a>
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	2b1d      	cmp	r3, #29
 8003068:	d831      	bhi.n	80030ce <__sflush_r+0xc6>
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <__sflush_r+0x114>)
 800306c:	40da      	lsrs	r2, r3
 800306e:	07d3      	lsls	r3, r2, #31
 8003070:	d52d      	bpl.n	80030ce <__sflush_r+0xc6>
 8003072:	2300      	movs	r3, #0
 8003074:	6063      	str	r3, [r4, #4]
 8003076:	6923      	ldr	r3, [r4, #16]
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	04cb      	lsls	r3, r1, #19
 800307c:	d505      	bpl.n	800308a <__sflush_r+0x82>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d102      	bne.n	8003088 <__sflush_r+0x80>
 8003082:	682b      	ldr	r3, [r5, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d100      	bne.n	800308a <__sflush_r+0x82>
 8003088:	6560      	str	r0, [r4, #84]	; 0x54
 800308a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800308c:	602e      	str	r6, [r5, #0]
 800308e:	2900      	cmp	r1, #0
 8003090:	d0c6      	beq.n	8003020 <__sflush_r+0x18>
 8003092:	0023      	movs	r3, r4
 8003094:	3344      	adds	r3, #68	; 0x44
 8003096:	4299      	cmp	r1, r3
 8003098:	d002      	beq.n	80030a0 <__sflush_r+0x98>
 800309a:	0028      	movs	r0, r5
 800309c:	f7ff f9a4 	bl	80023e8 <_free_r>
 80030a0:	2000      	movs	r0, #0
 80030a2:	6360      	str	r0, [r4, #52]	; 0x34
 80030a4:	e7bd      	b.n	8003022 <__sflush_r+0x1a>
 80030a6:	2301      	movs	r3, #1
 80030a8:	0028      	movs	r0, r5
 80030aa:	6a21      	ldr	r1, [r4, #32]
 80030ac:	47b8      	blx	r7
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	d1c5      	bne.n	800303e <__sflush_r+0x36>
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0c2      	beq.n	800303e <__sflush_r+0x36>
 80030b8:	2b1d      	cmp	r3, #29
 80030ba:	d001      	beq.n	80030c0 <__sflush_r+0xb8>
 80030bc:	2b16      	cmp	r3, #22
 80030be:	d101      	bne.n	80030c4 <__sflush_r+0xbc>
 80030c0:	602e      	str	r6, [r5, #0]
 80030c2:	e7ad      	b.n	8003020 <__sflush_r+0x18>
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	89a2      	ldrh	r2, [r4, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	81a3      	strh	r3, [r4, #12]
 80030cc:	e7a9      	b.n	8003022 <__sflush_r+0x1a>
 80030ce:	2340      	movs	r3, #64	; 0x40
 80030d0:	430b      	orrs	r3, r1
 80030d2:	e7fa      	b.n	80030ca <__sflush_r+0xc2>
 80030d4:	690f      	ldr	r7, [r1, #16]
 80030d6:	2f00      	cmp	r7, #0
 80030d8:	d0a2      	beq.n	8003020 <__sflush_r+0x18>
 80030da:	680a      	ldr	r2, [r1, #0]
 80030dc:	600f      	str	r7, [r1, #0]
 80030de:	1bd2      	subs	r2, r2, r7
 80030e0:	9201      	str	r2, [sp, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	079b      	lsls	r3, r3, #30
 80030e6:	d100      	bne.n	80030ea <__sflush_r+0xe2>
 80030e8:	694a      	ldr	r2, [r1, #20]
 80030ea:	60a2      	str	r2, [r4, #8]
 80030ec:	9b01      	ldr	r3, [sp, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	dc00      	bgt.n	80030f4 <__sflush_r+0xec>
 80030f2:	e795      	b.n	8003020 <__sflush_r+0x18>
 80030f4:	003a      	movs	r2, r7
 80030f6:	0028      	movs	r0, r5
 80030f8:	9b01      	ldr	r3, [sp, #4]
 80030fa:	6a21      	ldr	r1, [r4, #32]
 80030fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030fe:	47b0      	blx	r6
 8003100:	2800      	cmp	r0, #0
 8003102:	dc06      	bgt.n	8003112 <__sflush_r+0x10a>
 8003104:	2340      	movs	r3, #64	; 0x40
 8003106:	2001      	movs	r0, #1
 8003108:	89a2      	ldrh	r2, [r4, #12]
 800310a:	4240      	negs	r0, r0
 800310c:	4313      	orrs	r3, r2
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	e787      	b.n	8003022 <__sflush_r+0x1a>
 8003112:	9b01      	ldr	r3, [sp, #4]
 8003114:	183f      	adds	r7, r7, r0
 8003116:	1a1b      	subs	r3, r3, r0
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	e7e7      	b.n	80030ec <__sflush_r+0xe4>
 800311c:	20400001 	.word	0x20400001

08003120 <_fflush_r>:
 8003120:	690b      	ldr	r3, [r1, #16]
 8003122:	b570      	push	{r4, r5, r6, lr}
 8003124:	0005      	movs	r5, r0
 8003126:	000c      	movs	r4, r1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <_fflush_r+0x12>
 800312c:	2500      	movs	r5, #0
 800312e:	0028      	movs	r0, r5
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	2800      	cmp	r0, #0
 8003134:	d004      	beq.n	8003140 <_fflush_r+0x20>
 8003136:	6983      	ldr	r3, [r0, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <_fflush_r+0x20>
 800313c:	f000 f892 	bl	8003264 <__sinit>
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <_fflush_r+0x74>)
 8003142:	429c      	cmp	r4, r3
 8003144:	d11b      	bne.n	800317e <_fflush_r+0x5e>
 8003146:	686c      	ldr	r4, [r5, #4]
 8003148:	220c      	movs	r2, #12
 800314a:	5ea3      	ldrsh	r3, [r4, r2]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ed      	beq.n	800312c <_fflush_r+0xc>
 8003150:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003152:	07d2      	lsls	r2, r2, #31
 8003154:	d404      	bmi.n	8003160 <_fflush_r+0x40>
 8003156:	059b      	lsls	r3, r3, #22
 8003158:	d402      	bmi.n	8003160 <_fflush_r+0x40>
 800315a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315c:	f000 f923 	bl	80033a6 <__retarget_lock_acquire_recursive>
 8003160:	0028      	movs	r0, r5
 8003162:	0021      	movs	r1, r4
 8003164:	f7ff ff50 	bl	8003008 <__sflush_r>
 8003168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316a:	0005      	movs	r5, r0
 800316c:	07db      	lsls	r3, r3, #31
 800316e:	d4de      	bmi.n	800312e <_fflush_r+0xe>
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	059b      	lsls	r3, r3, #22
 8003174:	d4db      	bmi.n	800312e <_fflush_r+0xe>
 8003176:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003178:	f000 f916 	bl	80033a8 <__retarget_lock_release_recursive>
 800317c:	e7d7      	b.n	800312e <_fflush_r+0xe>
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <_fflush_r+0x78>)
 8003180:	429c      	cmp	r4, r3
 8003182:	d101      	bne.n	8003188 <_fflush_r+0x68>
 8003184:	68ac      	ldr	r4, [r5, #8]
 8003186:	e7df      	b.n	8003148 <_fflush_r+0x28>
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <_fflush_r+0x7c>)
 800318a:	429c      	cmp	r4, r3
 800318c:	d1dc      	bne.n	8003148 <_fflush_r+0x28>
 800318e:	68ec      	ldr	r4, [r5, #12]
 8003190:	e7da      	b.n	8003148 <_fflush_r+0x28>
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	0800441c 	.word	0x0800441c
 8003198:	0800443c 	.word	0x0800443c
 800319c:	080043fc 	.word	0x080043fc

080031a0 <std>:
 80031a0:	2300      	movs	r3, #0
 80031a2:	b510      	push	{r4, lr}
 80031a4:	0004      	movs	r4, r0
 80031a6:	6003      	str	r3, [r0, #0]
 80031a8:	6043      	str	r3, [r0, #4]
 80031aa:	6083      	str	r3, [r0, #8]
 80031ac:	8181      	strh	r1, [r0, #12]
 80031ae:	6643      	str	r3, [r0, #100]	; 0x64
 80031b0:	0019      	movs	r1, r3
 80031b2:	81c2      	strh	r2, [r0, #14]
 80031b4:	6103      	str	r3, [r0, #16]
 80031b6:	6143      	str	r3, [r0, #20]
 80031b8:	6183      	str	r3, [r0, #24]
 80031ba:	2208      	movs	r2, #8
 80031bc:	305c      	adds	r0, #92	; 0x5c
 80031be:	f7ff f841 	bl	8002244 <memset>
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <std+0x38>)
 80031c4:	6224      	str	r4, [r4, #32]
 80031c6:	6263      	str	r3, [r4, #36]	; 0x24
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <std+0x3c>)
 80031ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <std+0x40>)
 80031ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <std+0x44>)
 80031d2:	6323      	str	r3, [r4, #48]	; 0x30
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	080035b1 	.word	0x080035b1
 80031dc:	080035d9 	.word	0x080035d9
 80031e0:	08003611 	.word	0x08003611
 80031e4:	0800363d 	.word	0x0800363d

080031e8 <_cleanup_r>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4902      	ldr	r1, [pc, #8]	; (80031f4 <_cleanup_r+0xc>)
 80031ec:	f000 f8ba 	bl	8003364 <_fwalk_reent>
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	08003121 	.word	0x08003121

080031f8 <__sfmoreglue>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	2568      	movs	r5, #104	; 0x68
 80031fc:	1e4a      	subs	r2, r1, #1
 80031fe:	4355      	muls	r5, r2
 8003200:	000e      	movs	r6, r1
 8003202:	0029      	movs	r1, r5
 8003204:	3174      	adds	r1, #116	; 0x74
 8003206:	f7ff f95b 	bl	80024c0 <_malloc_r>
 800320a:	1e04      	subs	r4, r0, #0
 800320c:	d008      	beq.n	8003220 <__sfmoreglue+0x28>
 800320e:	2100      	movs	r1, #0
 8003210:	002a      	movs	r2, r5
 8003212:	6001      	str	r1, [r0, #0]
 8003214:	6046      	str	r6, [r0, #4]
 8003216:	300c      	adds	r0, #12
 8003218:	60a0      	str	r0, [r4, #8]
 800321a:	3268      	adds	r2, #104	; 0x68
 800321c:	f7ff f812 	bl	8002244 <memset>
 8003220:	0020      	movs	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}

08003224 <__sfp_lock_acquire>:
 8003224:	b510      	push	{r4, lr}
 8003226:	4802      	ldr	r0, [pc, #8]	; (8003230 <__sfp_lock_acquire+0xc>)
 8003228:	f000 f8bd 	bl	80033a6 <__retarget_lock_acquire_recursive>
 800322c:	bd10      	pop	{r4, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	20000141 	.word	0x20000141

08003234 <__sfp_lock_release>:
 8003234:	b510      	push	{r4, lr}
 8003236:	4802      	ldr	r0, [pc, #8]	; (8003240 <__sfp_lock_release+0xc>)
 8003238:	f000 f8b6 	bl	80033a8 <__retarget_lock_release_recursive>
 800323c:	bd10      	pop	{r4, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000141 	.word	0x20000141

08003244 <__sinit_lock_acquire>:
 8003244:	b510      	push	{r4, lr}
 8003246:	4802      	ldr	r0, [pc, #8]	; (8003250 <__sinit_lock_acquire+0xc>)
 8003248:	f000 f8ad 	bl	80033a6 <__retarget_lock_acquire_recursive>
 800324c:	bd10      	pop	{r4, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	20000142 	.word	0x20000142

08003254 <__sinit_lock_release>:
 8003254:	b510      	push	{r4, lr}
 8003256:	4802      	ldr	r0, [pc, #8]	; (8003260 <__sinit_lock_release+0xc>)
 8003258:	f000 f8a6 	bl	80033a8 <__retarget_lock_release_recursive>
 800325c:	bd10      	pop	{r4, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	20000142 	.word	0x20000142

08003264 <__sinit>:
 8003264:	b513      	push	{r0, r1, r4, lr}
 8003266:	0004      	movs	r4, r0
 8003268:	f7ff ffec 	bl	8003244 <__sinit_lock_acquire>
 800326c:	69a3      	ldr	r3, [r4, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <__sinit+0x14>
 8003272:	f7ff ffef 	bl	8003254 <__sinit_lock_release>
 8003276:	bd13      	pop	{r0, r1, r4, pc}
 8003278:	64a3      	str	r3, [r4, #72]	; 0x48
 800327a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800327c:	6523      	str	r3, [r4, #80]	; 0x50
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <__sinit+0x68>)
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <__sinit+0x6c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	62a2      	str	r2, [r4, #40]	; 0x28
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	42a3      	cmp	r3, r4
 800328a:	d101      	bne.n	8003290 <__sinit+0x2c>
 800328c:	2301      	movs	r3, #1
 800328e:	61a3      	str	r3, [r4, #24]
 8003290:	0020      	movs	r0, r4
 8003292:	f000 f81f 	bl	80032d4 <__sfp>
 8003296:	6060      	str	r0, [r4, #4]
 8003298:	0020      	movs	r0, r4
 800329a:	f000 f81b 	bl	80032d4 <__sfp>
 800329e:	60a0      	str	r0, [r4, #8]
 80032a0:	0020      	movs	r0, r4
 80032a2:	f000 f817 	bl	80032d4 <__sfp>
 80032a6:	2200      	movs	r2, #0
 80032a8:	2104      	movs	r1, #4
 80032aa:	60e0      	str	r0, [r4, #12]
 80032ac:	6860      	ldr	r0, [r4, #4]
 80032ae:	f7ff ff77 	bl	80031a0 <std>
 80032b2:	2201      	movs	r2, #1
 80032b4:	2109      	movs	r1, #9
 80032b6:	68a0      	ldr	r0, [r4, #8]
 80032b8:	f7ff ff72 	bl	80031a0 <std>
 80032bc:	2202      	movs	r2, #2
 80032be:	2112      	movs	r1, #18
 80032c0:	68e0      	ldr	r0, [r4, #12]
 80032c2:	f7ff ff6d 	bl	80031a0 <std>
 80032c6:	2301      	movs	r3, #1
 80032c8:	61a3      	str	r3, [r4, #24]
 80032ca:	e7d2      	b.n	8003272 <__sinit+0xe>
 80032cc:	08004314 	.word	0x08004314
 80032d0:	080031e9 	.word	0x080031e9

080032d4 <__sfp>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	0007      	movs	r7, r0
 80032d8:	f7ff ffa4 	bl	8003224 <__sfp_lock_acquire>
 80032dc:	4b1f      	ldr	r3, [pc, #124]	; (800335c <__sfp+0x88>)
 80032de:	681e      	ldr	r6, [r3, #0]
 80032e0:	69b3      	ldr	r3, [r6, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <__sfp+0x18>
 80032e6:	0030      	movs	r0, r6
 80032e8:	f7ff ffbc 	bl	8003264 <__sinit>
 80032ec:	3648      	adds	r6, #72	; 0x48
 80032ee:	68b4      	ldr	r4, [r6, #8]
 80032f0:	6873      	ldr	r3, [r6, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	d504      	bpl.n	8003300 <__sfp+0x2c>
 80032f6:	6833      	ldr	r3, [r6, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d022      	beq.n	8003342 <__sfp+0x6e>
 80032fc:	6836      	ldr	r6, [r6, #0]
 80032fe:	e7f6      	b.n	80032ee <__sfp+0x1a>
 8003300:	220c      	movs	r2, #12
 8003302:	5ea5      	ldrsh	r5, [r4, r2]
 8003304:	2d00      	cmp	r5, #0
 8003306:	d11a      	bne.n	800333e <__sfp+0x6a>
 8003308:	0020      	movs	r0, r4
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <__sfp+0x8c>)
 800330c:	3058      	adds	r0, #88	; 0x58
 800330e:	60e3      	str	r3, [r4, #12]
 8003310:	6665      	str	r5, [r4, #100]	; 0x64
 8003312:	f000 f847 	bl	80033a4 <__retarget_lock_init_recursive>
 8003316:	f7ff ff8d 	bl	8003234 <__sfp_lock_release>
 800331a:	0020      	movs	r0, r4
 800331c:	2208      	movs	r2, #8
 800331e:	0029      	movs	r1, r5
 8003320:	6025      	str	r5, [r4, #0]
 8003322:	60a5      	str	r5, [r4, #8]
 8003324:	6065      	str	r5, [r4, #4]
 8003326:	6125      	str	r5, [r4, #16]
 8003328:	6165      	str	r5, [r4, #20]
 800332a:	61a5      	str	r5, [r4, #24]
 800332c:	305c      	adds	r0, #92	; 0x5c
 800332e:	f7fe ff89 	bl	8002244 <memset>
 8003332:	6365      	str	r5, [r4, #52]	; 0x34
 8003334:	63a5      	str	r5, [r4, #56]	; 0x38
 8003336:	64a5      	str	r5, [r4, #72]	; 0x48
 8003338:	64e5      	str	r5, [r4, #76]	; 0x4c
 800333a:	0020      	movs	r0, r4
 800333c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333e:	3468      	adds	r4, #104	; 0x68
 8003340:	e7d7      	b.n	80032f2 <__sfp+0x1e>
 8003342:	2104      	movs	r1, #4
 8003344:	0038      	movs	r0, r7
 8003346:	f7ff ff57 	bl	80031f8 <__sfmoreglue>
 800334a:	1e04      	subs	r4, r0, #0
 800334c:	6030      	str	r0, [r6, #0]
 800334e:	d1d5      	bne.n	80032fc <__sfp+0x28>
 8003350:	f7ff ff70 	bl	8003234 <__sfp_lock_release>
 8003354:	230c      	movs	r3, #12
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	e7ef      	b.n	800333a <__sfp+0x66>
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	08004314 	.word	0x08004314
 8003360:	ffff0001 	.word	0xffff0001

08003364 <_fwalk_reent>:
 8003364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003366:	0004      	movs	r4, r0
 8003368:	0006      	movs	r6, r0
 800336a:	2700      	movs	r7, #0
 800336c:	9101      	str	r1, [sp, #4]
 800336e:	3448      	adds	r4, #72	; 0x48
 8003370:	6863      	ldr	r3, [r4, #4]
 8003372:	68a5      	ldr	r5, [r4, #8]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	9b00      	ldr	r3, [sp, #0]
 8003378:	3b01      	subs	r3, #1
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	d504      	bpl.n	8003388 <_fwalk_reent+0x24>
 800337e:	6824      	ldr	r4, [r4, #0]
 8003380:	2c00      	cmp	r4, #0
 8003382:	d1f5      	bne.n	8003370 <_fwalk_reent+0xc>
 8003384:	0038      	movs	r0, r7
 8003386:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003388:	89ab      	ldrh	r3, [r5, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d908      	bls.n	80033a0 <_fwalk_reent+0x3c>
 800338e:	220e      	movs	r2, #14
 8003390:	5eab      	ldrsh	r3, [r5, r2]
 8003392:	3301      	adds	r3, #1
 8003394:	d004      	beq.n	80033a0 <_fwalk_reent+0x3c>
 8003396:	0029      	movs	r1, r5
 8003398:	0030      	movs	r0, r6
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	4798      	blx	r3
 800339e:	4307      	orrs	r7, r0
 80033a0:	3568      	adds	r5, #104	; 0x68
 80033a2:	e7e8      	b.n	8003376 <_fwalk_reent+0x12>

080033a4 <__retarget_lock_init_recursive>:
 80033a4:	4770      	bx	lr

080033a6 <__retarget_lock_acquire_recursive>:
 80033a6:	4770      	bx	lr

080033a8 <__retarget_lock_release_recursive>:
 80033a8:	4770      	bx	lr
	...

080033ac <__swhatbuf_r>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	000e      	movs	r6, r1
 80033b0:	001d      	movs	r5, r3
 80033b2:	230e      	movs	r3, #14
 80033b4:	5ec9      	ldrsh	r1, [r1, r3]
 80033b6:	0014      	movs	r4, r2
 80033b8:	b096      	sub	sp, #88	; 0x58
 80033ba:	2900      	cmp	r1, #0
 80033bc:	da08      	bge.n	80033d0 <__swhatbuf_r+0x24>
 80033be:	220c      	movs	r2, #12
 80033c0:	5eb3      	ldrsh	r3, [r6, r2]
 80033c2:	2200      	movs	r2, #0
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	d411      	bmi.n	80033ee <__swhatbuf_r+0x42>
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	e00f      	b.n	80033f0 <__swhatbuf_r+0x44>
 80033d0:	466a      	mov	r2, sp
 80033d2:	f000 f95f 	bl	8003694 <_fstat_r>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	dbf1      	blt.n	80033be <__swhatbuf_r+0x12>
 80033da:	23f0      	movs	r3, #240	; 0xf0
 80033dc:	9901      	ldr	r1, [sp, #4]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4019      	ands	r1, r3
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <__swhatbuf_r+0x4c>)
 80033e4:	18c9      	adds	r1, r1, r3
 80033e6:	424b      	negs	r3, r1
 80033e8:	4159      	adcs	r1, r3
 80033ea:	6029      	str	r1, [r5, #0]
 80033ec:	e7ed      	b.n	80033ca <__swhatbuf_r+0x1e>
 80033ee:	2340      	movs	r3, #64	; 0x40
 80033f0:	2000      	movs	r0, #0
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	b016      	add	sp, #88	; 0x58
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
 80033f8:	ffffe000 	.word	0xffffe000

080033fc <__smakebuf_r>:
 80033fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033fe:	2602      	movs	r6, #2
 8003400:	898b      	ldrh	r3, [r1, #12]
 8003402:	0005      	movs	r5, r0
 8003404:	000c      	movs	r4, r1
 8003406:	4233      	tst	r3, r6
 8003408:	d006      	beq.n	8003418 <__smakebuf_r+0x1c>
 800340a:	0023      	movs	r3, r4
 800340c:	3347      	adds	r3, #71	; 0x47
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	6123      	str	r3, [r4, #16]
 8003412:	2301      	movs	r3, #1
 8003414:	6163      	str	r3, [r4, #20]
 8003416:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003418:	466a      	mov	r2, sp
 800341a:	ab01      	add	r3, sp, #4
 800341c:	f7ff ffc6 	bl	80033ac <__swhatbuf_r>
 8003420:	9900      	ldr	r1, [sp, #0]
 8003422:	0007      	movs	r7, r0
 8003424:	0028      	movs	r0, r5
 8003426:	f7ff f84b 	bl	80024c0 <_malloc_r>
 800342a:	2800      	cmp	r0, #0
 800342c:	d108      	bne.n	8003440 <__smakebuf_r+0x44>
 800342e:	220c      	movs	r2, #12
 8003430:	5ea3      	ldrsh	r3, [r4, r2]
 8003432:	059a      	lsls	r2, r3, #22
 8003434:	d4ef      	bmi.n	8003416 <__smakebuf_r+0x1a>
 8003436:	2203      	movs	r2, #3
 8003438:	4393      	bics	r3, r2
 800343a:	431e      	orrs	r6, r3
 800343c:	81a6      	strh	r6, [r4, #12]
 800343e:	e7e4      	b.n	800340a <__smakebuf_r+0xe>
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <__smakebuf_r+0x84>)
 8003442:	62ab      	str	r3, [r5, #40]	; 0x28
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	89a2      	ldrh	r2, [r4, #12]
 8003448:	6020      	str	r0, [r4, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	9b00      	ldr	r3, [sp, #0]
 8003450:	6120      	str	r0, [r4, #16]
 8003452:	6163      	str	r3, [r4, #20]
 8003454:	9b01      	ldr	r3, [sp, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <__smakebuf_r+0x7a>
 800345a:	0028      	movs	r0, r5
 800345c:	230e      	movs	r3, #14
 800345e:	5ee1      	ldrsh	r1, [r4, r3]
 8003460:	f000 f92a 	bl	80036b8 <_isatty_r>
 8003464:	2800      	cmp	r0, #0
 8003466:	d006      	beq.n	8003476 <__smakebuf_r+0x7a>
 8003468:	2203      	movs	r2, #3
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	4393      	bics	r3, r2
 800346e:	001a      	movs	r2, r3
 8003470:	2301      	movs	r3, #1
 8003472:	4313      	orrs	r3, r2
 8003474:	81a3      	strh	r3, [r4, #12]
 8003476:	89a0      	ldrh	r0, [r4, #12]
 8003478:	4307      	orrs	r7, r0
 800347a:	81a7      	strh	r7, [r4, #12]
 800347c:	e7cb      	b.n	8003416 <__smakebuf_r+0x1a>
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	080031e9 	.word	0x080031e9

08003484 <memchr>:
 8003484:	b2c9      	uxtb	r1, r1
 8003486:	1882      	adds	r2, r0, r2
 8003488:	4290      	cmp	r0, r2
 800348a:	d101      	bne.n	8003490 <memchr+0xc>
 800348c:	2000      	movs	r0, #0
 800348e:	4770      	bx	lr
 8003490:	7803      	ldrb	r3, [r0, #0]
 8003492:	428b      	cmp	r3, r1
 8003494:	d0fb      	beq.n	800348e <memchr+0xa>
 8003496:	3001      	adds	r0, #1
 8003498:	e7f6      	b.n	8003488 <memchr+0x4>
	...

0800349c <__malloc_lock>:
 800349c:	b510      	push	{r4, lr}
 800349e:	4802      	ldr	r0, [pc, #8]	; (80034a8 <__malloc_lock+0xc>)
 80034a0:	f7ff ff81 	bl	80033a6 <__retarget_lock_acquire_recursive>
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	20000140 	.word	0x20000140

080034ac <__malloc_unlock>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	4802      	ldr	r0, [pc, #8]	; (80034b8 <__malloc_unlock+0xc>)
 80034b0:	f7ff ff7a 	bl	80033a8 <__retarget_lock_release_recursive>
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	20000140 	.word	0x20000140

080034bc <_realloc_r>:
 80034bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034be:	0007      	movs	r7, r0
 80034c0:	000e      	movs	r6, r1
 80034c2:	0014      	movs	r4, r2
 80034c4:	2900      	cmp	r1, #0
 80034c6:	d105      	bne.n	80034d4 <_realloc_r+0x18>
 80034c8:	0011      	movs	r1, r2
 80034ca:	f7fe fff9 	bl	80024c0 <_malloc_r>
 80034ce:	0005      	movs	r5, r0
 80034d0:	0028      	movs	r0, r5
 80034d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d103      	bne.n	80034e0 <_realloc_r+0x24>
 80034d8:	f7fe ff86 	bl	80023e8 <_free_r>
 80034dc:	0025      	movs	r5, r4
 80034de:	e7f7      	b.n	80034d0 <_realloc_r+0x14>
 80034e0:	f000 f910 	bl	8003704 <_malloc_usable_size_r>
 80034e4:	9001      	str	r0, [sp, #4]
 80034e6:	4284      	cmp	r4, r0
 80034e8:	d803      	bhi.n	80034f2 <_realloc_r+0x36>
 80034ea:	0035      	movs	r5, r6
 80034ec:	0843      	lsrs	r3, r0, #1
 80034ee:	42a3      	cmp	r3, r4
 80034f0:	d3ee      	bcc.n	80034d0 <_realloc_r+0x14>
 80034f2:	0021      	movs	r1, r4
 80034f4:	0038      	movs	r0, r7
 80034f6:	f7fe ffe3 	bl	80024c0 <_malloc_r>
 80034fa:	1e05      	subs	r5, r0, #0
 80034fc:	d0e8      	beq.n	80034d0 <_realloc_r+0x14>
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	0022      	movs	r2, r4
 8003502:	429c      	cmp	r4, r3
 8003504:	d900      	bls.n	8003508 <_realloc_r+0x4c>
 8003506:	001a      	movs	r2, r3
 8003508:	0031      	movs	r1, r6
 800350a:	0028      	movs	r0, r5
 800350c:	f7fe fe7e 	bl	800220c <memcpy>
 8003510:	0031      	movs	r1, r6
 8003512:	0038      	movs	r0, r7
 8003514:	f7fe ff68 	bl	80023e8 <_free_r>
 8003518:	e7da      	b.n	80034d0 <_realloc_r+0x14>

0800351a <_raise_r>:
 800351a:	b570      	push	{r4, r5, r6, lr}
 800351c:	0004      	movs	r4, r0
 800351e:	000d      	movs	r5, r1
 8003520:	291f      	cmp	r1, #31
 8003522:	d904      	bls.n	800352e <_raise_r+0x14>
 8003524:	2316      	movs	r3, #22
 8003526:	6003      	str	r3, [r0, #0]
 8003528:	2001      	movs	r0, #1
 800352a:	4240      	negs	r0, r0
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <_raise_r+0x24>
 8003534:	008a      	lsls	r2, r1, #2
 8003536:	189b      	adds	r3, r3, r2
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	2a00      	cmp	r2, #0
 800353c:	d108      	bne.n	8003550 <_raise_r+0x36>
 800353e:	0020      	movs	r0, r4
 8003540:	f000 f832 	bl	80035a8 <_getpid_r>
 8003544:	002a      	movs	r2, r5
 8003546:	0001      	movs	r1, r0
 8003548:	0020      	movs	r0, r4
 800354a:	f000 f81b 	bl	8003584 <_kill_r>
 800354e:	e7ed      	b.n	800352c <_raise_r+0x12>
 8003550:	2000      	movs	r0, #0
 8003552:	2a01      	cmp	r2, #1
 8003554:	d0ea      	beq.n	800352c <_raise_r+0x12>
 8003556:	1c51      	adds	r1, r2, #1
 8003558:	d103      	bne.n	8003562 <_raise_r+0x48>
 800355a:	2316      	movs	r3, #22
 800355c:	3001      	adds	r0, #1
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	e7e4      	b.n	800352c <_raise_r+0x12>
 8003562:	2400      	movs	r4, #0
 8003564:	0028      	movs	r0, r5
 8003566:	601c      	str	r4, [r3, #0]
 8003568:	4790      	blx	r2
 800356a:	0020      	movs	r0, r4
 800356c:	e7de      	b.n	800352c <_raise_r+0x12>
	...

08003570 <raise>:
 8003570:	b510      	push	{r4, lr}
 8003572:	4b03      	ldr	r3, [pc, #12]	; (8003580 <raise+0x10>)
 8003574:	0001      	movs	r1, r0
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	f7ff ffcf 	bl	800351a <_raise_r>
 800357c:	bd10      	pop	{r4, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	20000088 	.word	0x20000088

08003584 <_kill_r>:
 8003584:	2300      	movs	r3, #0
 8003586:	b570      	push	{r4, r5, r6, lr}
 8003588:	4d06      	ldr	r5, [pc, #24]	; (80035a4 <_kill_r+0x20>)
 800358a:	0004      	movs	r4, r0
 800358c:	0008      	movs	r0, r1
 800358e:	0011      	movs	r1, r2
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	f7fd ff45 	bl	8001420 <_kill>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	d103      	bne.n	80035a2 <_kill_r+0x1e>
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d000      	beq.n	80035a2 <_kill_r+0x1e>
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	20000144 	.word	0x20000144

080035a8 <_getpid_r>:
 80035a8:	b510      	push	{r4, lr}
 80035aa:	f7fd ff33 	bl	8001414 <_getpid>
 80035ae:	bd10      	pop	{r4, pc}

080035b0 <__sread>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	000c      	movs	r4, r1
 80035b4:	250e      	movs	r5, #14
 80035b6:	5f49      	ldrsh	r1, [r1, r5]
 80035b8:	f000 f8ac 	bl	8003714 <_read_r>
 80035bc:	2800      	cmp	r0, #0
 80035be:	db03      	blt.n	80035c8 <__sread+0x18>
 80035c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035c2:	181b      	adds	r3, r3, r0
 80035c4:	6563      	str	r3, [r4, #84]	; 0x54
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	4a02      	ldr	r2, [pc, #8]	; (80035d4 <__sread+0x24>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	e7f9      	b.n	80035c6 <__sread+0x16>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	ffffefff 	.word	0xffffefff

080035d8 <__swrite>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	001f      	movs	r7, r3
 80035dc:	898b      	ldrh	r3, [r1, #12]
 80035de:	0005      	movs	r5, r0
 80035e0:	000c      	movs	r4, r1
 80035e2:	0016      	movs	r6, r2
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	d505      	bpl.n	80035f4 <__swrite+0x1c>
 80035e8:	230e      	movs	r3, #14
 80035ea:	5ec9      	ldrsh	r1, [r1, r3]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2302      	movs	r3, #2
 80035f0:	f000 f874 	bl	80036dc <_lseek_r>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	4a05      	ldr	r2, [pc, #20]	; (800360c <__swrite+0x34>)
 80035f8:	0028      	movs	r0, r5
 80035fa:	4013      	ands	r3, r2
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	0032      	movs	r2, r6
 8003600:	230e      	movs	r3, #14
 8003602:	5ee1      	ldrsh	r1, [r4, r3]
 8003604:	003b      	movs	r3, r7
 8003606:	f000 f81f 	bl	8003648 <_write_r>
 800360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360c:	ffffefff 	.word	0xffffefff

08003610 <__sseek>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	000c      	movs	r4, r1
 8003614:	250e      	movs	r5, #14
 8003616:	5f49      	ldrsh	r1, [r1, r5]
 8003618:	f000 f860 	bl	80036dc <_lseek_r>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	1c42      	adds	r2, r0, #1
 8003620:	d103      	bne.n	800362a <__sseek+0x1a>
 8003622:	4a05      	ldr	r2, [pc, #20]	; (8003638 <__sseek+0x28>)
 8003624:	4013      	ands	r3, r2
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	0152      	lsls	r2, r2, #5
 800362e:	4313      	orrs	r3, r2
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	6560      	str	r0, [r4, #84]	; 0x54
 8003634:	e7f8      	b.n	8003628 <__sseek+0x18>
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	ffffefff 	.word	0xffffefff

0800363c <__sclose>:
 800363c:	b510      	push	{r4, lr}
 800363e:	230e      	movs	r3, #14
 8003640:	5ec9      	ldrsh	r1, [r1, r3]
 8003642:	f000 f815 	bl	8003670 <_close_r>
 8003646:	bd10      	pop	{r4, pc}

08003648 <_write_r>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	0004      	movs	r4, r0
 800364c:	0008      	movs	r0, r1
 800364e:	0011      	movs	r1, r2
 8003650:	001a      	movs	r2, r3
 8003652:	2300      	movs	r3, #0
 8003654:	4d05      	ldr	r5, [pc, #20]	; (800366c <_write_r+0x24>)
 8003656:	602b      	str	r3, [r5, #0]
 8003658:	f7fd ff1b 	bl	8001492 <_write>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d103      	bne.n	8003668 <_write_r+0x20>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d000      	beq.n	8003668 <_write_r+0x20>
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	bd70      	pop	{r4, r5, r6, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	20000144 	.word	0x20000144

08003670 <_close_r>:
 8003670:	2300      	movs	r3, #0
 8003672:	b570      	push	{r4, r5, r6, lr}
 8003674:	4d06      	ldr	r5, [pc, #24]	; (8003690 <_close_r+0x20>)
 8003676:	0004      	movs	r4, r0
 8003678:	0008      	movs	r0, r1
 800367a:	602b      	str	r3, [r5, #0]
 800367c:	f7fd ff25 	bl	80014ca <_close>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d103      	bne.n	800368c <_close_r+0x1c>
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d000      	beq.n	800368c <_close_r+0x1c>
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	bd70      	pop	{r4, r5, r6, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	20000144 	.word	0x20000144

08003694 <_fstat_r>:
 8003694:	2300      	movs	r3, #0
 8003696:	b570      	push	{r4, r5, r6, lr}
 8003698:	4d06      	ldr	r5, [pc, #24]	; (80036b4 <_fstat_r+0x20>)
 800369a:	0004      	movs	r4, r0
 800369c:	0008      	movs	r0, r1
 800369e:	0011      	movs	r1, r2
 80036a0:	602b      	str	r3, [r5, #0]
 80036a2:	f7fd ff1c 	bl	80014de <_fstat>
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d103      	bne.n	80036b2 <_fstat_r+0x1e>
 80036aa:	682b      	ldr	r3, [r5, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d000      	beq.n	80036b2 <_fstat_r+0x1e>
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	20000144 	.word	0x20000144

080036b8 <_isatty_r>:
 80036b8:	2300      	movs	r3, #0
 80036ba:	b570      	push	{r4, r5, r6, lr}
 80036bc:	4d06      	ldr	r5, [pc, #24]	; (80036d8 <_isatty_r+0x20>)
 80036be:	0004      	movs	r4, r0
 80036c0:	0008      	movs	r0, r1
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	f7fd ff19 	bl	80014fa <_isatty>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d103      	bne.n	80036d4 <_isatty_r+0x1c>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d000      	beq.n	80036d4 <_isatty_r+0x1c>
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000144 	.word	0x20000144

080036dc <_lseek_r>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	0004      	movs	r4, r0
 80036e0:	0008      	movs	r0, r1
 80036e2:	0011      	movs	r1, r2
 80036e4:	001a      	movs	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	4d05      	ldr	r5, [pc, #20]	; (8003700 <_lseek_r+0x24>)
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7fd ff0e 	bl	800150c <_lseek>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d103      	bne.n	80036fc <_lseek_r+0x20>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d000      	beq.n	80036fc <_lseek_r+0x20>
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000144 	.word	0x20000144

08003704 <_malloc_usable_size_r>:
 8003704:	1f0b      	subs	r3, r1, #4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1f18      	subs	r0, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	da01      	bge.n	8003712 <_malloc_usable_size_r+0xe>
 800370e:	580b      	ldr	r3, [r1, r0]
 8003710:	18c0      	adds	r0, r0, r3
 8003712:	4770      	bx	lr

08003714 <_read_r>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	0004      	movs	r4, r0
 8003718:	0008      	movs	r0, r1
 800371a:	0011      	movs	r1, r2
 800371c:	001a      	movs	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	4d05      	ldr	r5, [pc, #20]	; (8003738 <_read_r+0x24>)
 8003722:	602b      	str	r3, [r5, #0]
 8003724:	f7fd fe98 	bl	8001458 <_read>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d103      	bne.n	8003734 <_read_r+0x20>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d000      	beq.n	8003734 <_read_r+0x20>
 8003732:	6023      	str	r3, [r4, #0]
 8003734:	bd70      	pop	{r4, r5, r6, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	20000144 	.word	0x20000144

0800373c <_init>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr

08003748 <_fini>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr
