
metaporter-mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002600  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b20  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031dc  080031dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031dc  080031dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031dc  080031dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000070  08003254  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003254  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003839  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000105c  00000000  00000000  000238d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000488  00000000  00000000  00024930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00024db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da8  00000000  00000000  000251a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000582b  00000000  00000000  0003ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aabe  00000000  00000000  0004477b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000125c  00000000  00000000  000df28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080026a4 	.word	0x080026a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080026a4 	.word	0x080026a4

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <TIM6_DAC_IRQHandler>:
// Element 17 is the command to set the cursor to the first position of line 2.
//===========================================================================



void TIM6_DAC_IRQHandler(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b09e      	sub	sp, #120	; 0x78
 8000234:	af04      	add	r7, sp, #16
	char stringy[100];
    TIM6->SR &= ~TIM_SR_UIF;
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <TIM6_DAC_IRQHandler+0x6c>)
 8000238:	691a      	ldr	r2, [r3, #16]
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <TIM6_DAC_IRQHandler+0x6c>)
 800023c:	2101      	movs	r1, #1
 800023e:	438a      	bics	r2, r1
 8000240:	611a      	str	r2, [r3, #16]


	time_remaining+=1;
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <TIM6_DAC_IRQHandler+0x70>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	1c5a      	adds	r2, r3, #1
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <TIM6_DAC_IRQHandler+0x70>)
 800024a:	601a      	str	r2, [r3, #0]
	//sprintf(stringy, "MetaPorter has been capturing data for: %ds", time_remaining);
	LCD_DrawString(0, 240, BLACK, WHITE, ("Metaporter has been capturing"), 16, 0);
 800024c:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <TIM6_DAC_IRQHandler+0x74>)
 800024e:	2300      	movs	r3, #0
 8000250:	9302      	str	r3, [sp, #8]
 8000252:	2310      	movs	r3, #16
 8000254:	9301      	str	r3, [sp, #4]
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <TIM6_DAC_IRQHandler+0x78>)
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	0013      	movs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	21f0      	movs	r1, #240	; 0xf0
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fe7f 	bl	8000f64 <LCD_DrawString>
	sprintf(stringy, "data for: %ds", time_remaining); //convert int time into string
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <TIM6_DAC_IRQHandler+0x70>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4910      	ldr	r1, [pc, #64]	; (80002ac <TIM6_DAC_IRQHandler+0x7c>)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	0018      	movs	r0, r3
 8000270:	f001 fdae 	bl	8001dd0 <siprintf>
	LCD_DrawString(0, 275, BLACK, WHITE,  (stringy), 16, 0);
 8000274:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <TIM6_DAC_IRQHandler+0x74>)
 8000276:	2314      	movs	r3, #20
 8000278:	33ff      	adds	r3, #255	; 0xff
 800027a:	0019      	movs	r1, r3
 800027c:	2300      	movs	r3, #0
 800027e:	9302      	str	r3, [sp, #8]
 8000280:	2310      	movs	r3, #16
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	0013      	movs	r3, r2
 800028a:	2200      	movs	r2, #0
 800028c:	2000      	movs	r0, #0
 800028e:	f000 fe69 	bl	8000f64 <LCD_DrawString>



}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b01a      	add	sp, #104	; 0x68
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40001000 	.word	0x40001000
 80002a0:	2000008c 	.word	0x2000008c
 80002a4:	0000ffff 	.word	0x0000ffff
 80002a8:	080026bc 	.word	0x080026bc
 80002ac:	080026dc 	.word	0x080026dc

080002b0 <init_exti_pb2>:


void init_exti_pb2(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;			// enable GPIO pin B
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <init_exti_pb2+0x68>)
 80002b6:	695a      	ldr	r2, [r3, #20]
 80002b8:	4b17      	ldr	r3, [pc, #92]	; (8000318 <init_exti_pb2+0x68>)
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	02c9      	lsls	r1, r1, #11
 80002be:	430a      	orrs	r2, r1
 80002c0:	615a      	str	r2, [r3, #20]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR2);		// clear pull-up/pull-down reg
 80002c2:	4b16      	ldr	r3, [pc, #88]	; (800031c <init_exti_pb2+0x6c>)
 80002c4:	68da      	ldr	r2, [r3, #12]
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <init_exti_pb2+0x6c>)
 80002c8:	2130      	movs	r1, #48	; 0x30
 80002ca:	438a      	bics	r2, r1
 80002cc:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR2_1;		// set pupdr to pull-down for GPIO pin B
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <init_exti_pb2+0x6c>)
 80002d0:	68da      	ldr	r2, [r3, #12]
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <init_exti_pb2+0x6c>)
 80002d4:	2120      	movs	r1, #32
 80002d6:	430a      	orrs	r2, r1
 80002d8:	60da      	str	r2, [r3, #12]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;	// SYSCFG clock enable
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <init_exti_pb2+0x68>)
 80002dc:	699a      	ldr	r2, [r3, #24]
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <init_exti_pb2+0x68>)
 80002e0:	2101      	movs	r1, #1
 80002e2:	430a      	orrs	r2, r1
 80002e4:	619a      	str	r2, [r3, #24]
	SYSCFG->EXTICR[0] |= 1<<(4 * 2);			// set source input to PB pins for interrupt
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <init_exti_pb2+0x70>)
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <init_exti_pb2+0x70>)
 80002ec:	2180      	movs	r1, #128	; 0x80
 80002ee:	0049      	lsls	r1, r1, #1
 80002f0:	430a      	orrs	r2, r1
 80002f2:	609a      	str	r2, [r3, #8]
	EXTI->IMR |= EXTI_IMR_MR2;					// unmask interrupt request for EXTI Line 2
 80002f4:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <init_exti_pb2+0x74>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <init_exti_pb2+0x74>)
 80002fa:	2104      	movs	r1, #4
 80002fc:	430a      	orrs	r2, r1
 80002fe:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= EXTI_RTSR_TR2;				// enable rising trigger for EXTI Line 2
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <init_exti_pb2+0x74>)
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <init_exti_pb2+0x74>)
 8000306:	2104      	movs	r1, #4
 8000308:	430a      	orrs	r2, r1
 800030a:	609a      	str	r2, [r3, #8]
	NVIC->ISER[0] = 1<<EXTI2_3_IRQn;			// acknowledge and enable EXTI interrupt
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <init_exti_pb2+0x78>)
 800030e:	2240      	movs	r2, #64	; 0x40
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40021000 	.word	0x40021000
 800031c:	48000400 	.word	0x48000400
 8000320:	40010000 	.word	0x40010000
 8000324:	40010400 	.word	0x40010400
 8000328:	e000e100 	.word	0xe000e100

0800032c <init_exti_pa0>:

void init_exti_pa0(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000330:	4b1a      	ldr	r3, [pc, #104]	; (800039c <init_exti_pa0+0x70>)
 8000332:	695a      	ldr	r2, [r3, #20]
 8000334:	4b19      	ldr	r3, [pc, #100]	; (800039c <init_exti_pa0+0x70>)
 8000336:	2180      	movs	r1, #128	; 0x80
 8000338:	0289      	lsls	r1, r1, #10
 800033a:	430a      	orrs	r2, r1
 800033c:	615a      	str	r2, [r3, #20]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR0);
 800033e:	2390      	movs	r3, #144	; 0x90
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	68da      	ldr	r2, [r3, #12]
 8000344:	2390      	movs	r3, #144	; 0x90
 8000346:	05db      	lsls	r3, r3, #23
 8000348:	2103      	movs	r1, #3
 800034a:	438a      	bics	r2, r1
 800034c:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_1;
 800034e:	2390      	movs	r3, #144	; 0x90
 8000350:	05db      	lsls	r3, r3, #23
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2102      	movs	r1, #2
 800035a:	430a      	orrs	r2, r1
 800035c:	60da      	str	r2, [r3, #12]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <init_exti_pa0+0x70>)
 8000360:	699a      	ldr	r2, [r3, #24]
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <init_exti_pa0+0x70>)
 8000364:	2101      	movs	r1, #1
 8000366:	430a      	orrs	r2, r1
 8000368:	619a      	str	r2, [r3, #24]
	SYSCFG->EXTICR[0] &= ~(0x7); // set the source for pa
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <init_exti_pa0+0x74>)
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <init_exti_pa0+0x74>)
 8000370:	2107      	movs	r1, #7
 8000372:	438a      	bics	r2, r1
 8000374:	609a      	str	r2, [r3, #8]
	EXTI -> IMR |= EXTI_IMR_MR0;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <init_exti_pa0+0x78>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <init_exti_pa0+0x78>)
 800037c:	2101      	movs	r1, #1
 800037e:	430a      	orrs	r2, r1
 8000380:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= EXTI_RTSR_TR0;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <init_exti_pa0+0x78>)
 8000384:	689a      	ldr	r2, [r3, #8]
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <init_exti_pa0+0x78>)
 8000388:	2101      	movs	r1, #1
 800038a:	430a      	orrs	r2, r1
 800038c:	609a      	str	r2, [r3, #8]
	NVIC->ISER[0] = 1<<EXTI0_1_IRQn;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <init_exti_pa0+0x7c>)
 8000390:	2220      	movs	r2, #32
 8000392:	601a      	str	r2, [r3, #0]

}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010000 	.word	0x40010000
 80003a4:	40010400 	.word	0x40010400
 80003a8:	e000e100 	.word	0xe000e100

080003ac <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void) {
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
	time_remaining = 0;
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <EXTI0_1_IRQHandler+0x38>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
	char init_status[] = "Data Collection";
 80003b8:	003b      	movs	r3, r7
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <EXTI0_1_IRQHandler+0x3c>)
 80003bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003be:	c313      	stmia	r3!, {r0, r1, r4}
 80003c0:	6812      	ldr	r2, [r2, #0]
 80003c2:	601a      	str	r2, [r3, #0]
	LCD_update_status(init_status);
 80003c4:	003b      	movs	r3, r7
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 f878 	bl	80004bc <LCD_update_status>
	tim6_start();
 80003cc:	f000 f85a 	bl	8000484 <tim6_start>

	EXTI->PR |= EXTI_PR_PR0;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <EXTI0_1_IRQHandler+0x40>)
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <EXTI0_1_IRQHandler+0x40>)
 80003d6:	2101      	movs	r1, #1
 80003d8:	430a      	orrs	r2, r1
 80003da:	615a      	str	r2, [r3, #20]

}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b005      	add	sp, #20
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	2000008c 	.word	0x2000008c
 80003e8:	080026ec 	.word	0x080026ec
 80003ec:	40010400 	.word	0x40010400

080003f0 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
	char status[] = "Finished";
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <EXTI2_3_IRQHandler+0x34>)
 80003fa:	ca03      	ldmia	r2!, {r0, r1}
 80003fc:	c303      	stmia	r3!, {r0, r1}
 80003fe:	7812      	ldrb	r2, [r2, #0]
 8000400:	701a      	strb	r2, [r3, #0]

	tim6_stop();
 8000402:	f000 f84d 	bl	80004a0 <tim6_stop>
	LCD_update_status(status);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	0018      	movs	r0, r3
 800040a:	f000 f857 	bl	80004bc <LCD_update_status>
	EXTI->PR |= EXTI_PR_PR2;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <EXTI2_3_IRQHandler+0x38>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <EXTI2_3_IRQHandler+0x38>)
 8000414:	2104      	movs	r1, #4
 8000416:	430a      	orrs	r2, r1
 8000418:	615a      	str	r2, [r3, #20]
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b004      	add	sp, #16
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	080026fc 	.word	0x080026fc
 8000428:	40010400 	.word	0x40010400

0800042c <tim6_init>:

void tim6_init(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  TIM6->CR1 &= ~TIM_CR1_CEN;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <tim6_init+0x44>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <tim6_init+0x44>)
 8000436:	2101      	movs	r1, #1
 8000438:	438a      	bics	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
  RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <tim6_init+0x48>)
 800043e:	69da      	ldr	r2, [r3, #28]
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <tim6_init+0x48>)
 8000442:	2110      	movs	r1, #16
 8000444:	430a      	orrs	r2, r1
 8000446:	61da      	str	r2, [r3, #28]
  TIM6->PSC = 48000-1;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <tim6_init+0x44>)
 800044a:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <tim6_init+0x4c>)
 800044c:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 1000-1;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <tim6_init+0x44>)
 8000450:	4a0a      	ldr	r2, [pc, #40]	; (800047c <tim6_init+0x50>)
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM6->DIER |= TIM_DIER_UIE;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <tim6_init+0x44>)
 8000456:	68da      	ldr	r2, [r3, #12]
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <tim6_init+0x44>)
 800045a:	2101      	movs	r1, #1
 800045c:	430a      	orrs	r2, r1
 800045e:	60da      	str	r2, [r3, #12]
  NVIC->ISER[0] = 1<<TIM6_DAC_IRQn;
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <tim6_init+0x54>)
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	0292      	lsls	r2, r2, #10
 8000466:	601a      	str	r2, [r3, #0]
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40001000 	.word	0x40001000
 8000474:	40021000 	.word	0x40021000
 8000478:	0000bb7f 	.word	0x0000bb7f
 800047c:	000003e7 	.word	0x000003e7
 8000480:	e000e100 	.word	0xe000e100

08000484 <tim6_start>:

void tim6_start(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	TIM6->CR1 |= TIM_CR1_CEN;			// enable timer clock
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <tim6_start+0x18>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b03      	ldr	r3, [pc, #12]	; (800049c <tim6_start+0x18>)
 800048e:	2101      	movs	r1, #1
 8000490:	430a      	orrs	r2, r1
 8000492:	601a      	str	r2, [r3, #0]
}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40001000 	.word	0x40001000

080004a0 <tim6_stop>:

void tim6_stop(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	TIM6->CR1 &= ~TIM_CR1_CEN;			// disable timer clock
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <tim6_stop+0x18>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <tim6_stop+0x18>)
 80004aa:	2101      	movs	r1, #1
 80004ac:	438a      	bics	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40001000 	.word	0x40001000

080004bc <LCD_update_status>:

void LCD_update_status(char * status) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af04      	add	r7, sp, #16
 80004c2:	6078      	str	r0, [r7, #4]

	LCD_Clear(0xffffff);
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <LCD_update_status+0x4c>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fbcc 	bl	8000c64 <LCD_Clear>
	LCD_DrawString(5, 100, BLACK, WHITE, "Status: ", 16, 0);
 80004cc:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <LCD_update_status+0x4c>)
 80004ce:	2300      	movs	r3, #0
 80004d0:	9302      	str	r3, [sp, #8]
 80004d2:	2310      	movs	r3, #16
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <LCD_update_status+0x50>)
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	0013      	movs	r3, r2
 80004dc:	2200      	movs	r2, #0
 80004de:	2164      	movs	r1, #100	; 0x64
 80004e0:	2005      	movs	r0, #5
 80004e2:	f000 fd3f 	bl	8000f64 <LCD_DrawString>
	LCD_DrawString(70, 100, BLACK, WHITE, (status), 16, 0);
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <LCD_update_status+0x4c>)
 80004e8:	2300      	movs	r3, #0
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	2310      	movs	r3, #16
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	0013      	movs	r3, r2
 80004f6:	2200      	movs	r2, #0
 80004f8:	2164      	movs	r1, #100	; 0x64
 80004fa:	2046      	movs	r0, #70	; 0x46
 80004fc:	f000 fd32 	bl	8000f64 <LCD_DrawString>

}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b002      	add	sp, #8
 8000506:	bd80      	pop	{r7, pc}
 8000508:	0000ffff 	.word	0x0000ffff
 800050c:	08002708 	.word	0x08002708

08000510 <main>:

int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    // This time, autotest always runs as an invisible aid to you.
    //autotest();

    // GPIO enable
    //enable_ports();
    SystemClock_Config();
 8000514:	f000 fd88 	bl	8001028 <SystemClock_Config>
    LCD_Setup();
 8000518:	f000 fac6 	bl	8000aa8 <LCD_Setup>
    init_exti_pb2();
 800051c:	f7ff fec8 	bl	80002b0 <init_exti_pb2>
    init_exti_pa0();
 8000520:	f7ff ff04 	bl	800032c <init_exti_pa0>
    tim6_init();
 8000524:	f7ff ff82 	bl	800042c <tim6_init>
 8000528:	2300      	movs	r3, #0
    //tim6_start();
}
 800052a:	0018      	movs	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <tft_select>:
#define DC_LOW  do { GPIOB->BSRR = GPIO_BSRR_BR_14; } while(0)

// Set the CS pin low if val is non-zero.
// Note that when CS is being set high again, wait on SPI to not be busy.
static void tft_select(int val)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    if (val == 0) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d10a      	bne.n	8000554 <tft_select+0x24>
        while(SPI1->SR & SPI_SR_BSY)
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <tft_select+0x44>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	2280      	movs	r2, #128	; 0x80
 8000546:	4013      	ands	r3, r2
 8000548:	d1fa      	bne.n	8000540 <tft_select+0x10>
            ;
        CS_HIGH;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <tft_select+0x48>)
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	0052      	lsls	r2, r2, #1
 8000550:	619a      	str	r2, [r3, #24]
            // This is a common mistake made by students.
            // This is what catches the problem early.
        }
        CS_LOW;
    }
}
 8000552:	e00a      	b.n	800056a <tft_select+0x3a>
        while((GPIOB->ODR & (CS_BIT)) == 0) {
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <tft_select+0x48>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4013      	ands	r3, r2
 8000560:	d0f9      	beq.n	8000556 <tft_select+0x26>
        CS_LOW;
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <tft_select+0x48>)
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	0452      	lsls	r2, r2, #17
 8000568:	619a      	str	r2, [r3, #24]
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40013000 	.word	0x40013000
 8000578:	48000400 	.word	0x48000400

0800057c <tft_reset>:

// If val is non-zero, set nRESET low to reset the display.
static void tft_reset(int val)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    if (val) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d004      	beq.n	8000594 <tft_reset+0x18>
        RESET_LOW;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <tft_reset+0x28>)
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	0512      	lsls	r2, r2, #20
 8000590:	619a      	str	r2, [r3, #24]
    } else {
        RESET_HIGH;
    }
}
 8000592:	e003      	b.n	800059c <tft_reset+0x20>
        RESET_HIGH;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <tft_reset+0x28>)
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	0112      	lsls	r2, r2, #4
 800059a:	619a      	str	r2, [r3, #24]
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b002      	add	sp, #8
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	48000400 	.word	0x48000400

080005a8 <tft_reg_select>:

// If
static void tft_reg_select(int val)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    if (val == 1) { // select registers
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d104      	bne.n	80005c0 <tft_reg_select+0x18>
        DC_LOW; // clear
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <tft_reg_select+0x28>)
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	05d2      	lsls	r2, r2, #23
 80005bc:	619a      	str	r2, [r3, #24]
    } else { // select data
        DC_HIGH; // set
    }
}
 80005be:	e003      	b.n	80005c8 <tft_reg_select+0x20>
        DC_HIGH; // set
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <tft_reg_select+0x28>)
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	01d2      	lsls	r2, r2, #7
 80005c6:	619a      	str	r2, [r3, #24]
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <nano_wait>:

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
static inline void nano_wait(unsigned int n) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	1c18      	adds	r0, r3, #0

080005e0 <repeat>:
 80005e0:	3853      	subs	r0, #83	; 0x53
 80005e2:	dcfd      	bgt.n	80005e0 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b002      	add	sp, #8
 80005ea:	bd80      	pop	{r7, pc}

080005ec <LCD_Reset>:

void LCD_Reset(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
    lcddev.reset(1);      // Assert reset
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <LCD_Reset+0x2c>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	2001      	movs	r0, #1
 80005f6:	4798      	blx	r3
    nano_wait(100000000); // Wait
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LCD_Reset+0x30>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff ffea 	bl	80005d4 <nano_wait>
    lcddev.reset(0);      // De-assert reset
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <LCD_Reset+0x2c>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	2000      	movs	r0, #0
 8000606:	4798      	blx	r3
    nano_wait(50000000);  // Wait
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <LCD_Reset+0x34>)
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ffe2 	bl	80005d4 <nano_wait>
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	20000090 	.word	0x20000090
 800061c:	05f5e100 	.word	0x05f5e100
 8000620:	02faf080 	.word	0x02faf080

08000624 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	0002      	movs	r2, r0
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <LCD_WR_REG+0x30>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	4013      	ands	r3, r2
 800063a:	d1fa      	bne.n	8000632 <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    lcddev.reg_select(1);
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <LCD_WR_REG+0x34>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	2001      	movs	r0, #1
 8000642:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8000644:	4a05      	ldr	r2, [pc, #20]	; (800065c <LCD_WR_REG+0x38>)
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	7013      	strb	r3, [r2, #0]
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40013000 	.word	0x40013000
 8000658:	20000090 	.word	0x20000090
 800065c:	4001300c 	.word	0x4001300c

08000660 <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <LCD_WR_DATA+0x30>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	4013      	ands	r3, r2
 8000676:	d1fa      	bne.n	800066e <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    lcddev.reg_select(0);
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <LCD_WR_DATA+0x34>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	2000      	movs	r0, #0
 800067e:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <LCD_WR_DATA+0x38>)
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	7013      	strb	r3, [r2, #0]
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40013000 	.word	0x40013000
 8000694:	20000090 	.word	0x20000090
 8000698:	4001300c 	.word	0x4001300c

0800069c <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    lcddev.reg_select(0);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <LCD_WriteData16_Prepare+0x20>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	2000      	movs	r0, #0
 80006a6:	4798      	blx	r3
    SPI->CR2 |= SPI_CR2_DS;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <LCD_WriteData16_Prepare+0x24>)
 80006aa:	685a      	ldr	r2, [r3, #4]
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <LCD_WriteData16_Prepare+0x24>)
 80006ae:	21f0      	movs	r1, #240	; 0xf0
 80006b0:	0109      	lsls	r1, r1, #4
 80006b2:	430a      	orrs	r2, r1
 80006b4:	605a      	str	r2, [r3, #4]
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000090 	.word	0x20000090
 80006c0:	40013000 	.word	0x40013000

080006c4 <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <LCD_WriteData16+0x28>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	2202      	movs	r2, #2
 80006d8:	4013      	ands	r3, r2
 80006da:	d0fa      	beq.n	80006d2 <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <LCD_WriteData16+0x28>)
 80006de:	1dba      	adds	r2, r7, #6
 80006e0:	8812      	ldrh	r2, [r2, #0]
 80006e2:	60da      	str	r2, [r3, #12]
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40013000 	.word	0x40013000

080006f0 <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <LCD_WriteData16_End+0x18>)
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <LCD_WriteData16_End+0x18>)
 80006fa:	4904      	ldr	r1, [pc, #16]	; (800070c <LCD_WriteData16_End+0x1c>)
 80006fc:	400a      	ands	r2, r1
 80006fe:	605a      	str	r2, [r3, #4]
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40013000 	.word	0x40013000
 800070c:	fffff0ff 	.word	0xfffff0ff

08000710 <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	1c0a      	adds	r2, r1, #0
 8000720:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff ff7c 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff ff94 	bl	8000660 <LCD_WR_DATA>
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}

08000740 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <LCD_WriteRAM_Prepare+0x18>)
 8000746:	891b      	ldrh	r3, [r3, #8]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff ff6a 	bl	8000624 <LCD_WR_REG>
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000090 	.word	0x20000090

0800075c <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <LCD_direction+0xa4>)
 800076a:	222a      	movs	r2, #42	; 0x2a
 800076c:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 800076e:	4b24      	ldr	r3, [pc, #144]	; (8000800 <LCD_direction+0xa4>)
 8000770:	222b      	movs	r2, #43	; 0x2b
 8000772:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <LCD_direction+0xa4>)
 8000776:	222c      	movs	r2, #44	; 0x2c
 8000778:	811a      	strh	r2, [r3, #8]
    switch(direction){
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d02c      	beq.n	80007dc <LCD_direction+0x80>
 8000782:	dc37      	bgt.n	80007f4 <LCD_direction+0x98>
 8000784:	2b02      	cmp	r3, #2
 8000786:	d01d      	beq.n	80007c4 <LCD_direction+0x68>
 8000788:	dc34      	bgt.n	80007f4 <LCD_direction+0x98>
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <LCD_direction+0x38>
 800078e:	2b01      	cmp	r3, #1
 8000790:	d00c      	beq.n	80007ac <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 8000792:	e02f      	b.n	80007f4 <LCD_direction+0x98>
        lcddev.width=LCD_W;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <LCD_direction+0xa4>)
 8000796:	22f0      	movs	r2, #240	; 0xf0
 8000798:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <LCD_direction+0xa4>)
 800079c:	22a0      	movs	r2, #160	; 0xa0
 800079e:	0052      	lsls	r2, r2, #1
 80007a0:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 80007a2:	2108      	movs	r1, #8
 80007a4:	2036      	movs	r0, #54	; 0x36
 80007a6:	f7ff ffb3 	bl	8000710 <LCD_WriteReg>
        break;
 80007aa:	e024      	b.n	80007f6 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <LCD_direction+0xa4>)
 80007ae:	22a0      	movs	r2, #160	; 0xa0
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <LCD_direction+0xa4>)
 80007b6:	22f0      	movs	r2, #240	; 0xf0
 80007b8:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80007ba:	2168      	movs	r1, #104	; 0x68
 80007bc:	2036      	movs	r0, #54	; 0x36
 80007be:	f7ff ffa7 	bl	8000710 <LCD_WriteReg>
        break;
 80007c2:	e018      	b.n	80007f6 <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <LCD_direction+0xa4>)
 80007c6:	22f0      	movs	r2, #240	; 0xf0
 80007c8:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <LCD_direction+0xa4>)
 80007cc:	22a0      	movs	r2, #160	; 0xa0
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 80007d2:	21c8      	movs	r1, #200	; 0xc8
 80007d4:	2036      	movs	r0, #54	; 0x36
 80007d6:	f7ff ff9b 	bl	8000710 <LCD_WriteReg>
        break;
 80007da:	e00c      	b.n	80007f6 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <LCD_direction+0xa4>)
 80007de:	22a0      	movs	r2, #160	; 0xa0
 80007e0:	0052      	lsls	r2, r2, #1
 80007e2:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <LCD_direction+0xa4>)
 80007e6:	22f0      	movs	r2, #240	; 0xf0
 80007e8:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80007ea:	21a8      	movs	r1, #168	; 0xa8
 80007ec:	2036      	movs	r0, #54	; 0x36
 80007ee:	f7ff ff8f 	bl	8000710 <LCD_WriteReg>
        break;
 80007f2:	e000      	b.n	80007f6 <LCD_direction+0x9a>
    default:break;
 80007f4:	46c0      	nop			; (mov r8, r8)
    }
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000090 	.word	0x20000090

08000804 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init(void (*reset)(int), void (*select)(int), void (*reg_select)(int))
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
    lcddev.reset = tft_reset;
 8000810:	4ba0      	ldr	r3, [pc, #640]	; (8000a94 <LCD_Init+0x290>)
 8000812:	4aa1      	ldr	r2, [pc, #644]	; (8000a98 <LCD_Init+0x294>)
 8000814:	611a      	str	r2, [r3, #16]
    lcddev.select = tft_select;
 8000816:	4b9f      	ldr	r3, [pc, #636]	; (8000a94 <LCD_Init+0x290>)
 8000818:	4aa0      	ldr	r2, [pc, #640]	; (8000a9c <LCD_Init+0x298>)
 800081a:	615a      	str	r2, [r3, #20]
    lcddev.reg_select = tft_reg_select;
 800081c:	4b9d      	ldr	r3, [pc, #628]	; (8000a94 <LCD_Init+0x290>)
 800081e:	4aa0      	ldr	r2, [pc, #640]	; (8000aa0 <LCD_Init+0x29c>)
 8000820:	619a      	str	r2, [r3, #24]
    if (reset)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <LCD_Init+0x2a>
        lcddev.reset = reset;
 8000828:	4b9a      	ldr	r3, [pc, #616]	; (8000a94 <LCD_Init+0x290>)
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	611a      	str	r2, [r3, #16]
    if (select)
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <LCD_Init+0x36>
        lcddev.select = select;
 8000834:	4b97      	ldr	r3, [pc, #604]	; (8000a94 <LCD_Init+0x290>)
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	615a      	str	r2, [r3, #20]
    if (reg_select)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <LCD_Init+0x42>
        lcddev.reg_select = reg_select;
 8000840:	4b94      	ldr	r3, [pc, #592]	; (8000a94 <LCD_Init+0x290>)
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	619a      	str	r2, [r3, #24]
    lcddev.select(1);
 8000846:	4b93      	ldr	r3, [pc, #588]	; (8000a94 <LCD_Init+0x290>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	2001      	movs	r0, #1
 800084c:	4798      	blx	r3
    LCD_Reset();
 800084e:	f7ff fecd 	bl	80005ec <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8000852:	20cf      	movs	r0, #207	; 0xcf
 8000854:	f7ff fee6 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff ff01 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 800085e:	20d9      	movs	r0, #217	; 0xd9
 8000860:	f7ff fefe 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8000864:	2030      	movs	r0, #48	; 0x30
 8000866:	f7ff fefb 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 800086a:	20ed      	movs	r0, #237	; 0xed
 800086c:	f7ff feda 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f7ff fef5 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff fef2 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 800087c:	2012      	movs	r0, #18
 800087e:	f7ff feef 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8000882:	2081      	movs	r0, #129	; 0x81
 8000884:	f7ff feec 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 8000888:	20e8      	movs	r0, #232	; 0xe8
 800088a:	f7ff fecb 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 800088e:	2085      	movs	r0, #133	; 0x85
 8000890:	f7ff fee6 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8000894:	2010      	movs	r0, #16
 8000896:	f7ff fee3 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 800089a:	207a      	movs	r0, #122	; 0x7a
 800089c:	f7ff fee0 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 80008a0:	20cb      	movs	r0, #203	; 0xcb
 80008a2:	f7ff febf 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 80008a6:	2039      	movs	r0, #57	; 0x39
 80008a8:	f7ff feda 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 80008ac:	202c      	movs	r0, #44	; 0x2c
 80008ae:	f7ff fed7 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fed4 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 80008b8:	2034      	movs	r0, #52	; 0x34
 80008ba:	f7ff fed1 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 80008be:	2002      	movs	r0, #2
 80008c0:	f7ff fece 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 80008c4:	20f7      	movs	r0, #247	; 0xf7
 80008c6:	f7ff fead 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 80008ca:	2020      	movs	r0, #32
 80008cc:	f7ff fec8 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 80008d0:	20ea      	movs	r0, #234	; 0xea
 80008d2:	f7ff fea7 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff fec2 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff febf 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 80008e2:	20c0      	movs	r0, #192	; 0xc0
 80008e4:	f7ff fe9e 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 80008e8:	2021      	movs	r0, #33	; 0x21
 80008ea:	f7ff feb9 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 80008ee:	20c1      	movs	r0, #193	; 0xc1
 80008f0:	f7ff fe98 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 80008f4:	2012      	movs	r0, #18
 80008f6:	f7ff feb3 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 80008fa:	20c5      	movs	r0, #197	; 0xc5
 80008fc:	f7ff fe92 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 8000900:	2039      	movs	r0, #57	; 0x39
 8000902:	f7ff fead 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 8000906:	2037      	movs	r0, #55	; 0x37
 8000908:	f7ff feaa 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 800090c:	20c7      	movs	r0, #199	; 0xc7
 800090e:	f7ff fe89 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 8000912:	20ab      	movs	r0, #171	; 0xab
 8000914:	f7ff fea4 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 8000918:	2036      	movs	r0, #54	; 0x36
 800091a:	f7ff fe83 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 800091e:	2048      	movs	r0, #72	; 0x48
 8000920:	f7ff fe9e 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 8000924:	203a      	movs	r0, #58	; 0x3a
 8000926:	f7ff fe7d 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 800092a:	2055      	movs	r0, #85	; 0x55
 800092c:	f7ff fe98 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8000930:	20b1      	movs	r0, #177	; 0xb1
 8000932:	f7ff fe77 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fe92 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 800093c:	201b      	movs	r0, #27
 800093e:	f7ff fe8f 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 8000942:	20b6      	movs	r0, #182	; 0xb6
 8000944:	f7ff fe6e 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 8000948:	200a      	movs	r0, #10
 800094a:	f7ff fe89 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 800094e:	20a2      	movs	r0, #162	; 0xa2
 8000950:	f7ff fe86 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000954:	20f2      	movs	r0, #242	; 0xf2
 8000956:	f7ff fe65 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fe80 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8000960:	2026      	movs	r0, #38	; 0x26
 8000962:	f7ff fe5f 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8000966:	2001      	movs	r0, #1
 8000968:	f7ff fe7a 	bl	8000660 <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 800096c:	20e0      	movs	r0, #224	; 0xe0
 800096e:	f7ff fe59 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8000972:	200f      	movs	r0, #15
 8000974:	f7ff fe74 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8000978:	2023      	movs	r0, #35	; 0x23
 800097a:	f7ff fe71 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 800097e:	201f      	movs	r0, #31
 8000980:	f7ff fe6e 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8000984:	200b      	movs	r0, #11
 8000986:	f7ff fe6b 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 800098a:	200e      	movs	r0, #14
 800098c:	f7ff fe68 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8000990:	2008      	movs	r0, #8
 8000992:	f7ff fe65 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8000996:	204b      	movs	r0, #75	; 0x4b
 8000998:	f7ff fe62 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 800099c:	20a8      	movs	r0, #168	; 0xa8
 800099e:	f7ff fe5f 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 80009a2:	203b      	movs	r0, #59	; 0x3b
 80009a4:	f7ff fe5c 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 80009a8:	200a      	movs	r0, #10
 80009aa:	f7ff fe59 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 80009ae:	2014      	movs	r0, #20
 80009b0:	f7ff fe56 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 80009b4:	2006      	movs	r0, #6
 80009b6:	f7ff fe53 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 80009ba:	2010      	movs	r0, #16
 80009bc:	f7ff fe50 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 80009c0:	2009      	movs	r0, #9
 80009c2:	f7ff fe4d 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fe4a 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 80009cc:	20e1      	movs	r0, #225	; 0xe1
 80009ce:	f7ff fe29 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fe44 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 80009d8:	201c      	movs	r0, #28
 80009da:	f7ff fe41 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 80009de:	2020      	movs	r0, #32
 80009e0:	f7ff fe3e 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 80009e4:	2004      	movs	r0, #4
 80009e6:	f7ff fe3b 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 80009ea:	2010      	movs	r0, #16
 80009ec:	f7ff fe38 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 80009f0:	2008      	movs	r0, #8
 80009f2:	f7ff fe35 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 80009f6:	2034      	movs	r0, #52	; 0x34
 80009f8:	f7ff fe32 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 80009fc:	2047      	movs	r0, #71	; 0x47
 80009fe:	f7ff fe2f 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 8000a02:	2044      	movs	r0, #68	; 0x44
 8000a04:	f7ff fe2c 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 8000a08:	2005      	movs	r0, #5
 8000a0a:	f7ff fe29 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8000a0e:	200b      	movs	r0, #11
 8000a10:	f7ff fe26 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8000a14:	2009      	movs	r0, #9
 8000a16:	f7ff fe23 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 8000a1a:	202f      	movs	r0, #47	; 0x2f
 8000a1c:	f7ff fe20 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8000a20:	2036      	movs	r0, #54	; 0x36
 8000a22:	f7ff fe1d 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8000a26:	200f      	movs	r0, #15
 8000a28:	f7ff fe1a 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8000a2c:	202b      	movs	r0, #43	; 0x2b
 8000a2e:	f7ff fdf9 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fe14 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fe11 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff fe0e 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8000a44:	203f      	movs	r0, #63	; 0x3f
 8000a46:	f7ff fe0b 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8000a4a:	202a      	movs	r0, #42	; 0x2a
 8000a4c:	f7ff fdea 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff fe05 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fe02 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fdff 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8000a62:	20ef      	movs	r0, #239	; 0xef
 8000a64:	f7ff fdfc 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8000a68:	2011      	movs	r0, #17
 8000a6a:	f7ff fddb 	bl	8000624 <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <LCD_Init+0x2a0>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fdaf 	bl	80005d4 <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 8000a76:	2029      	movs	r0, #41	; 0x29
 8000a78:	f7ff fdd4 	bl	8000624 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fe6d 	bl	800075c <LCD_direction>
    lcddev.select(0);
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <LCD_Init+0x290>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	2000      	movs	r0, #0
 8000a88:	4798      	blx	r3
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000090 	.word	0x20000090
 8000a98:	0800057d 	.word	0x0800057d
 8000a9c:	08000531 	.word	0x08000531
 8000aa0:	080005a9 	.word	0x080005a9
 8000aa4:	07270e00 	.word	0x07270e00

08000aa8 <LCD_Setup>:



void LCD_Setup() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    init_lcd_spi();
 8000aac:	f000 f818 	bl	8000ae0 <init_lcd_spi>
    tft_select(0);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fd3d 	bl	8000530 <tft_select>
    tft_reset(0);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fd60 	bl	800057c <tft_reset>
    tft_reg_select(0);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fd73 	bl	80005a8 <tft_reg_select>
    LCD_Init(tft_reset, tft_select, tft_reg_select);
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <LCD_Setup+0x2c>)
 8000ac4:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <LCD_Setup+0x30>)
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <LCD_Setup+0x34>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff fe9b 	bl	8000804 <LCD_Init>
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	080005a9 	.word	0x080005a9
 8000ad8:	08000531 	.word	0x08000531
 8000adc:	0800057d 	.word	0x0800057d

08000ae0 <init_lcd_spi>:

void init_lcd_spi(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <init_lcd_spi+0xac>)
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <init_lcd_spi+0xac>)
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	02c9      	lsls	r1, r1, #11
 8000aee:	430a      	orrs	r2, r1
 8000af0:	615a      	str	r2, [r3, #20]
    GPIOB->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER11 | GPIO_MODER_MODER14);
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <init_lcd_spi+0xb0>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <init_lcd_spi+0xb0>)
 8000af8:	4926      	ldr	r1, [pc, #152]	; (8000b94 <init_lcd_spi+0xb4>)
 8000afa:	400a      	ands	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= GPIO_MODER_MODER8_0 | GPIO_MODER_MODER11_0 | GPIO_MODER_MODER14_0;
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <init_lcd_spi+0xb0>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <init_lcd_spi+0xb0>)
 8000b04:	4924      	ldr	r1, [pc, #144]	; (8000b98 <init_lcd_spi+0xb8>)
 8000b06:	430a      	orrs	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]
    GPIOB->ODR |= GPIO_ODR_8 | GPIO_ODR_11 | GPIO_ODR_14;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <init_lcd_spi+0xb0>)
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <init_lcd_spi+0xb0>)
 8000b10:	2192      	movs	r1, #146	; 0x92
 8000b12:	01c9      	lsls	r1, r1, #7
 8000b14:	430a      	orrs	r2, r1
 8000b16:	615a      	str	r2, [r3, #20]
    GPIOB->MODER |= GPIO_MODER_MODER3 | GPIO_MODER_MODER5;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <init_lcd_spi+0xb0>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <init_lcd_spi+0xb0>)
 8000b1e:	21cc      	movs	r1, #204	; 0xcc
 8000b20:	0109      	lsls	r1, r1, #4
 8000b22:	430a      	orrs	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~(GPIO_MODER_MODER3_0 | GPIO_MODER_MODER5_0);
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <init_lcd_spi+0xb0>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <init_lcd_spi+0xb0>)
 8000b2c:	491b      	ldr	r1, [pc, #108]	; (8000b9c <init_lcd_spi+0xbc>)
 8000b2e:	400a      	ands	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <init_lcd_spi+0xac>)
 8000b34:	699a      	ldr	r2, [r3, #24]
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <init_lcd_spi+0xac>)
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	0149      	lsls	r1, r1, #5
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	619a      	str	r2, [r3, #24]
    SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b46:	2140      	movs	r1, #64	; 0x40
 8000b48:	438a      	bics	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
    SPI1->CR1 &= ~SPI_CR1_BR;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b52:	2138      	movs	r1, #56	; 0x38
 8000b54:	438a      	bics	r2, r1
 8000b56:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_MSTR;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b5e:	2104      	movs	r1, #4
 8000b60:	430a      	orrs	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b66:	22e0      	movs	r2, #224	; 0xe0
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	605a      	str	r2, [r3, #4]
    SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b72:	21c0      	movs	r1, #192	; 0xc0
 8000b74:	0089      	lsls	r1, r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_SPE;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <init_lcd_spi+0xc0>)
 8000b80:	2140      	movs	r1, #64	; 0x40
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	cf3cffff 	.word	0xcf3cffff
 8000b98:	10410000 	.word	0x10410000
 8000b9c:	fffffbbf 	.word	0xfffffbbf
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0005      	movs	r5, r0
 8000bac:	000c      	movs	r4, r1
 8000bae:	0010      	movs	r0, r2
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	1dbb      	adds	r3, r7, #6
 8000bb4:	1c2a      	adds	r2, r5, #0
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	1c22      	adds	r2, r4, #0
 8000bbc:	801a      	strh	r2, [r3, #0]
 8000bbe:	1cbb      	adds	r3, r7, #2
 8000bc0:	1c02      	adds	r2, r0, #0
 8000bc2:	801a      	strh	r2, [r3, #0]
 8000bc4:	003b      	movs	r3, r7
 8000bc6:	1c0a      	adds	r2, r1, #0
 8000bc8:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <LCD_SetWindow+0xbc>)
 8000bcc:	895b      	ldrh	r3, [r3, #10]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff fd27 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fd3d 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8000be6:	1dbb      	adds	r3, r7, #6
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fd37 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 8000bf2:	1cbb      	adds	r3, r7, #2
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fd2f 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 8000c02:	1cbb      	adds	r3, r7, #2
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fd29 	bl	8000660 <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <LCD_SetWindow+0xbc>)
 8000c10:	899b      	ldrh	r3, [r3, #12]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff fd05 	bl	8000624 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	0a1b      	lsrs	r3, r3, #8
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff fd1b 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff fd15 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8000c36:	003b      	movs	r3, r7
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fd0d 	bl	8000660 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8000c46:	003b      	movs	r3, r7
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fd07 	bl	8000660 <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8000c52:	f7ff fd75 	bl	8000740 <LCD_WriteRAM_Prepare>
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000090 	.word	0x20000090

08000c64 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	1dbb      	adds	r3, r7, #6
 8000c6e:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <LCD_Clear+0x80>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	2001      	movs	r0, #1
 8000c76:	4798      	blx	r3
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <LCD_Clear+0x80>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <LCD_Clear+0x80>)
 8000c82:	885b      	ldrh	r3, [r3, #2]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff ff8a 	bl	8000ba4 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8000c90:	f7ff fd04 	bl	800069c <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e013      	b.n	8000cc2 <LCD_Clear+0x5e>
    {
        for(m=0;m<lcddev.width;m++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	e007      	b.n	8000cb0 <LCD_Clear+0x4c>
        {
            LCD_WriteData16(Color);
 8000ca0:	1dbb      	adds	r3, r7, #6
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fd0d 	bl	80006c4 <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	3301      	adds	r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <LCD_Clear+0x80>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d3f1      	bcc.n	8000ca0 <LCD_Clear+0x3c>
    for(i=0;i<lcddev.height;i++)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <LCD_Clear+0x80>)
 8000cc4:	885b      	ldrh	r3, [r3, #2]
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d3e5      	bcc.n	8000c9a <LCD_Clear+0x36>
        }
    }
    LCD_WriteData16_End();
 8000cce:	f7ff fd0f 	bl	80006f0 <LCD_WriteData16_End>
    lcddev.select(0);
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <LCD_Clear+0x80>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	4798      	blx	r3
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20000090 	.word	0x20000090

08000ce8 <_LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
static void _LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	0004      	movs	r4, r0
 8000cf0:	0008      	movs	r0, r1
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	1dbb      	adds	r3, r7, #6
 8000cf6:	1c22      	adds	r2, r4, #0
 8000cf8:	801a      	strh	r2, [r3, #0]
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	1c02      	adds	r2, r0, #0
 8000cfe:	801a      	strh	r2, [r3, #0]
 8000d00:	1cbb      	adds	r3, r7, #2
 8000d02:	1c0a      	adds	r2, r1, #0
 8000d04:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	881c      	ldrh	r4, [r3, #0]
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	8819      	ldrh	r1, [r3, #0]
 8000d12:	1dbb      	adds	r3, r7, #6
 8000d14:	8818      	ldrh	r0, [r3, #0]
 8000d16:	0023      	movs	r3, r4
 8000d18:	f7ff ff44 	bl	8000ba4 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8000d1c:	f7ff fcbe 	bl	800069c <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 8000d20:	1cbb      	adds	r3, r7, #2
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff fccd 	bl	80006c4 <LCD_WriteData16>
    LCD_WriteData16_End();
 8000d2a:	f7ff fce1 	bl	80006f0 <LCD_WriteData16_End>
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b003      	add	sp, #12
 8000d34:	bd90      	pop	{r4, r7, pc}
	...

08000d38 <_LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void _LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0005      	movs	r5, r0
 8000d40:	000c      	movs	r4, r1
 8000d42:	0010      	movs	r0, r2
 8000d44:	0019      	movs	r1, r3
 8000d46:	1dbb      	adds	r3, r7, #6
 8000d48:	1c2a      	adds	r2, r5, #0
 8000d4a:	801a      	strh	r2, [r3, #0]
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	1c22      	adds	r2, r4, #0
 8000d50:	801a      	strh	r2, [r3, #0]
 8000d52:	1cbb      	adds	r3, r7, #2
 8000d54:	1c02      	adds	r2, r0, #0
 8000d56:	801a      	strh	r2, [r3, #0]
 8000d58:	003b      	movs	r3, r7
 8000d5a:	1c0a      	adds	r2, r1, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 8000d5e:	2220      	movs	r2, #32
 8000d60:	18bb      	adds	r3, r7, r2
 8000d62:	18ba      	adds	r2, r7, r2
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	3a20      	subs	r2, #32
 8000d68:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8000d6a:	2124      	movs	r1, #36	; 0x24
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	085b      	lsrs	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	1dbb      	adds	r3, r7, #6
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b29c      	uxth	r4, r3
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	8819      	ldrh	r1, [r3, #0]
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	8818      	ldrh	r0, [r3, #0]
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	0022      	movs	r2, r4
 8000da0:	f7ff ff00 	bl	8000ba4 <LCD_SetWindow>
    if (!mode) {
 8000da4:	2328      	movs	r3, #40	; 0x28
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d166      	bne.n	8000e7c <_LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 8000dae:	f7ff fc75 	bl	800069c <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 8000db2:	230e      	movs	r3, #14
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e054      	b.n	8000e66 <_LCD_DrawChar+0x12e>
            if (size==12)
 8000dbc:	2324      	movs	r3, #36	; 0x24
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b0c      	cmp	r3, #12
 8000dc4:	d110      	bne.n	8000de8 <_LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	230e      	movs	r3, #14
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	7818      	ldrb	r0, [r3, #0]
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	18f9      	adds	r1, r7, r3
 8000dd6:	4c61      	ldr	r4, [pc, #388]	; (8000f5c <_LCD_DrawChar+0x224>)
 8000dd8:	0013      	movs	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	189b      	adds	r3, r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	18e3      	adds	r3, r4, r3
 8000de2:	5c1b      	ldrb	r3, [r3, r0]
 8000de4:	700b      	strb	r3, [r1, #0]
 8000de6:	e00c      	b.n	8000e02 <_LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 8000de8:	2320      	movs	r3, #32
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	7819      	ldrb	r1, [r3, #0]
 8000dee:	230e      	movs	r3, #14
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	230f      	movs	r3, #15
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	4859      	ldr	r0, [pc, #356]	; (8000f60 <_LCD_DrawChar+0x228>)
 8000dfa:	0109      	lsls	r1, r1, #4
 8000dfc:	1841      	adds	r1, r0, r1
 8000dfe:	5c8a      	ldrb	r2, [r1, r2]
 8000e00:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8000e02:	230d      	movs	r3, #13
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e01c      	b.n	8000e46 <_LCD_DrawChar+0x10e>
                if (temp&0x01)
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2201      	movs	r2, #1
 8000e14:	4013      	ands	r3, r2
 8000e16:	d005      	beq.n	8000e24 <_LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 8000e18:	1cbb      	adds	r3, r7, #2
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fc51 	bl	80006c4 <LCD_WriteData16>
 8000e22:	e004      	b.n	8000e2e <_LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 8000e24:	003b      	movs	r3, r7
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff fc4b 	bl	80006c4 <LCD_WriteData16>
                temp>>=1;
 8000e2e:	220f      	movs	r2, #15
 8000e30:	18bb      	adds	r3, r7, r2
 8000e32:	18ba      	adds	r2, r7, r2
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	0852      	lsrs	r2, r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8000e3a:	210d      	movs	r1, #13
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	3201      	adds	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	2324      	movs	r3, #36	; 0x24
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	085b      	lsrs	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	220d      	movs	r2, #13
 8000e52:	18ba      	adds	r2, r7, r2
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3d8      	bcc.n	8000e0c <_LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 8000e5a:	210e      	movs	r1, #14
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	781a      	ldrb	r2, [r3, #0]
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	3201      	adds	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	230e      	movs	r3, #14
 8000e68:	18fa      	adds	r2, r7, r3
 8000e6a:	2324      	movs	r3, #36	; 0x24
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d3a2      	bcc.n	8000dbc <_LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 8000e76:	f7ff fc3b 	bl	80006f0 <LCD_WriteData16_End>
                    _LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 8000e7a:	e06b      	b.n	8000f54 <_LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 8000e7c:	230e      	movs	r3, #14
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e05e      	b.n	8000f44 <_LCD_DrawChar+0x20c>
            if (size==12)
 8000e86:	2324      	movs	r3, #36	; 0x24
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b0c      	cmp	r3, #12
 8000e8e:	d110      	bne.n	8000eb2 <_LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 8000e90:	2320      	movs	r3, #32
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	230e      	movs	r3, #14
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	7818      	ldrb	r0, [r3, #0]
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18f9      	adds	r1, r7, r3
 8000ea0:	4c2e      	ldr	r4, [pc, #184]	; (8000f5c <_LCD_DrawChar+0x224>)
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	189b      	adds	r3, r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	18e3      	adds	r3, r4, r3
 8000eac:	5c1b      	ldrb	r3, [r3, r0]
 8000eae:	700b      	strb	r3, [r1, #0]
 8000eb0:	e00c      	b.n	8000ecc <_LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	7819      	ldrb	r1, [r3, #0]
 8000eb8:	230e      	movs	r3, #14
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	781a      	ldrb	r2, [r3, #0]
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	4827      	ldr	r0, [pc, #156]	; (8000f60 <_LCD_DrawChar+0x228>)
 8000ec4:	0109      	lsls	r1, r1, #4
 8000ec6:	1841      	adds	r1, r0, r1
 8000ec8:	5c8a      	ldrb	r2, [r1, r2]
 8000eca:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8000ecc:	230d      	movs	r3, #13
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
 8000ed4:	e026      	b.n	8000f24 <_LCD_DrawChar+0x1ec>
                if(temp&0x01)
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d014      	beq.n	8000f0c <_LCD_DrawChar+0x1d4>
                    _LCD_DrawPoint(x+t,y+pos,fc);
 8000ee2:	230d      	movs	r3, #13
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	1dbb      	adds	r3, r7, #6
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	18d3      	adds	r3, r2, r3
 8000ef0:	b298      	uxth	r0, r3
 8000ef2:	230e      	movs	r3, #14
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	18d3      	adds	r3, r2, r3
 8000f00:	b299      	uxth	r1, r3
 8000f02:	1cbb      	adds	r3, r7, #2
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	001a      	movs	r2, r3
 8000f08:	f7ff feee 	bl	8000ce8 <_LCD_DrawPoint>
                temp>>=1;
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	18bb      	adds	r3, r7, r2
 8000f10:	18ba      	adds	r2, r7, r2
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	0852      	lsrs	r2, r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8000f18:	210d      	movs	r1, #13
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	3201      	adds	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	2324      	movs	r3, #36	; 0x24
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	085b      	lsrs	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	220d      	movs	r2, #13
 8000f30:	18ba      	adds	r2, r7, r2
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3ce      	bcc.n	8000ed6 <_LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 8000f38:	210e      	movs	r1, #14
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	3201      	adds	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	230e      	movs	r3, #14
 8000f46:	18fa      	adds	r2, r7, r3
 8000f48:	2324      	movs	r3, #36	; 0x24
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d398      	bcc.n	8000e86 <_LCD_DrawChar+0x14e>
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b004      	add	sp, #16
 8000f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5c:	08002734 	.word	0x08002734
 8000f60:	08002ba8 	.word	0x08002ba8

08000f64 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 8000f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	0005      	movs	r5, r0
 8000f6c:	000c      	movs	r4, r1
 8000f6e:	0010      	movs	r0, r2
 8000f70:	0019      	movs	r1, r3
 8000f72:	1dbb      	adds	r3, r7, #6
 8000f74:	1c2a      	adds	r2, r5, #0
 8000f76:	801a      	strh	r2, [r3, #0]
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	1c22      	adds	r2, r4, #0
 8000f7c:	801a      	strh	r2, [r3, #0]
 8000f7e:	1cbb      	adds	r3, r7, #2
 8000f80:	1c02      	adds	r2, r0, #0
 8000f82:	801a      	strh	r2, [r3, #0]
 8000f84:	003b      	movs	r3, r7
 8000f86:	1c0a      	adds	r2, r1, #0
 8000f88:	801a      	strh	r2, [r3, #0]
    lcddev.select(1);
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <LCD_DrawString+0xc0>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	2001      	movs	r0, #1
 8000f90:	4798      	blx	r3
    while((*p<='~')&&(*p>=' '))
 8000f92:	e035      	b.n	8001000 <LCD_DrawString+0x9c>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <LCD_DrawString+0xc0>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	1dba      	adds	r2, r7, #6
 8000f9a:	8812      	ldrh	r2, [r2, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d23c      	bcs.n	800101a <LCD_DrawString+0xb6>
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <LCD_DrawString+0xc0>)
 8000fa2:	885b      	ldrh	r3, [r3, #2]
 8000fa4:	1d3a      	adds	r2, r7, #4
 8000fa6:	8812      	ldrh	r2, [r2, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d236      	bcs.n	800101a <LCD_DrawString+0xb6>
        return;
        _LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	003a      	movs	r2, r7
 8000fb2:	8815      	ldrh	r5, [r2, #0]
 8000fb4:	1cba      	adds	r2, r7, #2
 8000fb6:	8814      	ldrh	r4, [r2, #0]
 8000fb8:	1d3a      	adds	r2, r7, #4
 8000fba:	8811      	ldrh	r1, [r2, #0]
 8000fbc:	1dba      	adds	r2, r7, #6
 8000fbe:	8810      	ldrh	r0, [r2, #0]
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	2608      	movs	r6, #8
 8000fc4:	1992      	adds	r2, r2, r6
 8000fc6:	19d2      	adds	r2, r2, r7
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	9202      	str	r2, [sp, #8]
 8000fcc:	261c      	movs	r6, #28
 8000fce:	2208      	movs	r2, #8
 8000fd0:	18b2      	adds	r2, r6, r2
 8000fd2:	19d2      	adds	r2, r2, r7
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	9201      	str	r2, [sp, #4]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	002b      	movs	r3, r5
 8000fdc:	0022      	movs	r2, r4
 8000fde:	f7ff feab 	bl	8000d38 <_LCD_DrawChar>
        x+=size/2;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	18f3      	adds	r3, r6, r3
 8000fe6:	19db      	adds	r3, r3, r7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	085b      	lsrs	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	b299      	uxth	r1, r3
 8000ff0:	1dbb      	adds	r3, r7, #6
 8000ff2:	1dba      	adds	r2, r7, #6
 8000ff4:	8812      	ldrh	r2, [r2, #0]
 8000ff6:	188a      	adds	r2, r1, r2
 8000ff8:	801a      	strh	r2, [r3, #0]
        p++;
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b7e      	cmp	r3, #126	; 0x7e
 8001006:	d803      	bhi.n	8001010 <LCD_DrawString+0xac>
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b1f      	cmp	r3, #31
 800100e:	d8c1      	bhi.n	8000f94 <LCD_DrawString+0x30>
    }
    lcddev.select(0);
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <LCD_DrawString+0xc0>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	2000      	movs	r0, #0
 8001016:	4798      	blx	r3
 8001018:	e000      	b.n	800101c <LCD_DrawString+0xb8>
        return;
 800101a:	46c0      	nop			; (mov r8, r8)
}
 800101c:	46bd      	mov	sp, r7
 800101e:	b003      	add	sp, #12
 8001020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	20000090 	.word	0x20000090

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b093      	sub	sp, #76	; 0x4c
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	2414      	movs	r4, #20
 8001030:	193b      	adds	r3, r7, r4
 8001032:	0018      	movs	r0, r3
 8001034:	2334      	movs	r3, #52	; 0x34
 8001036:	001a      	movs	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	f000 fec1 	bl	8001dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	0018      	movs	r0, r3
 8001042:	2310      	movs	r3, #16
 8001044:	001a      	movs	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	f000 feba 	bl	8001dc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800104c:	193b      	adds	r3, r7, r4
 800104e:	2220      	movs	r2, #32
 8001050:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2201      	movs	r2, #1
 8001056:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001058:	193b      	adds	r3, r7, r4
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	193b      	adds	r3, r7, r4
 8001060:	0018      	movs	r0, r3
 8001062:	f000 f9a3 	bl	80013ac <HAL_RCC_OscConfig>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800106a:	f000 f819 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2203      	movs	r2, #3
 8001078:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2101      	movs	r1, #1
 800108a:	0018      	movs	r0, r3
 800108c:	f000 fd14 	bl	8001ab8 <HAL_RCC_ClockConfig>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001094:	f000 f804 	bl	80010a0 <Error_Handler>
  }
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b013      	add	sp, #76	; 0x4c
 800109e:	bd90      	pop	{r4, r7, pc}

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>

080010aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <HardFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ce:	f000 f89d 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f000 fe30 	bl	8001d6c <__errno>
 800110c:	0003      	movs	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	2301      	movs	r3, #1
 8001114:	425b      	negs	r3, r3
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	18d2      	adds	r2, r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b006      	add	sp, #24
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20008000 	.word	0x20008000
 8001138:	00000400 	.word	0x00000400
 800113c:	200000ac 	.word	0x200000ac
 8001140:	200000c8 	.word	0x200000c8

08001144 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800117a:	f7ff ffe3 	bl	8001144 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800117e:	f000 fdfb 	bl	8001d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001182:	f7ff f9c5 	bl	8000510 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   r0, =_estack
 8001188:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001194:	080031e4 	.word	0x080031e4
  ldr r2, =_sbss
 8001198:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800119c:	200000c4 	.word	0x200000c4

080011a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_COMP_IRQHandler>
	...

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x5c>)
 80011ae:	681c      	ldr	r4, [r3, #0]
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_InitTick+0x60>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	0019      	movs	r1, r3
 80011b6:	23fa      	movs	r3, #250	; 0xfa
 80011b8:	0098      	lsls	r0, r3, #2
 80011ba:	f7fe ffad 	bl	8000118 <__udivsi3>
 80011be:	0003      	movs	r3, r0
 80011c0:	0019      	movs	r1, r3
 80011c2:	0020      	movs	r0, r4
 80011c4:	f7fe ffa8 	bl	8000118 <__udivsi3>
 80011c8:	0003      	movs	r3, r0
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 f8e1 	bl	8001392 <HAL_SYSTICK_Config>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e00f      	b.n	80011f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d80b      	bhi.n	80011f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	2301      	movs	r3, #1
 80011e2:	425b      	negs	r3, r3
 80011e4:	2200      	movs	r2, #0
 80011e6:	0018      	movs	r0, r3
 80011e8:	f000 f8be 	bl	8001368 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_InitTick+0x64>)
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b003      	add	sp, #12
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	001a      	movs	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	18d2      	adds	r2, r2, r3
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_IncTick+0x20>)
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000008 	.word	0x20000008
 800122c:	200000b0 	.word	0x200000b0

08001230 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	200000b0 	.word	0x200000b0

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	0002      	movs	r2, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b7f      	cmp	r3, #127	; 0x7f
 8001258:	d828      	bhi.n	80012ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125a:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <__NVIC_SetPriority+0xd4>)
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	33c0      	adds	r3, #192	; 0xc0
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	589b      	ldr	r3, [r3, r2]
 800126a:	1dfa      	adds	r2, r7, #7
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	0011      	movs	r1, r2
 8001270:	2203      	movs	r2, #3
 8001272:	400a      	ands	r2, r1
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	21ff      	movs	r1, #255	; 0xff
 8001278:	4091      	lsls	r1, r2
 800127a:	000a      	movs	r2, r1
 800127c:	43d2      	mvns	r2, r2
 800127e:	401a      	ands	r2, r3
 8001280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	019b      	lsls	r3, r3, #6
 8001286:	22ff      	movs	r2, #255	; 0xff
 8001288:	401a      	ands	r2, r3
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0018      	movs	r0, r3
 8001290:	2303      	movs	r3, #3
 8001292:	4003      	ands	r3, r0
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <__NVIC_SetPriority+0xd4>)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	430a      	orrs	r2, r1
 80012a4:	33c0      	adds	r3, #192	; 0xc0
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012aa:	e031      	b.n	8001310 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <__NVIC_SetPriority+0xd8>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0019      	movs	r1, r3
 80012b4:	230f      	movs	r3, #15
 80012b6:	400b      	ands	r3, r1
 80012b8:	3b08      	subs	r3, #8
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3306      	adds	r3, #6
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	3304      	adds	r3, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1dfa      	adds	r2, r7, #7
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	0011      	movs	r1, r2
 80012cc:	2203      	movs	r2, #3
 80012ce:	400a      	ands	r2, r1
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	21ff      	movs	r1, #255	; 0xff
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	43d2      	mvns	r2, r2
 80012da:	401a      	ands	r2, r3
 80012dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	22ff      	movs	r2, #255	; 0xff
 80012e4:	401a      	ands	r2, r3
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	2303      	movs	r3, #3
 80012ee:	4003      	ands	r3, r0
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <__NVIC_SetPriority+0xd8>)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	001c      	movs	r4, r3
 80012fc:	230f      	movs	r3, #15
 80012fe:	4023      	ands	r3, r4
 8001300:	3b08      	subs	r3, #8
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	3306      	adds	r3, #6
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	18c3      	adds	r3, r0, r3
 800130c:	3304      	adds	r3, #4
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b003      	add	sp, #12
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	045b      	lsls	r3, r3, #17
 8001330:	429a      	cmp	r2, r3
 8001332:	d301      	bcc.n	8001338 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001334:	2301      	movs	r3, #1
 8001336:	e010      	b.n	800135a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <SysTick_Config+0x44>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	3a01      	subs	r2, #1
 800133e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001340:	2301      	movs	r3, #1
 8001342:	425b      	negs	r3, r3
 8001344:	2103      	movs	r1, #3
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff ff7c 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x44>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x44>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	210f      	movs	r1, #15
 8001374:	187b      	adds	r3, r7, r1
 8001376:	1c02      	adds	r2, r0, #0
 8001378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	187b      	adds	r3, r7, r1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ffbf 	bl	8001320 <SysTick_Config>
 80013a2:	0003      	movs	r3, r0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f000 fb76 	bl	8001aac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	d100      	bne.n	80013cc <HAL_RCC_OscConfig+0x20>
 80013ca:	e08e      	b.n	80014ea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013cc:	4bc5      	ldr	r3, [pc, #788]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	220c      	movs	r2, #12
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d00e      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013d8:	4bc2      	ldr	r3, [pc, #776]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	220c      	movs	r2, #12
 80013de:	4013      	ands	r3, r2
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d117      	bne.n	8001414 <HAL_RCC_OscConfig+0x68>
 80013e4:	4bbf      	ldr	r3, [pc, #764]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	23c0      	movs	r3, #192	; 0xc0
 80013ea:	025b      	lsls	r3, r3, #9
 80013ec:	401a      	ands	r2, r3
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	025b      	lsls	r3, r3, #9
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d10e      	bne.n	8001414 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f6:	4bbb      	ldr	r3, [pc, #748]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	029b      	lsls	r3, r3, #10
 80013fe:	4013      	ands	r3, r2
 8001400:	d100      	bne.n	8001404 <HAL_RCC_OscConfig+0x58>
 8001402:	e071      	b.n	80014e8 <HAL_RCC_OscConfig+0x13c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d000      	beq.n	800140e <HAL_RCC_OscConfig+0x62>
 800140c:	e06c      	b.n	80014e8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	f000 fb4c 	bl	8001aac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d107      	bne.n	800142c <HAL_RCC_OscConfig+0x80>
 800141c:	4bb1      	ldr	r3, [pc, #708]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4bb0      	ldr	r3, [pc, #704]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	0249      	lsls	r1, r1, #9
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e02f      	b.n	800148c <HAL_RCC_OscConfig+0xe0>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10c      	bne.n	800144e <HAL_RCC_OscConfig+0xa2>
 8001434:	4bab      	ldr	r3, [pc, #684]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4baa      	ldr	r3, [pc, #680]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800143a:	49ab      	ldr	r1, [pc, #684]	; (80016e8 <HAL_RCC_OscConfig+0x33c>)
 800143c:	400a      	ands	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	4ba8      	ldr	r3, [pc, #672]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4ba7      	ldr	r3, [pc, #668]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001446:	49a9      	ldr	r1, [pc, #676]	; (80016ec <HAL_RCC_OscConfig+0x340>)
 8001448:	400a      	ands	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e01e      	b.n	800148c <HAL_RCC_OscConfig+0xe0>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b05      	cmp	r3, #5
 8001454:	d10e      	bne.n	8001474 <HAL_RCC_OscConfig+0xc8>
 8001456:	4ba3      	ldr	r3, [pc, #652]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4ba2      	ldr	r3, [pc, #648]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	02c9      	lsls	r1, r1, #11
 8001460:	430a      	orrs	r2, r1
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	4b9f      	ldr	r3, [pc, #636]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0249      	lsls	r1, r1, #9
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0xe0>
 8001474:	4b9b      	ldr	r3, [pc, #620]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b9a      	ldr	r3, [pc, #616]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800147a:	499b      	ldr	r1, [pc, #620]	; (80016e8 <HAL_RCC_OscConfig+0x33c>)
 800147c:	400a      	ands	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	4b98      	ldr	r3, [pc, #608]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b97      	ldr	r3, [pc, #604]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001486:	4999      	ldr	r1, [pc, #612]	; (80016ec <HAL_RCC_OscConfig+0x340>)
 8001488:	400a      	ands	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d014      	beq.n	80014be <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fecc 	bl	8001230 <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149e:	f7ff fec7 	bl	8001230 <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b64      	cmp	r3, #100	; 0x64
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e2fd      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b0:	4b8c      	ldr	r3, [pc, #560]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	029b      	lsls	r3, r3, #10
 80014b8:	4013      	ands	r3, r2
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0xf2>
 80014bc:	e015      	b.n	80014ea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff feb7 	bl	8001230 <HAL_GetTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff feb2 	bl	8001230 <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e2e8      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	4b82      	ldr	r3, [pc, #520]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	029b      	lsls	r3, r3, #10
 80014e2:	4013      	ands	r3, r2
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x11c>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d100      	bne.n	80014f6 <HAL_RCC_OscConfig+0x14a>
 80014f4:	e06c      	b.n	80015d0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014f6:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	220c      	movs	r2, #12
 80014fc:	4013      	ands	r3, r2
 80014fe:	d00e      	beq.n	800151e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001500:	4b78      	ldr	r3, [pc, #480]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	220c      	movs	r2, #12
 8001506:	4013      	ands	r3, r2
 8001508:	2b08      	cmp	r3, #8
 800150a:	d11f      	bne.n	800154c <HAL_RCC_OscConfig+0x1a0>
 800150c:	4b75      	ldr	r3, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	23c0      	movs	r3, #192	; 0xc0
 8001512:	025b      	lsls	r3, r3, #9
 8001514:	401a      	ands	r2, r3
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	429a      	cmp	r2, r3
 800151c:	d116      	bne.n	800154c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d005      	beq.n	8001534 <HAL_RCC_OscConfig+0x188>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e2bb      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	22f8      	movs	r2, #248	; 0xf8
 800153a:	4393      	bics	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	00da      	lsls	r2, r3, #3
 8001544:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	e041      	b.n	80015d0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d024      	beq.n	800159e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001554:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b62      	ldr	r3, [pc, #392]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fe66 	bl	8001230 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fe61 	bl	8001230 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e297      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d0f1      	beq.n	800156a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	22f8      	movs	r2, #248	; 0xf8
 800158c:	4393      	bics	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	00da      	lsls	r2, r3, #3
 8001596:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e018      	b.n	80015d0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	438a      	bics	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fe41 	bl	8001230 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff fe3c 	bl	8001230 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e272      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2202      	movs	r2, #2
 80015cc:	4013      	ands	r3, r2
 80015ce:	d1f1      	bne.n	80015b4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2208      	movs	r2, #8
 80015d6:	4013      	ands	r3, r2
 80015d8:	d036      	beq.n	8001648 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d019      	beq.n	8001616 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80015e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e6:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	430a      	orrs	r2, r1
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fe1f 	bl	8001230 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fe1a 	bl	8001230 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e250      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d0f1      	beq.n	80015f8 <HAL_RCC_OscConfig+0x24c>
 8001614:	e018      	b.n	8001648 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800161c:	2101      	movs	r1, #1
 800161e:	438a      	bics	r2, r1
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fe05 	bl	8001230 <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fe00 	bl	8001230 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e236      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d1f1      	bne.n	800162c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2204      	movs	r2, #4
 800164e:	4013      	ands	r3, r2
 8001650:	d100      	bne.n	8001654 <HAL_RCC_OscConfig+0x2a8>
 8001652:	e0b5      	b.n	80017c0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001654:	201f      	movs	r0, #31
 8001656:	183b      	adds	r3, r7, r0
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800165e:	69da      	ldr	r2, [r3, #28]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	055b      	lsls	r3, r3, #21
 8001664:	4013      	ands	r3, r2
 8001666:	d110      	bne.n	800168a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0549      	lsls	r1, r1, #21
 8001672:	430a      	orrs	r2, r1
 8001674:	61da      	str	r2, [r3, #28]
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	055b      	lsls	r3, r3, #21
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001684:	183b      	adds	r3, r7, r0
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_OscConfig+0x344>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d11a      	bne.n	80016cc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_RCC_OscConfig+0x344>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_RCC_OscConfig+0x344>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0049      	lsls	r1, r1, #1
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fdc4 	bl	8001230 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff fdbf 	bl	8001230 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b64      	cmp	r3, #100	; 0x64
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e1f5      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_OscConfig+0x344>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d10f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x348>
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
 80016da:	2101      	movs	r1, #1
 80016dc:	430a      	orrs	r2, r1
 80016de:	621a      	str	r2, [r3, #32]
 80016e0:	e036      	b.n	8001750 <HAL_RCC_OscConfig+0x3a4>
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	40021000 	.word	0x40021000
 80016e8:	fffeffff 	.word	0xfffeffff
 80016ec:	fffbffff 	.word	0xfffbffff
 80016f0:	40007000 	.word	0x40007000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x36a>
 80016fc:	4bca      	ldr	r3, [pc, #808]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80016fe:	6a1a      	ldr	r2, [r3, #32]
 8001700:	4bc9      	ldr	r3, [pc, #804]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	621a      	str	r2, [r3, #32]
 8001708:	4bc7      	ldr	r3, [pc, #796]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	4bc6      	ldr	r3, [pc, #792]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800170e:	2104      	movs	r1, #4
 8001710:	438a      	bics	r2, r1
 8001712:	621a      	str	r2, [r3, #32]
 8001714:	e01c      	b.n	8001750 <HAL_RCC_OscConfig+0x3a4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x38c>
 800171e:	4bc2      	ldr	r3, [pc, #776]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001720:	6a1a      	ldr	r2, [r3, #32]
 8001722:	4bc1      	ldr	r3, [pc, #772]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001724:	2104      	movs	r1, #4
 8001726:	430a      	orrs	r2, r1
 8001728:	621a      	str	r2, [r3, #32]
 800172a:	4bbf      	ldr	r3, [pc, #764]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800172c:	6a1a      	ldr	r2, [r3, #32]
 800172e:	4bbe      	ldr	r3, [pc, #760]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001730:	2101      	movs	r1, #1
 8001732:	430a      	orrs	r2, r1
 8001734:	621a      	str	r2, [r3, #32]
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0x3a4>
 8001738:	4bbb      	ldr	r3, [pc, #748]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	4bba      	ldr	r3, [pc, #744]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800173e:	2101      	movs	r1, #1
 8001740:	438a      	bics	r2, r1
 8001742:	621a      	str	r2, [r3, #32]
 8001744:	4bb8      	ldr	r3, [pc, #736]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	4bb7      	ldr	r3, [pc, #732]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800174a:	2104      	movs	r1, #4
 800174c:	438a      	bics	r2, r1
 800174e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d014      	beq.n	8001782 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fd6a 	bl	8001230 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	e009      	b.n	8001776 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fd65 	bl	8001230 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4aaf      	ldr	r2, [pc, #700]	; (8001a2c <HAL_RCC_OscConfig+0x680>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e19a      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	4bac      	ldr	r3, [pc, #688]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	2202      	movs	r2, #2
 800177c:	4013      	ands	r3, r2
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x3b6>
 8001780:	e013      	b.n	80017aa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fd55 	bl	8001230 <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	e009      	b.n	80017a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff fd50 	bl	8001230 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	4aa5      	ldr	r2, [pc, #660]	; (8001a2c <HAL_RCC_OscConfig+0x680>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e185      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	4ba1      	ldr	r3, [pc, #644]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017aa:	231f      	movs	r3, #31
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b4:	4b9c      	ldr	r3, [pc, #624]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80017b6:	69da      	ldr	r2, [r3, #28]
 80017b8:	4b9b      	ldr	r3, [pc, #620]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80017ba:	499d      	ldr	r1, [pc, #628]	; (8001a30 <HAL_RCC_OscConfig+0x684>)
 80017bc:	400a      	ands	r2, r1
 80017be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2210      	movs	r2, #16
 80017c6:	4013      	ands	r3, r2
 80017c8:	d063      	beq.n	8001892 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d12a      	bne.n	8001828 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017d2:	4b95      	ldr	r3, [pc, #596]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80017d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d6:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80017d8:	2104      	movs	r1, #4
 80017da:	430a      	orrs	r2, r1
 80017dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017de:	4b92      	ldr	r3, [pc, #584]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80017e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e2:	4b91      	ldr	r3, [pc, #580]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fd21 	bl	8001230 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017f4:	f7ff fd1c 	bl	8001230 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e152      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001806:	4b88      	ldr	r3, [pc, #544]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180a:	2202      	movs	r2, #2
 800180c:	4013      	ands	r3, r2
 800180e:	d0f1      	beq.n	80017f4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001810:	4b85      	ldr	r3, [pc, #532]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	22f8      	movs	r2, #248	; 0xf8
 8001816:	4393      	bics	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	00da      	lsls	r2, r3, #3
 8001820:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001822:	430a      	orrs	r2, r1
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
 8001826:	e034      	b.n	8001892 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	3305      	adds	r3, #5
 800182e:	d111      	bne.n	8001854 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001830:	4b7d      	ldr	r3, [pc, #500]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001834:	4b7c      	ldr	r3, [pc, #496]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001836:	2104      	movs	r1, #4
 8001838:	438a      	bics	r2, r1
 800183a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800183c:	4b7a      	ldr	r3, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800183e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001840:	22f8      	movs	r2, #248	; 0xf8
 8001842:	4393      	bics	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	00da      	lsls	r2, r3, #3
 800184c:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800184e:	430a      	orrs	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
 8001852:	e01e      	b.n	8001892 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001854:	4b74      	ldr	r3, [pc, #464]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001858:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800185a:	2104      	movs	r1, #4
 800185c:	430a      	orrs	r2, r1
 800185e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001860:	4b71      	ldr	r3, [pc, #452]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001864:	4b70      	ldr	r3, [pc, #448]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff fce0 	bl	8001230 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001876:	f7ff fcdb 	bl	8001230 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e111      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001888:	4b67      	ldr	r3, [pc, #412]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	2202      	movs	r2, #2
 800188e:	4013      	ands	r3, r2
 8001890:	d1f1      	bne.n	8001876 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2220      	movs	r2, #32
 8001898:	4013      	ands	r3, r2
 800189a:	d05c      	beq.n	8001956 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800189c:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	220c      	movs	r2, #12
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d00e      	beq.n	80018c6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018a8:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	220c      	movs	r2, #12
 80018ae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d114      	bne.n	80018de <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018b4:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	23c0      	movs	r3, #192	; 0xc0
 80018ba:	025b      	lsls	r3, r3, #9
 80018bc:	401a      	ands	r2, r3
 80018be:	23c0      	movs	r3, #192	; 0xc0
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d10b      	bne.n	80018de <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018c6:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80018c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	025b      	lsls	r3, r3, #9
 80018ce:	4013      	ands	r3, r2
 80018d0:	d040      	beq.n	8001954 <HAL_RCC_OscConfig+0x5a8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d03c      	beq.n	8001954 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0e6      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d01b      	beq.n	800191e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ea:	4b4f      	ldr	r3, [pc, #316]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0249      	lsls	r1, r1, #9
 80018f0:	430a      	orrs	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fc9c 	bl	8001230 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fe:	f7ff fc97 	bl	8001230 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0cd      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001910:	4b45      	ldr	r3, [pc, #276]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	4013      	ands	r3, r2
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x552>
 800191c:	e01b      	b.n	8001956 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800191e:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001924:	4943      	ldr	r1, [pc, #268]	; (8001a34 <HAL_RCC_OscConfig+0x688>)
 8001926:	400a      	ands	r2, r1
 8001928:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff fc81 	bl	8001230 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001934:	f7ff fc7c 	bl	8001230 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0b2      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	4013      	ands	r3, r2
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x588>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001954:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	2b00      	cmp	r3, #0
 800195c:	d100      	bne.n	8001960 <HAL_RCC_OscConfig+0x5b4>
 800195e:	e0a4      	b.n	8001aaa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	220c      	movs	r2, #12
 8001966:	4013      	ands	r3, r2
 8001968:	2b08      	cmp	r3, #8
 800196a:	d100      	bne.n	800196e <HAL_RCC_OscConfig+0x5c2>
 800196c:	e078      	b.n	8001a60 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	2b02      	cmp	r3, #2
 8001974:	d14c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 800197c:	492e      	ldr	r1, [pc, #184]	; (8001a38 <HAL_RCC_OscConfig+0x68c>)
 800197e:	400a      	ands	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff fc55 	bl	8001230 <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fc50 	bl	8001230 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e086      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	049b      	lsls	r3, r3, #18
 80019a6:	4013      	ands	r3, r2
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	220f      	movs	r2, #15
 80019b0:	4393      	bics	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_RCC_OscConfig+0x690>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	431a      	orrs	r2, r3
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	0449      	lsls	r1, r1, #17
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fc23 	bl	8001230 <HAL_GetTick>
 80019ea:	0003      	movs	r3, r0
 80019ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff fc1e 	bl	8001230 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e054      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	049b      	lsls	r3, r3, #18
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x644>
 8001a0e:	e04c      	b.n	8001aaa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_RCC_OscConfig+0x67c>)
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <HAL_RCC_OscConfig+0x68c>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc08 	bl	8001230 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x6a6>
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	00001388 	.word	0x00001388
 8001a30:	efffffff 	.word	0xefffffff
 8001a34:	fffeffff 	.word	0xfffeffff
 8001a38:	feffffff 	.word	0xfeffffff
 8001a3c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff fbf6 	bl	8001230 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e02c      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x708>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x694>
 8001a5e:	e024      	b.n	8001aaa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e01f      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_RCC_OscConfig+0x708>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_OscConfig+0x708>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	23c0      	movs	r3, #192	; 0xc0
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d10e      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	23f0      	movs	r3, #240	; 0xf0
 8001a9a:	039b      	lsls	r3, r3, #14
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b008      	add	sp, #32
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0bf      	b.n	8001c4c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_RCC_ClockConfig+0x19c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d911      	bls.n	8001afe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <HAL_RCC_ClockConfig+0x19c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_RCC_ClockConfig+0x19c>)
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_ClockConfig+0x19c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0a6      	b.n	8001c4c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d006      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b12:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b18:	21e0      	movs	r1, #224	; 0xe0
 8001b1a:	00c9      	lsls	r1, r1, #3
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	22f0      	movs	r2, #240	; 0xf0
 8001b26:	4393      	bics	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d04c      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	029b      	lsls	r3, r3, #10
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d120      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07a      	b.n	8001c4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	049b      	lsls	r3, r3, #18
 8001b66:	4013      	ands	r3, r2
 8001b68:	d114      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06e      	b.n	8001c4c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e062      	b.n	8001c4c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e05b      	b.n	8001c4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff fb42 	bl	8001230 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7ff fb3d 	bl	8001230 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <HAL_RCC_ClockConfig+0x1a4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e042      	b.n	8001c4c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1ec      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_ClockConfig+0x19c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d211      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_ClockConfig+0x19c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_ClockConfig+0x19c>)
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x19c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e020      	b.n	8001c4c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4013      	ands	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_RCC_ClockConfig+0x1a8>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c28:	f000 f820 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2c:	0001      	movs	r1, r0
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x1a0>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	220f      	movs	r2, #15
 8001c36:	4013      	ands	r3, r2
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1ac>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	40da      	lsrs	r2, r3
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001c42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f7ff faad 	bl	80011a4 <HAL_InitTick>
  
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	00001388 	.word	0x00001388
 8001c60:	fffff8ff 	.word	0xfffff8ff
 8001c64:	08003198 	.word	0x08003198
 8001c68:	20000000 	.word	0x20000000

08001c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b08f      	sub	sp, #60	; 0x3c
 8001c70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c72:	2314      	movs	r3, #20
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	4a38      	ldr	r2, [pc, #224]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xec>)
 8001c78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c7a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4a36      	ldr	r2, [pc, #216]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c86:	c313      	stmia	r3!, {r0, r1, r4}
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	220c      	movs	r2, #12
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d047      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0xd4>
 8001cb0:	d849      	bhi.n	8001d46 <HAL_RCC_GetSysClockFreq+0xda>
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x50>
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x56>
 8001cba:	e044      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cc0:	e044      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	0c9b      	lsrs	r3, r3, #18
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2214      	movs	r2, #20
 8001ccc:	18ba      	adds	r2, r7, r2
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	4013      	ands	r3, r2
 8001cda:	1d3a      	adds	r2, r7, #4
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ce2:	23c0      	movs	r3, #192	; 0xc0
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d109      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cf2:	481c      	ldr	r0, [pc, #112]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf4:	f7fe fa10 	bl	8000118 <__udivsi3>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	4353      	muls	r3, r2
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
 8001d02:	e01a      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	025b      	lsls	r3, r3, #9
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d109      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d16:	4814      	ldr	r0, [pc, #80]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d18:	f7fe f9fe 	bl	8000118 <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	001a      	movs	r2, r3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	4353      	muls	r3, r2
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d2c:	f7fe f9f4 	bl	8000118 <__udivsi3>
 8001d30:	0003      	movs	r3, r0
 8001d32:	001a      	movs	r2, r3
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	4353      	muls	r3, r2
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d3e:	e005      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d44:	e002      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b00f      	add	sp, #60	; 0x3c
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	08002714 	.word	0x08002714
 8001d5c:	08002724 	.word	0x08002724
 8001d60:	40021000 	.word	0x40021000
 8001d64:	007a1200 	.word	0x007a1200
 8001d68:	02dc6c00 	.word	0x02dc6c00

08001d6c <__errno>:
 8001d6c:	4b01      	ldr	r3, [pc, #4]	; (8001d74 <__errno+0x8>)
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	4770      	bx	lr
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <__libc_init_array>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	2600      	movs	r6, #0
 8001d7c:	4d0c      	ldr	r5, [pc, #48]	; (8001db0 <__libc_init_array+0x38>)
 8001d7e:	4c0d      	ldr	r4, [pc, #52]	; (8001db4 <__libc_init_array+0x3c>)
 8001d80:	1b64      	subs	r4, r4, r5
 8001d82:	10a4      	asrs	r4, r4, #2
 8001d84:	42a6      	cmp	r6, r4
 8001d86:	d109      	bne.n	8001d9c <__libc_init_array+0x24>
 8001d88:	2600      	movs	r6, #0
 8001d8a:	f000 fc8b 	bl	80026a4 <_init>
 8001d8e:	4d0a      	ldr	r5, [pc, #40]	; (8001db8 <__libc_init_array+0x40>)
 8001d90:	4c0a      	ldr	r4, [pc, #40]	; (8001dbc <__libc_init_array+0x44>)
 8001d92:	1b64      	subs	r4, r4, r5
 8001d94:	10a4      	asrs	r4, r4, #2
 8001d96:	42a6      	cmp	r6, r4
 8001d98:	d105      	bne.n	8001da6 <__libc_init_array+0x2e>
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	00b3      	lsls	r3, r6, #2
 8001d9e:	58eb      	ldr	r3, [r5, r3]
 8001da0:	4798      	blx	r3
 8001da2:	3601      	adds	r6, #1
 8001da4:	e7ee      	b.n	8001d84 <__libc_init_array+0xc>
 8001da6:	00b3      	lsls	r3, r6, #2
 8001da8:	58eb      	ldr	r3, [r5, r3]
 8001daa:	4798      	blx	r3
 8001dac:	3601      	adds	r6, #1
 8001dae:	e7f2      	b.n	8001d96 <__libc_init_array+0x1e>
 8001db0:	080031dc 	.word	0x080031dc
 8001db4:	080031dc 	.word	0x080031dc
 8001db8:	080031dc 	.word	0x080031dc
 8001dbc:	080031e0 	.word	0x080031e0

08001dc0 <memset>:
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	1882      	adds	r2, r0, r2
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d100      	bne.n	8001dca <memset+0xa>
 8001dc8:	4770      	bx	lr
 8001dca:	7019      	strb	r1, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	e7f9      	b.n	8001dc4 <memset+0x4>

08001dd0 <siprintf>:
 8001dd0:	b40e      	push	{r1, r2, r3}
 8001dd2:	b500      	push	{lr}
 8001dd4:	490b      	ldr	r1, [pc, #44]	; (8001e04 <siprintf+0x34>)
 8001dd6:	b09c      	sub	sp, #112	; 0x70
 8001dd8:	ab1d      	add	r3, sp, #116	; 0x74
 8001dda:	9002      	str	r0, [sp, #8]
 8001ddc:	9006      	str	r0, [sp, #24]
 8001dde:	9107      	str	r1, [sp, #28]
 8001de0:	9104      	str	r1, [sp, #16]
 8001de2:	4809      	ldr	r0, [pc, #36]	; (8001e08 <siprintf+0x38>)
 8001de4:	4909      	ldr	r1, [pc, #36]	; (8001e0c <siprintf+0x3c>)
 8001de6:	cb04      	ldmia	r3!, {r2}
 8001de8:	9105      	str	r1, [sp, #20]
 8001dea:	6800      	ldr	r0, [r0, #0]
 8001dec:	a902      	add	r1, sp, #8
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f000 f870 	bl	8001ed4 <_svfiprintf_r>
 8001df4:	2300      	movs	r3, #0
 8001df6:	9a02      	ldr	r2, [sp, #8]
 8001df8:	7013      	strb	r3, [r2, #0]
 8001dfa:	b01c      	add	sp, #112	; 0x70
 8001dfc:	bc08      	pop	{r3}
 8001dfe:	b003      	add	sp, #12
 8001e00:	4718      	bx	r3
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	7fffffff 	.word	0x7fffffff
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	ffff0208 	.word	0xffff0208

08001e10 <__ssputs_r>:
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e12:	688e      	ldr	r6, [r1, #8]
 8001e14:	b085      	sub	sp, #20
 8001e16:	0007      	movs	r7, r0
 8001e18:	000c      	movs	r4, r1
 8001e1a:	9203      	str	r2, [sp, #12]
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	429e      	cmp	r6, r3
 8001e20:	d83c      	bhi.n	8001e9c <__ssputs_r+0x8c>
 8001e22:	2390      	movs	r3, #144	; 0x90
 8001e24:	898a      	ldrh	r2, [r1, #12]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	421a      	tst	r2, r3
 8001e2a:	d034      	beq.n	8001e96 <__ssputs_r+0x86>
 8001e2c:	6909      	ldr	r1, [r1, #16]
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	6960      	ldr	r0, [r4, #20]
 8001e32:	1a5b      	subs	r3, r3, r1
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	2303      	movs	r3, #3
 8001e38:	4343      	muls	r3, r0
 8001e3a:	0fdd      	lsrs	r5, r3, #31
 8001e3c:	18ed      	adds	r5, r5, r3
 8001e3e:	9b01      	ldr	r3, [sp, #4]
 8001e40:	9802      	ldr	r0, [sp, #8]
 8001e42:	3301      	adds	r3, #1
 8001e44:	181b      	adds	r3, r3, r0
 8001e46:	106d      	asrs	r5, r5, #1
 8001e48:	42ab      	cmp	r3, r5
 8001e4a:	d900      	bls.n	8001e4e <__ssputs_r+0x3e>
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0553      	lsls	r3, r2, #21
 8001e50:	d532      	bpl.n	8001eb8 <__ssputs_r+0xa8>
 8001e52:	0029      	movs	r1, r5
 8001e54:	0038      	movs	r0, r7
 8001e56:	f000 fb53 	bl	8002500 <_malloc_r>
 8001e5a:	1e06      	subs	r6, r0, #0
 8001e5c:	d109      	bne.n	8001e72 <__ssputs_r+0x62>
 8001e5e:	230c      	movs	r3, #12
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	2340      	movs	r3, #64	; 0x40
 8001e64:	2001      	movs	r0, #1
 8001e66:	89a2      	ldrh	r2, [r4, #12]
 8001e68:	4240      	negs	r0, r0
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	81a3      	strh	r3, [r4, #12]
 8001e6e:	b005      	add	sp, #20
 8001e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e72:	9a02      	ldr	r2, [sp, #8]
 8001e74:	6921      	ldr	r1, [r4, #16]
 8001e76:	f000 faba 	bl	80023ee <memcpy>
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <__ssputs_r+0xc0>)
 8001e7e:	401a      	ands	r2, r3
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	4313      	orrs	r3, r2
 8001e84:	81a3      	strh	r3, [r4, #12]
 8001e86:	9b02      	ldr	r3, [sp, #8]
 8001e88:	6126      	str	r6, [r4, #16]
 8001e8a:	18f6      	adds	r6, r6, r3
 8001e8c:	6026      	str	r6, [r4, #0]
 8001e8e:	6165      	str	r5, [r4, #20]
 8001e90:	9e01      	ldr	r6, [sp, #4]
 8001e92:	1aed      	subs	r5, r5, r3
 8001e94:	60a5      	str	r5, [r4, #8]
 8001e96:	9b01      	ldr	r3, [sp, #4]
 8001e98:	429e      	cmp	r6, r3
 8001e9a:	d900      	bls.n	8001e9e <__ssputs_r+0x8e>
 8001e9c:	9e01      	ldr	r6, [sp, #4]
 8001e9e:	0032      	movs	r2, r6
 8001ea0:	9903      	ldr	r1, [sp, #12]
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	f000 faac 	bl	8002400 <memmove>
 8001ea8:	68a3      	ldr	r3, [r4, #8]
 8001eaa:	2000      	movs	r0, #0
 8001eac:	1b9b      	subs	r3, r3, r6
 8001eae:	60a3      	str	r3, [r4, #8]
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	199e      	adds	r6, r3, r6
 8001eb4:	6026      	str	r6, [r4, #0]
 8001eb6:	e7da      	b.n	8001e6e <__ssputs_r+0x5e>
 8001eb8:	002a      	movs	r2, r5
 8001eba:	0038      	movs	r0, r7
 8001ebc:	f000 fb96 	bl	80025ec <_realloc_r>
 8001ec0:	1e06      	subs	r6, r0, #0
 8001ec2:	d1e0      	bne.n	8001e86 <__ssputs_r+0x76>
 8001ec4:	0038      	movs	r0, r7
 8001ec6:	6921      	ldr	r1, [r4, #16]
 8001ec8:	f000 faae 	bl	8002428 <_free_r>
 8001ecc:	e7c7      	b.n	8001e5e <__ssputs_r+0x4e>
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	fffffb7f 	.word	0xfffffb7f

08001ed4 <_svfiprintf_r>:
 8001ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed6:	b0a1      	sub	sp, #132	; 0x84
 8001ed8:	9003      	str	r0, [sp, #12]
 8001eda:	001d      	movs	r5, r3
 8001edc:	898b      	ldrh	r3, [r1, #12]
 8001ede:	000f      	movs	r7, r1
 8001ee0:	0016      	movs	r6, r2
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	d511      	bpl.n	8001f0a <_svfiprintf_r+0x36>
 8001ee6:	690b      	ldr	r3, [r1, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10e      	bne.n	8001f0a <_svfiprintf_r+0x36>
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	f000 fb07 	bl	8002500 <_malloc_r>
 8001ef2:	6038      	str	r0, [r7, #0]
 8001ef4:	6138      	str	r0, [r7, #16]
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d105      	bne.n	8001f06 <_svfiprintf_r+0x32>
 8001efa:	230c      	movs	r3, #12
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	3801      	subs	r0, #1
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	b021      	add	sp, #132	; 0x84
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f06:	2340      	movs	r3, #64	; 0x40
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	ac08      	add	r4, sp, #32
 8001f0e:	6163      	str	r3, [r4, #20]
 8001f10:	3320      	adds	r3, #32
 8001f12:	7663      	strb	r3, [r4, #25]
 8001f14:	3310      	adds	r3, #16
 8001f16:	76a3      	strb	r3, [r4, #26]
 8001f18:	9507      	str	r5, [sp, #28]
 8001f1a:	0035      	movs	r5, r6
 8001f1c:	782b      	ldrb	r3, [r5, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <_svfiprintf_r+0x52>
 8001f22:	2b25      	cmp	r3, #37	; 0x25
 8001f24:	d147      	bne.n	8001fb6 <_svfiprintf_r+0xe2>
 8001f26:	1bab      	subs	r3, r5, r6
 8001f28:	9305      	str	r3, [sp, #20]
 8001f2a:	42b5      	cmp	r5, r6
 8001f2c:	d00c      	beq.n	8001f48 <_svfiprintf_r+0x74>
 8001f2e:	0032      	movs	r2, r6
 8001f30:	0039      	movs	r1, r7
 8001f32:	9803      	ldr	r0, [sp, #12]
 8001f34:	f7ff ff6c 	bl	8001e10 <__ssputs_r>
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d100      	bne.n	8001f3e <_svfiprintf_r+0x6a>
 8001f3c:	e0ae      	b.n	800209c <_svfiprintf_r+0x1c8>
 8001f3e:	6962      	ldr	r2, [r4, #20]
 8001f40:	9b05      	ldr	r3, [sp, #20]
 8001f42:	4694      	mov	ip, r2
 8001f44:	4463      	add	r3, ip
 8001f46:	6163      	str	r3, [r4, #20]
 8001f48:	782b      	ldrb	r3, [r5, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d100      	bne.n	8001f50 <_svfiprintf_r+0x7c>
 8001f4e:	e0a5      	b.n	800209c <_svfiprintf_r+0x1c8>
 8001f50:	2201      	movs	r2, #1
 8001f52:	2300      	movs	r3, #0
 8001f54:	4252      	negs	r2, r2
 8001f56:	6062      	str	r2, [r4, #4]
 8001f58:	a904      	add	r1, sp, #16
 8001f5a:	3254      	adds	r2, #84	; 0x54
 8001f5c:	1852      	adds	r2, r2, r1
 8001f5e:	1c6e      	adds	r6, r5, #1
 8001f60:	6023      	str	r3, [r4, #0]
 8001f62:	60e3      	str	r3, [r4, #12]
 8001f64:	60a3      	str	r3, [r4, #8]
 8001f66:	7013      	strb	r3, [r2, #0]
 8001f68:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f6a:	2205      	movs	r2, #5
 8001f6c:	7831      	ldrb	r1, [r6, #0]
 8001f6e:	4854      	ldr	r0, [pc, #336]	; (80020c0 <_svfiprintf_r+0x1ec>)
 8001f70:	f000 fa32 	bl	80023d8 <memchr>
 8001f74:	1c75      	adds	r5, r6, #1
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d11f      	bne.n	8001fba <_svfiprintf_r+0xe6>
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	06d3      	lsls	r3, r2, #27
 8001f7e:	d504      	bpl.n	8001f8a <_svfiprintf_r+0xb6>
 8001f80:	2353      	movs	r3, #83	; 0x53
 8001f82:	a904      	add	r1, sp, #16
 8001f84:	185b      	adds	r3, r3, r1
 8001f86:	2120      	movs	r1, #32
 8001f88:	7019      	strb	r1, [r3, #0]
 8001f8a:	0713      	lsls	r3, r2, #28
 8001f8c:	d504      	bpl.n	8001f98 <_svfiprintf_r+0xc4>
 8001f8e:	2353      	movs	r3, #83	; 0x53
 8001f90:	a904      	add	r1, sp, #16
 8001f92:	185b      	adds	r3, r3, r1
 8001f94:	212b      	movs	r1, #43	; 0x2b
 8001f96:	7019      	strb	r1, [r3, #0]
 8001f98:	7833      	ldrb	r3, [r6, #0]
 8001f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8001f9c:	d016      	beq.n	8001fcc <_svfiprintf_r+0xf8>
 8001f9e:	0035      	movs	r5, r6
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	200a      	movs	r0, #10
 8001fa4:	68e3      	ldr	r3, [r4, #12]
 8001fa6:	782a      	ldrb	r2, [r5, #0]
 8001fa8:	1c6e      	adds	r6, r5, #1
 8001faa:	3a30      	subs	r2, #48	; 0x30
 8001fac:	2a09      	cmp	r2, #9
 8001fae:	d94e      	bls.n	800204e <_svfiprintf_r+0x17a>
 8001fb0:	2900      	cmp	r1, #0
 8001fb2:	d111      	bne.n	8001fd8 <_svfiprintf_r+0x104>
 8001fb4:	e017      	b.n	8001fe6 <_svfiprintf_r+0x112>
 8001fb6:	3501      	adds	r5, #1
 8001fb8:	e7b0      	b.n	8001f1c <_svfiprintf_r+0x48>
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <_svfiprintf_r+0x1ec>)
 8001fbc:	6822      	ldr	r2, [r4, #0]
 8001fbe:	1ac0      	subs	r0, r0, r3
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	4083      	lsls	r3, r0
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	002e      	movs	r6, r5
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	e7ce      	b.n	8001f6a <_svfiprintf_r+0x96>
 8001fcc:	9b07      	ldr	r3, [sp, #28]
 8001fce:	1d19      	adds	r1, r3, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	9107      	str	r1, [sp, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db01      	blt.n	8001fdc <_svfiprintf_r+0x108>
 8001fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001fda:	e004      	b.n	8001fe6 <_svfiprintf_r+0x112>
 8001fdc:	425b      	negs	r3, r3
 8001fde:	60e3      	str	r3, [r4, #12]
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	6023      	str	r3, [r4, #0]
 8001fe6:	782b      	ldrb	r3, [r5, #0]
 8001fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8001fea:	d10a      	bne.n	8002002 <_svfiprintf_r+0x12e>
 8001fec:	786b      	ldrb	r3, [r5, #1]
 8001fee:	2b2a      	cmp	r3, #42	; 0x2a
 8001ff0:	d135      	bne.n	800205e <_svfiprintf_r+0x18a>
 8001ff2:	9b07      	ldr	r3, [sp, #28]
 8001ff4:	3502      	adds	r5, #2
 8001ff6:	1d1a      	adds	r2, r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	9207      	str	r2, [sp, #28]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db2b      	blt.n	8002058 <_svfiprintf_r+0x184>
 8002000:	9309      	str	r3, [sp, #36]	; 0x24
 8002002:	4e30      	ldr	r6, [pc, #192]	; (80020c4 <_svfiprintf_r+0x1f0>)
 8002004:	2203      	movs	r2, #3
 8002006:	0030      	movs	r0, r6
 8002008:	7829      	ldrb	r1, [r5, #0]
 800200a:	f000 f9e5 	bl	80023d8 <memchr>
 800200e:	2800      	cmp	r0, #0
 8002010:	d006      	beq.n	8002020 <_svfiprintf_r+0x14c>
 8002012:	2340      	movs	r3, #64	; 0x40
 8002014:	1b80      	subs	r0, r0, r6
 8002016:	4083      	lsls	r3, r0
 8002018:	6822      	ldr	r2, [r4, #0]
 800201a:	3501      	adds	r5, #1
 800201c:	4313      	orrs	r3, r2
 800201e:	6023      	str	r3, [r4, #0]
 8002020:	7829      	ldrb	r1, [r5, #0]
 8002022:	2206      	movs	r2, #6
 8002024:	4828      	ldr	r0, [pc, #160]	; (80020c8 <_svfiprintf_r+0x1f4>)
 8002026:	1c6e      	adds	r6, r5, #1
 8002028:	7621      	strb	r1, [r4, #24]
 800202a:	f000 f9d5 	bl	80023d8 <memchr>
 800202e:	2800      	cmp	r0, #0
 8002030:	d03c      	beq.n	80020ac <_svfiprintf_r+0x1d8>
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <_svfiprintf_r+0x1f8>)
 8002034:	2b00      	cmp	r3, #0
 8002036:	d125      	bne.n	8002084 <_svfiprintf_r+0x1b0>
 8002038:	2207      	movs	r2, #7
 800203a:	9b07      	ldr	r3, [sp, #28]
 800203c:	3307      	adds	r3, #7
 800203e:	4393      	bics	r3, r2
 8002040:	3308      	adds	r3, #8
 8002042:	9307      	str	r3, [sp, #28]
 8002044:	6963      	ldr	r3, [r4, #20]
 8002046:	9a04      	ldr	r2, [sp, #16]
 8002048:	189b      	adds	r3, r3, r2
 800204a:	6163      	str	r3, [r4, #20]
 800204c:	e765      	b.n	8001f1a <_svfiprintf_r+0x46>
 800204e:	4343      	muls	r3, r0
 8002050:	0035      	movs	r5, r6
 8002052:	2101      	movs	r1, #1
 8002054:	189b      	adds	r3, r3, r2
 8002056:	e7a6      	b.n	8001fa6 <_svfiprintf_r+0xd2>
 8002058:	2301      	movs	r3, #1
 800205a:	425b      	negs	r3, r3
 800205c:	e7d0      	b.n	8002000 <_svfiprintf_r+0x12c>
 800205e:	2300      	movs	r3, #0
 8002060:	200a      	movs	r0, #10
 8002062:	001a      	movs	r2, r3
 8002064:	3501      	adds	r5, #1
 8002066:	6063      	str	r3, [r4, #4]
 8002068:	7829      	ldrb	r1, [r5, #0]
 800206a:	1c6e      	adds	r6, r5, #1
 800206c:	3930      	subs	r1, #48	; 0x30
 800206e:	2909      	cmp	r1, #9
 8002070:	d903      	bls.n	800207a <_svfiprintf_r+0x1a6>
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0c5      	beq.n	8002002 <_svfiprintf_r+0x12e>
 8002076:	9209      	str	r2, [sp, #36]	; 0x24
 8002078:	e7c3      	b.n	8002002 <_svfiprintf_r+0x12e>
 800207a:	4342      	muls	r2, r0
 800207c:	0035      	movs	r5, r6
 800207e:	2301      	movs	r3, #1
 8002080:	1852      	adds	r2, r2, r1
 8002082:	e7f1      	b.n	8002068 <_svfiprintf_r+0x194>
 8002084:	ab07      	add	r3, sp, #28
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	003a      	movs	r2, r7
 800208a:	0021      	movs	r1, r4
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <_svfiprintf_r+0x1fc>)
 800208e:	9803      	ldr	r0, [sp, #12]
 8002090:	e000      	b.n	8002094 <_svfiprintf_r+0x1c0>
 8002092:	bf00      	nop
 8002094:	9004      	str	r0, [sp, #16]
 8002096:	9b04      	ldr	r3, [sp, #16]
 8002098:	3301      	adds	r3, #1
 800209a:	d1d3      	bne.n	8002044 <_svfiprintf_r+0x170>
 800209c:	89bb      	ldrh	r3, [r7, #12]
 800209e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80020a0:	065b      	lsls	r3, r3, #25
 80020a2:	d400      	bmi.n	80020a6 <_svfiprintf_r+0x1d2>
 80020a4:	e72d      	b.n	8001f02 <_svfiprintf_r+0x2e>
 80020a6:	2001      	movs	r0, #1
 80020a8:	4240      	negs	r0, r0
 80020aa:	e72a      	b.n	8001f02 <_svfiprintf_r+0x2e>
 80020ac:	ab07      	add	r3, sp, #28
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	003a      	movs	r2, r7
 80020b2:	0021      	movs	r1, r4
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <_svfiprintf_r+0x1fc>)
 80020b6:	9803      	ldr	r0, [sp, #12]
 80020b8:	f000 f87c 	bl	80021b4 <_printf_i>
 80020bc:	e7ea      	b.n	8002094 <_svfiprintf_r+0x1c0>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	080031a8 	.word	0x080031a8
 80020c4:	080031ae 	.word	0x080031ae
 80020c8:	080031b2 	.word	0x080031b2
 80020cc:	00000000 	.word	0x00000000
 80020d0:	08001e11 	.word	0x08001e11

080020d4 <_printf_common>:
 80020d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020d6:	0015      	movs	r5, r2
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	688a      	ldr	r2, [r1, #8]
 80020dc:	690b      	ldr	r3, [r1, #16]
 80020de:	000c      	movs	r4, r1
 80020e0:	9000      	str	r0, [sp, #0]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	da00      	bge.n	80020e8 <_printf_common+0x14>
 80020e6:	0013      	movs	r3, r2
 80020e8:	0022      	movs	r2, r4
 80020ea:	602b      	str	r3, [r5, #0]
 80020ec:	3243      	adds	r2, #67	; 0x43
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d001      	beq.n	80020f8 <_printf_common+0x24>
 80020f4:	3301      	adds	r3, #1
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	069b      	lsls	r3, r3, #26
 80020fc:	d502      	bpl.n	8002104 <_printf_common+0x30>
 80020fe:	682b      	ldr	r3, [r5, #0]
 8002100:	3302      	adds	r3, #2
 8002102:	602b      	str	r3, [r5, #0]
 8002104:	6822      	ldr	r2, [r4, #0]
 8002106:	2306      	movs	r3, #6
 8002108:	0017      	movs	r7, r2
 800210a:	401f      	ands	r7, r3
 800210c:	421a      	tst	r2, r3
 800210e:	d027      	beq.n	8002160 <_printf_common+0x8c>
 8002110:	0023      	movs	r3, r4
 8002112:	3343      	adds	r3, #67	; 0x43
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	4193      	sbcs	r3, r2
 800211a:	6822      	ldr	r2, [r4, #0]
 800211c:	0692      	lsls	r2, r2, #26
 800211e:	d430      	bmi.n	8002182 <_printf_common+0xae>
 8002120:	0022      	movs	r2, r4
 8002122:	9901      	ldr	r1, [sp, #4]
 8002124:	9800      	ldr	r0, [sp, #0]
 8002126:	9e08      	ldr	r6, [sp, #32]
 8002128:	3243      	adds	r2, #67	; 0x43
 800212a:	47b0      	blx	r6
 800212c:	1c43      	adds	r3, r0, #1
 800212e:	d025      	beq.n	800217c <_printf_common+0xa8>
 8002130:	2306      	movs	r3, #6
 8002132:	6820      	ldr	r0, [r4, #0]
 8002134:	682a      	ldr	r2, [r5, #0]
 8002136:	68e1      	ldr	r1, [r4, #12]
 8002138:	2500      	movs	r5, #0
 800213a:	4003      	ands	r3, r0
 800213c:	2b04      	cmp	r3, #4
 800213e:	d103      	bne.n	8002148 <_printf_common+0x74>
 8002140:	1a8d      	subs	r5, r1, r2
 8002142:	43eb      	mvns	r3, r5
 8002144:	17db      	asrs	r3, r3, #31
 8002146:	401d      	ands	r5, r3
 8002148:	68a3      	ldr	r3, [r4, #8]
 800214a:	6922      	ldr	r2, [r4, #16]
 800214c:	4293      	cmp	r3, r2
 800214e:	dd01      	ble.n	8002154 <_printf_common+0x80>
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	18ed      	adds	r5, r5, r3
 8002154:	2700      	movs	r7, #0
 8002156:	42bd      	cmp	r5, r7
 8002158:	d120      	bne.n	800219c <_printf_common+0xc8>
 800215a:	2000      	movs	r0, #0
 800215c:	e010      	b.n	8002180 <_printf_common+0xac>
 800215e:	3701      	adds	r7, #1
 8002160:	68e3      	ldr	r3, [r4, #12]
 8002162:	682a      	ldr	r2, [r5, #0]
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	42bb      	cmp	r3, r7
 8002168:	ddd2      	ble.n	8002110 <_printf_common+0x3c>
 800216a:	0022      	movs	r2, r4
 800216c:	2301      	movs	r3, #1
 800216e:	9901      	ldr	r1, [sp, #4]
 8002170:	9800      	ldr	r0, [sp, #0]
 8002172:	9e08      	ldr	r6, [sp, #32]
 8002174:	3219      	adds	r2, #25
 8002176:	47b0      	blx	r6
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	d1f0      	bne.n	800215e <_printf_common+0x8a>
 800217c:	2001      	movs	r0, #1
 800217e:	4240      	negs	r0, r0
 8002180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002182:	2030      	movs	r0, #48	; 0x30
 8002184:	18e1      	adds	r1, r4, r3
 8002186:	3143      	adds	r1, #67	; 0x43
 8002188:	7008      	strb	r0, [r1, #0]
 800218a:	0021      	movs	r1, r4
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	3145      	adds	r1, #69	; 0x45
 8002190:	7809      	ldrb	r1, [r1, #0]
 8002192:	18a2      	adds	r2, r4, r2
 8002194:	3243      	adds	r2, #67	; 0x43
 8002196:	3302      	adds	r3, #2
 8002198:	7011      	strb	r1, [r2, #0]
 800219a:	e7c1      	b.n	8002120 <_printf_common+0x4c>
 800219c:	0022      	movs	r2, r4
 800219e:	2301      	movs	r3, #1
 80021a0:	9901      	ldr	r1, [sp, #4]
 80021a2:	9800      	ldr	r0, [sp, #0]
 80021a4:	9e08      	ldr	r6, [sp, #32]
 80021a6:	321a      	adds	r2, #26
 80021a8:	47b0      	blx	r6
 80021aa:	1c43      	adds	r3, r0, #1
 80021ac:	d0e6      	beq.n	800217c <_printf_common+0xa8>
 80021ae:	3701      	adds	r7, #1
 80021b0:	e7d1      	b.n	8002156 <_printf_common+0x82>
	...

080021b4 <_printf_i>:
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	9206      	str	r2, [sp, #24]
 80021ba:	000a      	movs	r2, r1
 80021bc:	3243      	adds	r2, #67	; 0x43
 80021be:	9307      	str	r3, [sp, #28]
 80021c0:	9005      	str	r0, [sp, #20]
 80021c2:	9204      	str	r2, [sp, #16]
 80021c4:	7e0a      	ldrb	r2, [r1, #24]
 80021c6:	000c      	movs	r4, r1
 80021c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80021ca:	2a78      	cmp	r2, #120	; 0x78
 80021cc:	d807      	bhi.n	80021de <_printf_i+0x2a>
 80021ce:	2a62      	cmp	r2, #98	; 0x62
 80021d0:	d809      	bhi.n	80021e6 <_printf_i+0x32>
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d100      	bne.n	80021d8 <_printf_i+0x24>
 80021d6:	e0c1      	b.n	800235c <_printf_i+0x1a8>
 80021d8:	2a58      	cmp	r2, #88	; 0x58
 80021da:	d100      	bne.n	80021de <_printf_i+0x2a>
 80021dc:	e08c      	b.n	80022f8 <_printf_i+0x144>
 80021de:	0026      	movs	r6, r4
 80021e0:	3642      	adds	r6, #66	; 0x42
 80021e2:	7032      	strb	r2, [r6, #0]
 80021e4:	e022      	b.n	800222c <_printf_i+0x78>
 80021e6:	0010      	movs	r0, r2
 80021e8:	3863      	subs	r0, #99	; 0x63
 80021ea:	2815      	cmp	r0, #21
 80021ec:	d8f7      	bhi.n	80021de <_printf_i+0x2a>
 80021ee:	f7fd ff89 	bl	8000104 <__gnu_thumb1_case_shi>
 80021f2:	0016      	.short	0x0016
 80021f4:	fff6001f 	.word	0xfff6001f
 80021f8:	fff6fff6 	.word	0xfff6fff6
 80021fc:	001ffff6 	.word	0x001ffff6
 8002200:	fff6fff6 	.word	0xfff6fff6
 8002204:	fff6fff6 	.word	0xfff6fff6
 8002208:	003600a8 	.word	0x003600a8
 800220c:	fff6009a 	.word	0xfff6009a
 8002210:	00b9fff6 	.word	0x00b9fff6
 8002214:	0036fff6 	.word	0x0036fff6
 8002218:	fff6fff6 	.word	0xfff6fff6
 800221c:	009e      	.short	0x009e
 800221e:	0026      	movs	r6, r4
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	3642      	adds	r6, #66	; 0x42
 8002224:	1d11      	adds	r1, r2, #4
 8002226:	6019      	str	r1, [r3, #0]
 8002228:	6813      	ldr	r3, [r2, #0]
 800222a:	7033      	strb	r3, [r6, #0]
 800222c:	2301      	movs	r3, #1
 800222e:	e0a7      	b.n	8002380 <_printf_i+0x1cc>
 8002230:	6808      	ldr	r0, [r1, #0]
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	1d0a      	adds	r2, r1, #4
 8002236:	0605      	lsls	r5, r0, #24
 8002238:	d50b      	bpl.n	8002252 <_printf_i+0x9e>
 800223a:	680d      	ldr	r5, [r1, #0]
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	2d00      	cmp	r5, #0
 8002240:	da03      	bge.n	800224a <_printf_i+0x96>
 8002242:	232d      	movs	r3, #45	; 0x2d
 8002244:	9a04      	ldr	r2, [sp, #16]
 8002246:	426d      	negs	r5, r5
 8002248:	7013      	strb	r3, [r2, #0]
 800224a:	4b61      	ldr	r3, [pc, #388]	; (80023d0 <_printf_i+0x21c>)
 800224c:	270a      	movs	r7, #10
 800224e:	9303      	str	r3, [sp, #12]
 8002250:	e01b      	b.n	800228a <_printf_i+0xd6>
 8002252:	680d      	ldr	r5, [r1, #0]
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	0641      	lsls	r1, r0, #25
 8002258:	d5f1      	bpl.n	800223e <_printf_i+0x8a>
 800225a:	b22d      	sxth	r5, r5
 800225c:	e7ef      	b.n	800223e <_printf_i+0x8a>
 800225e:	680d      	ldr	r5, [r1, #0]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	1d08      	adds	r0, r1, #4
 8002264:	6018      	str	r0, [r3, #0]
 8002266:	062e      	lsls	r6, r5, #24
 8002268:	d501      	bpl.n	800226e <_printf_i+0xba>
 800226a:	680d      	ldr	r5, [r1, #0]
 800226c:	e003      	b.n	8002276 <_printf_i+0xc2>
 800226e:	066d      	lsls	r5, r5, #25
 8002270:	d5fb      	bpl.n	800226a <_printf_i+0xb6>
 8002272:	680d      	ldr	r5, [r1, #0]
 8002274:	b2ad      	uxth	r5, r5
 8002276:	4b56      	ldr	r3, [pc, #344]	; (80023d0 <_printf_i+0x21c>)
 8002278:	2708      	movs	r7, #8
 800227a:	9303      	str	r3, [sp, #12]
 800227c:	2a6f      	cmp	r2, #111	; 0x6f
 800227e:	d000      	beq.n	8002282 <_printf_i+0xce>
 8002280:	3702      	adds	r7, #2
 8002282:	0023      	movs	r3, r4
 8002284:	2200      	movs	r2, #0
 8002286:	3343      	adds	r3, #67	; 0x43
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	6863      	ldr	r3, [r4, #4]
 800228c:	60a3      	str	r3, [r4, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db03      	blt.n	800229a <_printf_i+0xe6>
 8002292:	2204      	movs	r2, #4
 8002294:	6821      	ldr	r1, [r4, #0]
 8002296:	4391      	bics	r1, r2
 8002298:	6021      	str	r1, [r4, #0]
 800229a:	2d00      	cmp	r5, #0
 800229c:	d102      	bne.n	80022a4 <_printf_i+0xf0>
 800229e:	9e04      	ldr	r6, [sp, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00c      	beq.n	80022be <_printf_i+0x10a>
 80022a4:	9e04      	ldr	r6, [sp, #16]
 80022a6:	0028      	movs	r0, r5
 80022a8:	0039      	movs	r1, r7
 80022aa:	f7fd ffbb 	bl	8000224 <__aeabi_uidivmod>
 80022ae:	9b03      	ldr	r3, [sp, #12]
 80022b0:	3e01      	subs	r6, #1
 80022b2:	5c5b      	ldrb	r3, [r3, r1]
 80022b4:	7033      	strb	r3, [r6, #0]
 80022b6:	002b      	movs	r3, r5
 80022b8:	0005      	movs	r5, r0
 80022ba:	429f      	cmp	r7, r3
 80022bc:	d9f3      	bls.n	80022a6 <_printf_i+0xf2>
 80022be:	2f08      	cmp	r7, #8
 80022c0:	d109      	bne.n	80022d6 <_printf_i+0x122>
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	07db      	lsls	r3, r3, #31
 80022c6:	d506      	bpl.n	80022d6 <_printf_i+0x122>
 80022c8:	6863      	ldr	r3, [r4, #4]
 80022ca:	6922      	ldr	r2, [r4, #16]
 80022cc:	4293      	cmp	r3, r2
 80022ce:	dc02      	bgt.n	80022d6 <_printf_i+0x122>
 80022d0:	2330      	movs	r3, #48	; 0x30
 80022d2:	3e01      	subs	r6, #1
 80022d4:	7033      	strb	r3, [r6, #0]
 80022d6:	9b04      	ldr	r3, [sp, #16]
 80022d8:	1b9b      	subs	r3, r3, r6
 80022da:	6123      	str	r3, [r4, #16]
 80022dc:	9b07      	ldr	r3, [sp, #28]
 80022de:	0021      	movs	r1, r4
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	9805      	ldr	r0, [sp, #20]
 80022e4:	9b06      	ldr	r3, [sp, #24]
 80022e6:	aa09      	add	r2, sp, #36	; 0x24
 80022e8:	f7ff fef4 	bl	80020d4 <_printf_common>
 80022ec:	1c43      	adds	r3, r0, #1
 80022ee:	d14c      	bne.n	800238a <_printf_i+0x1d6>
 80022f0:	2001      	movs	r0, #1
 80022f2:	4240      	negs	r0, r0
 80022f4:	b00b      	add	sp, #44	; 0x2c
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f8:	3145      	adds	r1, #69	; 0x45
 80022fa:	700a      	strb	r2, [r1, #0]
 80022fc:	4a34      	ldr	r2, [pc, #208]	; (80023d0 <_printf_i+0x21c>)
 80022fe:	9203      	str	r2, [sp, #12]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	6821      	ldr	r1, [r4, #0]
 8002304:	ca20      	ldmia	r2!, {r5}
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	0608      	lsls	r0, r1, #24
 800230a:	d516      	bpl.n	800233a <_printf_i+0x186>
 800230c:	07cb      	lsls	r3, r1, #31
 800230e:	d502      	bpl.n	8002316 <_printf_i+0x162>
 8002310:	2320      	movs	r3, #32
 8002312:	4319      	orrs	r1, r3
 8002314:	6021      	str	r1, [r4, #0]
 8002316:	2710      	movs	r7, #16
 8002318:	2d00      	cmp	r5, #0
 800231a:	d1b2      	bne.n	8002282 <_printf_i+0xce>
 800231c:	2320      	movs	r3, #32
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	439a      	bics	r2, r3
 8002322:	6022      	str	r2, [r4, #0]
 8002324:	e7ad      	b.n	8002282 <_printf_i+0xce>
 8002326:	2220      	movs	r2, #32
 8002328:	6809      	ldr	r1, [r1, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	6022      	str	r2, [r4, #0]
 800232e:	0022      	movs	r2, r4
 8002330:	2178      	movs	r1, #120	; 0x78
 8002332:	3245      	adds	r2, #69	; 0x45
 8002334:	7011      	strb	r1, [r2, #0]
 8002336:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <_printf_i+0x220>)
 8002338:	e7e1      	b.n	80022fe <_printf_i+0x14a>
 800233a:	0648      	lsls	r0, r1, #25
 800233c:	d5e6      	bpl.n	800230c <_printf_i+0x158>
 800233e:	b2ad      	uxth	r5, r5
 8002340:	e7e4      	b.n	800230c <_printf_i+0x158>
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	680d      	ldr	r5, [r1, #0]
 8002346:	1d10      	adds	r0, r2, #4
 8002348:	6949      	ldr	r1, [r1, #20]
 800234a:	6018      	str	r0, [r3, #0]
 800234c:	6813      	ldr	r3, [r2, #0]
 800234e:	062e      	lsls	r6, r5, #24
 8002350:	d501      	bpl.n	8002356 <_printf_i+0x1a2>
 8002352:	6019      	str	r1, [r3, #0]
 8002354:	e002      	b.n	800235c <_printf_i+0x1a8>
 8002356:	066d      	lsls	r5, r5, #25
 8002358:	d5fb      	bpl.n	8002352 <_printf_i+0x19e>
 800235a:	8019      	strh	r1, [r3, #0]
 800235c:	2300      	movs	r3, #0
 800235e:	9e04      	ldr	r6, [sp, #16]
 8002360:	6123      	str	r3, [r4, #16]
 8002362:	e7bb      	b.n	80022dc <_printf_i+0x128>
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	1d11      	adds	r1, r2, #4
 8002368:	6019      	str	r1, [r3, #0]
 800236a:	6816      	ldr	r6, [r2, #0]
 800236c:	2100      	movs	r1, #0
 800236e:	0030      	movs	r0, r6
 8002370:	6862      	ldr	r2, [r4, #4]
 8002372:	f000 f831 	bl	80023d8 <memchr>
 8002376:	2800      	cmp	r0, #0
 8002378:	d001      	beq.n	800237e <_printf_i+0x1ca>
 800237a:	1b80      	subs	r0, r0, r6
 800237c:	6060      	str	r0, [r4, #4]
 800237e:	6863      	ldr	r3, [r4, #4]
 8002380:	6123      	str	r3, [r4, #16]
 8002382:	2300      	movs	r3, #0
 8002384:	9a04      	ldr	r2, [sp, #16]
 8002386:	7013      	strb	r3, [r2, #0]
 8002388:	e7a8      	b.n	80022dc <_printf_i+0x128>
 800238a:	6923      	ldr	r3, [r4, #16]
 800238c:	0032      	movs	r2, r6
 800238e:	9906      	ldr	r1, [sp, #24]
 8002390:	9805      	ldr	r0, [sp, #20]
 8002392:	9d07      	ldr	r5, [sp, #28]
 8002394:	47a8      	blx	r5
 8002396:	1c43      	adds	r3, r0, #1
 8002398:	d0aa      	beq.n	80022f0 <_printf_i+0x13c>
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	079b      	lsls	r3, r3, #30
 800239e:	d415      	bmi.n	80023cc <_printf_i+0x218>
 80023a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023a2:	68e0      	ldr	r0, [r4, #12]
 80023a4:	4298      	cmp	r0, r3
 80023a6:	daa5      	bge.n	80022f4 <_printf_i+0x140>
 80023a8:	0018      	movs	r0, r3
 80023aa:	e7a3      	b.n	80022f4 <_printf_i+0x140>
 80023ac:	0022      	movs	r2, r4
 80023ae:	2301      	movs	r3, #1
 80023b0:	9906      	ldr	r1, [sp, #24]
 80023b2:	9805      	ldr	r0, [sp, #20]
 80023b4:	9e07      	ldr	r6, [sp, #28]
 80023b6:	3219      	adds	r2, #25
 80023b8:	47b0      	blx	r6
 80023ba:	1c43      	adds	r3, r0, #1
 80023bc:	d098      	beq.n	80022f0 <_printf_i+0x13c>
 80023be:	3501      	adds	r5, #1
 80023c0:	68e3      	ldr	r3, [r4, #12]
 80023c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	42ab      	cmp	r3, r5
 80023c8:	dcf0      	bgt.n	80023ac <_printf_i+0x1f8>
 80023ca:	e7e9      	b.n	80023a0 <_printf_i+0x1ec>
 80023cc:	2500      	movs	r5, #0
 80023ce:	e7f7      	b.n	80023c0 <_printf_i+0x20c>
 80023d0:	080031b9 	.word	0x080031b9
 80023d4:	080031ca 	.word	0x080031ca

080023d8 <memchr>:
 80023d8:	b2c9      	uxtb	r1, r1
 80023da:	1882      	adds	r2, r0, r2
 80023dc:	4290      	cmp	r0, r2
 80023de:	d101      	bne.n	80023e4 <memchr+0xc>
 80023e0:	2000      	movs	r0, #0
 80023e2:	4770      	bx	lr
 80023e4:	7803      	ldrb	r3, [r0, #0]
 80023e6:	428b      	cmp	r3, r1
 80023e8:	d0fb      	beq.n	80023e2 <memchr+0xa>
 80023ea:	3001      	adds	r0, #1
 80023ec:	e7f6      	b.n	80023dc <memchr+0x4>

080023ee <memcpy>:
 80023ee:	2300      	movs	r3, #0
 80023f0:	b510      	push	{r4, lr}
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d100      	bne.n	80023f8 <memcpy+0xa>
 80023f6:	bd10      	pop	{r4, pc}
 80023f8:	5ccc      	ldrb	r4, [r1, r3]
 80023fa:	54c4      	strb	r4, [r0, r3]
 80023fc:	3301      	adds	r3, #1
 80023fe:	e7f8      	b.n	80023f2 <memcpy+0x4>

08002400 <memmove>:
 8002400:	b510      	push	{r4, lr}
 8002402:	4288      	cmp	r0, r1
 8002404:	d902      	bls.n	800240c <memmove+0xc>
 8002406:	188b      	adds	r3, r1, r2
 8002408:	4298      	cmp	r0, r3
 800240a:	d303      	bcc.n	8002414 <memmove+0x14>
 800240c:	2300      	movs	r3, #0
 800240e:	e007      	b.n	8002420 <memmove+0x20>
 8002410:	5c8b      	ldrb	r3, [r1, r2]
 8002412:	5483      	strb	r3, [r0, r2]
 8002414:	3a01      	subs	r2, #1
 8002416:	d2fb      	bcs.n	8002410 <memmove+0x10>
 8002418:	bd10      	pop	{r4, pc}
 800241a:	5ccc      	ldrb	r4, [r1, r3]
 800241c:	54c4      	strb	r4, [r0, r3]
 800241e:	3301      	adds	r3, #1
 8002420:	429a      	cmp	r2, r3
 8002422:	d1fa      	bne.n	800241a <memmove+0x1a>
 8002424:	e7f8      	b.n	8002418 <memmove+0x18>
	...

08002428 <_free_r>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	0005      	movs	r5, r0
 800242c:	2900      	cmp	r1, #0
 800242e:	d010      	beq.n	8002452 <_free_r+0x2a>
 8002430:	1f0c      	subs	r4, r1, #4
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da00      	bge.n	800243a <_free_r+0x12>
 8002438:	18e4      	adds	r4, r4, r3
 800243a:	0028      	movs	r0, r5
 800243c:	f000 f918 	bl	8002670 <__malloc_lock>
 8002440:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <_free_r+0x90>)
 8002442:	6813      	ldr	r3, [r2, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <_free_r+0x2c>
 8002448:	6063      	str	r3, [r4, #4]
 800244a:	6014      	str	r4, [r2, #0]
 800244c:	0028      	movs	r0, r5
 800244e:	f000 f917 	bl	8002680 <__malloc_unlock>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	42a3      	cmp	r3, r4
 8002456:	d908      	bls.n	800246a <_free_r+0x42>
 8002458:	6821      	ldr	r1, [r4, #0]
 800245a:	1860      	adds	r0, r4, r1
 800245c:	4283      	cmp	r3, r0
 800245e:	d1f3      	bne.n	8002448 <_free_r+0x20>
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	1841      	adds	r1, r0, r1
 8002466:	6021      	str	r1, [r4, #0]
 8002468:	e7ee      	b.n	8002448 <_free_r+0x20>
 800246a:	001a      	movs	r2, r3
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <_free_r+0x4e>
 8002472:	42a3      	cmp	r3, r4
 8002474:	d9f9      	bls.n	800246a <_free_r+0x42>
 8002476:	6811      	ldr	r1, [r2, #0]
 8002478:	1850      	adds	r0, r2, r1
 800247a:	42a0      	cmp	r0, r4
 800247c:	d10b      	bne.n	8002496 <_free_r+0x6e>
 800247e:	6820      	ldr	r0, [r4, #0]
 8002480:	1809      	adds	r1, r1, r0
 8002482:	1850      	adds	r0, r2, r1
 8002484:	6011      	str	r1, [r2, #0]
 8002486:	4283      	cmp	r3, r0
 8002488:	d1e0      	bne.n	800244c <_free_r+0x24>
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	1841      	adds	r1, r0, r1
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	6053      	str	r3, [r2, #4]
 8002494:	e7da      	b.n	800244c <_free_r+0x24>
 8002496:	42a0      	cmp	r0, r4
 8002498:	d902      	bls.n	80024a0 <_free_r+0x78>
 800249a:	230c      	movs	r3, #12
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	e7d5      	b.n	800244c <_free_r+0x24>
 80024a0:	6821      	ldr	r1, [r4, #0]
 80024a2:	1860      	adds	r0, r4, r1
 80024a4:	4283      	cmp	r3, r0
 80024a6:	d103      	bne.n	80024b0 <_free_r+0x88>
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	1841      	adds	r1, r0, r1
 80024ae:	6021      	str	r1, [r4, #0]
 80024b0:	6063      	str	r3, [r4, #4]
 80024b2:	6054      	str	r4, [r2, #4]
 80024b4:	e7ca      	b.n	800244c <_free_r+0x24>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	200000b4 	.word	0x200000b4

080024bc <sbrk_aligned>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	4e0f      	ldr	r6, [pc, #60]	; (80024fc <sbrk_aligned+0x40>)
 80024c0:	000d      	movs	r5, r1
 80024c2:	6831      	ldr	r1, [r6, #0]
 80024c4:	0004      	movs	r4, r0
 80024c6:	2900      	cmp	r1, #0
 80024c8:	d102      	bne.n	80024d0 <sbrk_aligned+0x14>
 80024ca:	f000 f8bf 	bl	800264c <_sbrk_r>
 80024ce:	6030      	str	r0, [r6, #0]
 80024d0:	0029      	movs	r1, r5
 80024d2:	0020      	movs	r0, r4
 80024d4:	f000 f8ba 	bl	800264c <_sbrk_r>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d00a      	beq.n	80024f2 <sbrk_aligned+0x36>
 80024dc:	2303      	movs	r3, #3
 80024de:	1cc5      	adds	r5, r0, #3
 80024e0:	439d      	bics	r5, r3
 80024e2:	42a8      	cmp	r0, r5
 80024e4:	d007      	beq.n	80024f6 <sbrk_aligned+0x3a>
 80024e6:	1a29      	subs	r1, r5, r0
 80024e8:	0020      	movs	r0, r4
 80024ea:	f000 f8af 	bl	800264c <_sbrk_r>
 80024ee:	1c43      	adds	r3, r0, #1
 80024f0:	d101      	bne.n	80024f6 <sbrk_aligned+0x3a>
 80024f2:	2501      	movs	r5, #1
 80024f4:	426d      	negs	r5, r5
 80024f6:	0028      	movs	r0, r5
 80024f8:	bd70      	pop	{r4, r5, r6, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	200000b8 	.word	0x200000b8

08002500 <_malloc_r>:
 8002500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002502:	2203      	movs	r2, #3
 8002504:	1ccb      	adds	r3, r1, #3
 8002506:	4393      	bics	r3, r2
 8002508:	3308      	adds	r3, #8
 800250a:	0006      	movs	r6, r0
 800250c:	001f      	movs	r7, r3
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d232      	bcs.n	8002578 <_malloc_r+0x78>
 8002512:	270c      	movs	r7, #12
 8002514:	42b9      	cmp	r1, r7
 8002516:	d831      	bhi.n	800257c <_malloc_r+0x7c>
 8002518:	0030      	movs	r0, r6
 800251a:	f000 f8a9 	bl	8002670 <__malloc_lock>
 800251e:	4d32      	ldr	r5, [pc, #200]	; (80025e8 <_malloc_r+0xe8>)
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	001c      	movs	r4, r3
 8002524:	2c00      	cmp	r4, #0
 8002526:	d12e      	bne.n	8002586 <_malloc_r+0x86>
 8002528:	0039      	movs	r1, r7
 800252a:	0030      	movs	r0, r6
 800252c:	f7ff ffc6 	bl	80024bc <sbrk_aligned>
 8002530:	0004      	movs	r4, r0
 8002532:	1c43      	adds	r3, r0, #1
 8002534:	d11e      	bne.n	8002574 <_malloc_r+0x74>
 8002536:	682c      	ldr	r4, [r5, #0]
 8002538:	0025      	movs	r5, r4
 800253a:	2d00      	cmp	r5, #0
 800253c:	d14a      	bne.n	80025d4 <_malloc_r+0xd4>
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	0029      	movs	r1, r5
 8002542:	18e3      	adds	r3, r4, r3
 8002544:	0030      	movs	r0, r6
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	f000 f880 	bl	800264c <_sbrk_r>
 800254c:	9b01      	ldr	r3, [sp, #4]
 800254e:	4283      	cmp	r3, r0
 8002550:	d143      	bne.n	80025da <_malloc_r+0xda>
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	3703      	adds	r7, #3
 8002556:	1aff      	subs	r7, r7, r3
 8002558:	2303      	movs	r3, #3
 800255a:	439f      	bics	r7, r3
 800255c:	3708      	adds	r7, #8
 800255e:	2f0c      	cmp	r7, #12
 8002560:	d200      	bcs.n	8002564 <_malloc_r+0x64>
 8002562:	270c      	movs	r7, #12
 8002564:	0039      	movs	r1, r7
 8002566:	0030      	movs	r0, r6
 8002568:	f7ff ffa8 	bl	80024bc <sbrk_aligned>
 800256c:	1c43      	adds	r3, r0, #1
 800256e:	d034      	beq.n	80025da <_malloc_r+0xda>
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	19df      	adds	r7, r3, r7
 8002574:	6027      	str	r7, [r4, #0]
 8002576:	e013      	b.n	80025a0 <_malloc_r+0xa0>
 8002578:	2b00      	cmp	r3, #0
 800257a:	dacb      	bge.n	8002514 <_malloc_r+0x14>
 800257c:	230c      	movs	r3, #12
 800257e:	2500      	movs	r5, #0
 8002580:	6033      	str	r3, [r6, #0]
 8002582:	0028      	movs	r0, r5
 8002584:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002586:	6822      	ldr	r2, [r4, #0]
 8002588:	1bd1      	subs	r1, r2, r7
 800258a:	d420      	bmi.n	80025ce <_malloc_r+0xce>
 800258c:	290b      	cmp	r1, #11
 800258e:	d917      	bls.n	80025c0 <_malloc_r+0xc0>
 8002590:	19e2      	adds	r2, r4, r7
 8002592:	6027      	str	r7, [r4, #0]
 8002594:	42a3      	cmp	r3, r4
 8002596:	d111      	bne.n	80025bc <_malloc_r+0xbc>
 8002598:	602a      	str	r2, [r5, #0]
 800259a:	6863      	ldr	r3, [r4, #4]
 800259c:	6011      	str	r1, [r2, #0]
 800259e:	6053      	str	r3, [r2, #4]
 80025a0:	0030      	movs	r0, r6
 80025a2:	0025      	movs	r5, r4
 80025a4:	f000 f86c 	bl	8002680 <__malloc_unlock>
 80025a8:	2207      	movs	r2, #7
 80025aa:	350b      	adds	r5, #11
 80025ac:	1d23      	adds	r3, r4, #4
 80025ae:	4395      	bics	r5, r2
 80025b0:	1aea      	subs	r2, r5, r3
 80025b2:	429d      	cmp	r5, r3
 80025b4:	d0e5      	beq.n	8002582 <_malloc_r+0x82>
 80025b6:	1b5b      	subs	r3, r3, r5
 80025b8:	50a3      	str	r3, [r4, r2]
 80025ba:	e7e2      	b.n	8002582 <_malloc_r+0x82>
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	e7ec      	b.n	800259a <_malloc_r+0x9a>
 80025c0:	6862      	ldr	r2, [r4, #4]
 80025c2:	42a3      	cmp	r3, r4
 80025c4:	d101      	bne.n	80025ca <_malloc_r+0xca>
 80025c6:	602a      	str	r2, [r5, #0]
 80025c8:	e7ea      	b.n	80025a0 <_malloc_r+0xa0>
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	e7e8      	b.n	80025a0 <_malloc_r+0xa0>
 80025ce:	0023      	movs	r3, r4
 80025d0:	6864      	ldr	r4, [r4, #4]
 80025d2:	e7a7      	b.n	8002524 <_malloc_r+0x24>
 80025d4:	002c      	movs	r4, r5
 80025d6:	686d      	ldr	r5, [r5, #4]
 80025d8:	e7af      	b.n	800253a <_malloc_r+0x3a>
 80025da:	230c      	movs	r3, #12
 80025dc:	0030      	movs	r0, r6
 80025de:	6033      	str	r3, [r6, #0]
 80025e0:	f000 f84e 	bl	8002680 <__malloc_unlock>
 80025e4:	e7cd      	b.n	8002582 <_malloc_r+0x82>
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	200000b4 	.word	0x200000b4

080025ec <_realloc_r>:
 80025ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ee:	0007      	movs	r7, r0
 80025f0:	000e      	movs	r6, r1
 80025f2:	0014      	movs	r4, r2
 80025f4:	2900      	cmp	r1, #0
 80025f6:	d105      	bne.n	8002604 <_realloc_r+0x18>
 80025f8:	0011      	movs	r1, r2
 80025fa:	f7ff ff81 	bl	8002500 <_malloc_r>
 80025fe:	0005      	movs	r5, r0
 8002600:	0028      	movs	r0, r5
 8002602:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002604:	2a00      	cmp	r2, #0
 8002606:	d103      	bne.n	8002610 <_realloc_r+0x24>
 8002608:	f7ff ff0e 	bl	8002428 <_free_r>
 800260c:	0025      	movs	r5, r4
 800260e:	e7f7      	b.n	8002600 <_realloc_r+0x14>
 8002610:	f000 f83e 	bl	8002690 <_malloc_usable_size_r>
 8002614:	9001      	str	r0, [sp, #4]
 8002616:	4284      	cmp	r4, r0
 8002618:	d803      	bhi.n	8002622 <_realloc_r+0x36>
 800261a:	0035      	movs	r5, r6
 800261c:	0843      	lsrs	r3, r0, #1
 800261e:	42a3      	cmp	r3, r4
 8002620:	d3ee      	bcc.n	8002600 <_realloc_r+0x14>
 8002622:	0021      	movs	r1, r4
 8002624:	0038      	movs	r0, r7
 8002626:	f7ff ff6b 	bl	8002500 <_malloc_r>
 800262a:	1e05      	subs	r5, r0, #0
 800262c:	d0e8      	beq.n	8002600 <_realloc_r+0x14>
 800262e:	9b01      	ldr	r3, [sp, #4]
 8002630:	0022      	movs	r2, r4
 8002632:	429c      	cmp	r4, r3
 8002634:	d900      	bls.n	8002638 <_realloc_r+0x4c>
 8002636:	001a      	movs	r2, r3
 8002638:	0031      	movs	r1, r6
 800263a:	0028      	movs	r0, r5
 800263c:	f7ff fed7 	bl	80023ee <memcpy>
 8002640:	0031      	movs	r1, r6
 8002642:	0038      	movs	r0, r7
 8002644:	f7ff fef0 	bl	8002428 <_free_r>
 8002648:	e7da      	b.n	8002600 <_realloc_r+0x14>
	...

0800264c <_sbrk_r>:
 800264c:	2300      	movs	r3, #0
 800264e:	b570      	push	{r4, r5, r6, lr}
 8002650:	4d06      	ldr	r5, [pc, #24]	; (800266c <_sbrk_r+0x20>)
 8002652:	0004      	movs	r4, r0
 8002654:	0008      	movs	r0, r1
 8002656:	602b      	str	r3, [r5, #0]
 8002658:	f7fe fd3e 	bl	80010d8 <_sbrk>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d103      	bne.n	8002668 <_sbrk_r+0x1c>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d000      	beq.n	8002668 <_sbrk_r+0x1c>
 8002666:	6023      	str	r3, [r4, #0]
 8002668:	bd70      	pop	{r4, r5, r6, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	200000bc 	.word	0x200000bc

08002670 <__malloc_lock>:
 8002670:	b510      	push	{r4, lr}
 8002672:	4802      	ldr	r0, [pc, #8]	; (800267c <__malloc_lock+0xc>)
 8002674:	f000 f814 	bl	80026a0 <__retarget_lock_acquire_recursive>
 8002678:	bd10      	pop	{r4, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	200000c0 	.word	0x200000c0

08002680 <__malloc_unlock>:
 8002680:	b510      	push	{r4, lr}
 8002682:	4802      	ldr	r0, [pc, #8]	; (800268c <__malloc_unlock+0xc>)
 8002684:	f000 f80d 	bl	80026a2 <__retarget_lock_release_recursive>
 8002688:	bd10      	pop	{r4, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	200000c0 	.word	0x200000c0

08002690 <_malloc_usable_size_r>:
 8002690:	1f0b      	subs	r3, r1, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1f18      	subs	r0, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	da01      	bge.n	800269e <_malloc_usable_size_r+0xe>
 800269a:	580b      	ldr	r3, [r1, r0]
 800269c:	18c0      	adds	r0, r0, r3
 800269e:	4770      	bx	lr

080026a0 <__retarget_lock_acquire_recursive>:
 80026a0:	4770      	bx	lr

080026a2 <__retarget_lock_release_recursive>:
 80026a2:	4770      	bx	lr

080026a4 <_init>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr

080026b0 <_fini>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr
